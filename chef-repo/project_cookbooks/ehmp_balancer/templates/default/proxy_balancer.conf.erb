<VirtualHost *:<%= @server_port %>>

  ServerName <%= @server_name %>

  DocumentRoot /var/www

  Header always edit Set-Cookie ^(.*)$ "$1; Secure"
  Header edit Set-Cookie ^(.*)$ "$1; Secure"

  Header always set Strict-Transport-Security "max-age=31536000"
  Header always set Content-Security-Policy-Report-Only "script-src 'self' 'unsafe-eval' 'unsafe-inline'; object-src 'none'; img-src 'self' data:; media-src 'none'; frame-src 'none'; connect-src 'self'"
  Header always set X-Content-Security-Policy-Report-Only "script-src 'self' 'unsafe-eval' 'unsafe-inline'; object-src 'none';  img-src 'self' data:; media-src 'none'; frame-src 'none'; connect-src 'self'"
  Header always set X-WebKit-CSP-Report-Only "script-src 'self' 'unsafe-eval' 'unsafe-inline'; object-src 'none'; img-src 'self' data:; media-src 'none'; frame-src 'none'; connect-src 'self'"

  <IfModule mod_autoindex.c>
    Options -Indexes
  </IfModule>

  <IfModule mod_deflate.c>
    # Compress HTML, CSS, JavaScript, Text, XML and fonts
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/json
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/vnd.ms-fontobject
    AddOutputFilterByType DEFLATE application/x-font
    AddOutputFilterByType DEFLATE application/x-font-opentype
    AddOutputFilterByType DEFLATE application/x-font-otf
    AddOutputFilterByType DEFLATE application/x-font-truetype
    AddOutputFilterByType DEFLATE application/x-font-ttf
    AddOutputFilterByType DEFLATE application/x-javascript
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE font/opentype
    AddOutputFilterByType DEFLATE font/otf
    AddOutputFilterByType DEFLATE font/ttf
    AddOutputFilterByType DEFLATE image/svg+xml
    AddOutputFilterByType DEFLATE image/x-icon
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/javascript
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/xml

    # Remove browser bugs (only needed for really old browsers)
    BrowserMatch ^Mozilla/4 gzip-only-text/html
    BrowserMatch ^Mozilla/4\.0[678] no-gzip
    BrowserMatch \bMSIE !no-gzip !gzip-only-text/html
    Header append Vary User-Agent
  </IfModule>

  <Proxy balancer://web-cluster>
<% @ehmp_ui_members_r1_2.each do |member| %>
    BalancerMember http://<%= member['ipaddress']%>:<%= member['adk']['port']%>
<% end %>

    Order Deny,Allow
    Deny from none
    Allow from all

    ProxySet lbmethod=<%= @lb_method %> <%= @sticky_session != "DISABLED" ? "stickysession=#{@sticky_session}" : ''%>
  </Proxy>

  <Proxy balancer://rdk-cluster>
<% @rdk_members_r1_2.each do |member| %>
  <% member['rdk']['processes'].times do |index| %>
    BalancerMember <%= member['rdk']['protocol']%>://<%= member['ipaddress']%>:<%= (member['rdk']['port']-index)%>
  <% end %>
<% end %>

    Order Deny,Allow
    Deny from none
    Allow from all

    ProxySet lbmethod=<%= @lb_method %> timeout=<%= @rdk_timeout %> <%= @sticky_session != "DISABLED" ? "stickysession=#{@sticky_session}" : ''%>
  </Proxy>

  <Proxy balancer://web-cluster-r2.0>
<% if node.recipe?('ehmp-ui') %>
    BalancerMember http://<%= node['ipaddress']%>:<%= node['adk']['port']%>
<% else %>
  <% @ehmp_ui_members.each do |member| %>
    BalancerMember http://<%= member['ipaddress']%>:<%= member['adk']['port']%>
  <% end %>
<% end %>

    Order Deny,Allow
    Deny from none
    Allow from all

    ProxySet lbmethod=<%= @lb_method %> <%= @sticky_session != "DISABLED" ? "stickysession=#{@sticky_session}" : ''%>
  </Proxy>

  <Proxy balancer://rdk-cluster-r2.0>
<% @fetch_server_members.each do |member| %>
  <% member['fetch_server']['service_config']['processes'].times do |index| %>
    BalancerMember <%= member['fetch_server']['protocol']%>://<%= member['ipaddress']%>:<%= (member['fetch_server']['service_config']['port']-index)%>
  <% end %>
<% end %>

    Order Deny,Allow
    Deny from none
    Allow from all

    ProxySet lbmethod=<%= @lb_method %> timeout=<%= @rdk_timeout %> <%= @sticky_session != "DISABLED" ? "stickysession=#{@sticky_session}" : ''%>
  </Proxy>

  <Proxy balancer://write-back-cluster-r2.0>
<% @write_back_members.each do |member| %>
  <% member['write_back']['service_config']['processes'].times do |index| %>
    BalancerMember <%= member['write_back']['protocol']%>://<%= member['ipaddress']%>:<%= (member['write_back']['service_config']['port']-index)%>
  <% end %>
<% end %>

    Order Deny,Allow
    Deny from none
    Allow from all

    ProxySet lbmethod=<%= @lb_method %> timeout=<%= @rdk_timeout %> <%= @sticky_session != "DISABLED" ? "stickysession=#{@sticky_session}" : ''%>
  </Proxy>

  <Proxy balancer://pick-list-cluster-r2.0>
<% @pick_list_members.each do |member| %>
  <% member['pick_list']['service_config']['processes'].times do |index| %>
    BalancerMember <%= member['pick_list']['protocol']%>://<%= member['ipaddress']%>:<%= (member['pick_list']['service_config']['port']-index)%>
  <% end %>
<% end %>

    Order Deny,Allow
    Deny from none
    Allow from all

    ProxySet lbmethod=<%= @lb_method %> timeout=<%= @rdk_timeout %> <%= @sticky_session != "DISABLED" ? "stickysession=#{@sticky_session}" : ''%>
  </Proxy>

  # control access to the uri's representing each component
  <Location /resource/authentication/systems/internal>
    Order deny,allow
    Deny from all
  </Location>
  <Location /resource/authentication/systems/external>
    NSSVerifyClient require
    NSSRequireSSL
    NSSOptions +FakeBasicAuth +ExportCertData +CompatEnvVars +StrictRequire
    NSSUserName SSL_CLIENT_S_DN_UID
  </Location>

  RewriteEngine On

  # Optional: allow selected IPs to access the application while we're in maintenance mode
  #RewriteCond %{REMOTE_ADDR} !^123\.456\.789\.000
  # Check for marker file before returning HTTP 503
  RewriteCond %{DOCUMENT_ROOT}/maintenance.enabled -f
  # Check for custom maintenance file
  RewriteCond %{DOCUMENT_ROOT}/maintenance.html -f
  # Avoid recursive rewrite on the maintenance page
  RewriteCond %{SCRIPT_FILENAME} !maintenance.html
  # Return HTTP 503
  RewriteRule ^.*$ %{DOCUMENT_ROOT}/maintenance.html [R=503,L]

  # Override default 503 page to use ours
  ErrorDocument 503 /maintenance.html

  #### Start Mixed balancer configuration ####

<% if @mixed_environment %>
  RewriteRule ^/$ /r1.2/ [R=302,L]
<% else %>
  RewriteRule ^/$ /r2.0/ [R=302,L]
<% end %>
  RewriteRule ^/documentation$ /r2.0/documentation/ [R=302,L]
  RewriteRule ^/documentation/(.*)$ /r2.0/documentation/$1 [R=302,L]
  RewriteRule ^/(r1.2|r2.0)$ /$1/ [R=301,L]
  RewriteRule ^/(r1.2|r2.0)/documentation$ /$1/documentation/ [R=301,L]

  RewriteRule ^/_assets/(.*)$ /r2.0/_assets/$1 [PT,L]

  RewriteCond %{HTTP_REFERER} \/r2\.0\/
  RewriteRule ^/resource/(.*)$ /r2.0/resource/$1 [PT,L]

  RewriteLogLevel 5
  RewriteLog logs/ssl-rewrite.log

  ProxyRequests off
  ProxyPass /balancer-manager !
  ProxyPass /maintenance.html !

  ProxyPass /r2.0/resource/write-pick-list balancer://pick-list-cluster-r2.0/resource/write-pick-list
  ProxyPass /r2.0/resource/write-health-data balancer://write-back-cluster-r2.0/resource/write-health-data
  ProxyPass /r2.0/resource balancer://rdk-cluster-r2.0/resource
  ProxyPass /r2.0/ balancer://web-cluster-r2.0/

  ProxyPass /resource balancer://rdk-cluster/resource
  ProxyPass /r1.2/ balancer://web-cluster/
  #### End Mixed balancer configuration ####

  # SSL VirtualHost directives
  NSSEngine on
  NSSFips on
  NSSCipherSuite <%= @nss_cipher_suite %>
  NSSProtocol <%= @nss_protocol %>
  NSSNickname Server-Cert
  NSSRenegotiation on
  NSSRequireSafeNegotiation on
  NSSCertificateDatabase /etc/httpd/ssl

  LogLevel warn
  ErrorLog logs/ssl_error.log
  TransferLog logs/ssl_access.log
  CustomLog logs/ssl_request_log \
      "%a %s %{<%= node[:ehmp_balancer][:rdk_cookie] %>}C %{X-Request-ID}o %t %{BALANCER_WORKER_NAME}e %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %B %D \"%{User-agent}i\""
  LogFormat "%{Referer}i -> %U%q" referer
  CustomLog logs/ssl_referer.log referer
</VirtualHost>
