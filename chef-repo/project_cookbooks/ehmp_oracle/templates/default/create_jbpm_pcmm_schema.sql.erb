ALTER SESSION SET ddl_lock_timeout = 600;

--
-- Create the PCMM data link
--
DECLARE
  U_COUNT NUMBER;
  create_link VARCHAR2(1024);
  drop_link VARCHAR2(1024);
  alter_link VARCHAR2(1024);
  user_name VARCHAR2(32);
  password VARCHAR(32);
  link_name VARCHAR2(32) := 'EHMP';
  existing_username VARCHAR2(32);
BEGIN
  U_COUNT := 0;
  user_name := '<%= @mssql_username %>';
  password := '<%= @mssql_password %>';

  create_link := 'CREATE PUBLIC DATABASE LINK '||link_name||' CONNECT TO '||user_name||' IDENTIFIED BY '||password||' USING ''dg4ehmp'' ';
  alter_link := 'ALTER PUBLIC DATABASE LINK '||link_name||' CONNECT TO '||user_name||' IDENTIFIED BY '||password;
  drop_link := 'DROP PUBLIC DATABASE LINK '||link_name||'';

  SELECT COUNT(*) INTO U_COUNT FROM DBA_DB_LINKS WHERE DB_LINK = link_name;

  IF U_COUNT = 0 THEN
      execute immediate create_link;
  ELSE
      SELECT username INTO existing_username FROM DBA_DB_LINKS WHERE DB_LINK = link_name;
      IF existing_username = upper(user_name) THEN
        execute immediate alter_link;
      ELSE
        execute immediate drop_link;
        execute immediate create_link;
      END IF;
  END IF;

  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('EXCEPTION CREATING PCMM DATA LINK '||SQLCODE||SQLERRM);
      RAISE;

END;
/

--
-- Create Views for all avaialble MSSQL (PCMM) tables
--
BEGIN

    EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.PCMM_PATIENT (PCMM_PATIENT_ID, ICN, BASE_ICN) AS SELECT PCMM_PATIENT_ID, ICN, BASE_ICN FROM PCMM.PCMM_PATIENT@EHMP';
    EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.PCM_STD_TEAM_FOCUS (PCM_STD_TEAM_FOCUS_ID, CODE) AS SELECT PCM_STD_TEAM_FOCUS_ID, CODE FROM PCMM.PCM_STD_TEAM_FOCUS@EHMP';
    EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.PCM_STD_TEAM_ROLE (PCM_STD_TEAM_ROLE_ID, NAME) AS SELECT PCM_STD_TEAM_ROLE_ID, NAME FROM PCMM.PCM_STD_TEAM_ROLE@EHMP';
    EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.STAFF (STAFF_ID, VA_INSTITUTION_ID, STAFF_IEN) AS SELECT STAFF_ID,VA_INSTITUTION_ID,STAFF_IEN FROM PCMM.STAFF@EHMP';
    EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.TEAM (TEAM_ID, PCM_STD_TEAM_FOCUS_ID, PCM_STD_TEAM_FOCUS2_ID, VA_INSTITUTION_ID, PCM_STD_TEAM_CARE_TYPE_ID, TEAM_NAME) AS SELECT TEAM_ID, PCM_STD_TEAM_FOCUS_ID, PCM_STD_TEAM_FOCUS2_ID, VA_INSTITUTION_ID, PCM_STD_TEAM_CARE_TYPE_ID, TEAM_NAME FROM PCMM.TEAM@EHMP';
    EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.TEAM_MEMBERSHIP (PCM_STD_TEAM_ROLE_ID, STAFF_ID, TEAM_POSITION_ID, TEAM_ID) AS SELECT PCM_STD_TEAM_ROLE_ID, STAFF_ID, TEAM_POSITION_ID, TEAM_ID FROM PCMM.TEAM_MEMBERSHIP@EHMP';
    EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.TEAM_PATIENT_ASSIGN (PCMM_PATIENT_ID, TEAM_ID) AS SELECT PCMM_PATIENT_ID, TEAM_ID FROM PCMM.TEAM_PATIENT_ASSIGN@EHMP';
    EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.TEAM_POSITION (TEAM_POSITION_ID, PCM_STD_TEAM_ROLE_ID, TEAM_ID) AS SELECT TEAM_POSITION_ID, PCM_STD_TEAM_ROLE_ID, TEAM_ID FROM PCMM.TEAM_POSITION@EHMP';
    EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.PATIENT_PRIMARY_CARE_VIEW (ICN, BASE_ICN, TEAM_ID, TEAM_NAME, TEAM_STATION_NUMBER, STAFF_IEN, STAFF_LAST_NAME, STAFF_FIRST_NAME, STAFF_MIDDLE_NAME, TEAM_PATIENT_START_DATE, TEAM_STAFF_START_DATE)
                      AS
                      SELECT DISTINCT pp.icn, pp.base_icn, t.team_id, t.team_name, i."stationNumber", s.staff_ien, s.last_name, s.first_name, s.middle_name, tpa.start_date, tm.start_date
                      FROM pcmm.pcmm_patient@ehmp pp
                      JOIN pcmm.team_patient_assign@ehmp tpa ON tpa.pcmm_patient_id = pp.pcmm_patient_id and tpa.end_date is null
                      JOIN pcmm.team@ehmp t ON t.team_id = tpa.team_id and t.pcm_std_team_care_type_id IN (7, 13)
                      JOIN sdsadm.std_institution@ehmp i ON i."id" = t.va_institution_id
                      LEFT JOIN (pcmm.team_membership@ehmp tm
                                 JOIN pcmm.pcm_std_team_role@ehmp tr ON (tm.pcm_std_team_role_id = tr.pcm_std_team_role_id and tr.primary_care_position_ind = ''Y'')
                                 JOIN pcmm.staff@ehmp s ON s.staff_id = tm.staff_id
                                ) ON tm.team_id = t.team_id and tm.end_date is null
                      WHERE pp.icn IS NOT NULL';

    EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.TEAM_STAFF_INST_VIEW (TEAM_ID, TEAM_POSITION_ID, PCM_STD_TEAM_ROLE_ID, STATIONNUMBER, STAFF_IEN, VA_INSTITUTION_ID, STAFF_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, PCM_STD_TEAM_CARE_TYPE_ID, PCM_STD_TEAM_FOCUS_CODE)
                      AS
                      SELECT TM.TEAM_ID, TM.team_position_id, TM.PCM_STD_TEAM_ROLE_ID, SI."stationNumber" AS STATIONNUMBER, S.STAFF_IEN, S.VA_INSTITUTION_ID, S.STAFF_ID, S.FIRST_NAME, S.MIDDLE_NAME, S.LAST_NAME, T.PCM_STD_TEAM_CARE_TYPE_ID, TF.CODE
                      FROM PCMM.TEAM_MEMBERSHIP@EHMP TM
                      JOIN PCMM.STAFF@EHMP S ON S.STAFF_ID =TM.STAFF_ID
                      JOIN SDSADM.STD_INSTITUTION@EHMP SI ON S.VA_INSTITUTION_ID = SI."id"
                      JOIN PCMM.TEAM@EHMP T ON T.TEAM_ID = TM.TEAM_ID
                      JOIN PCMM.PCM_STD_TEAM_FOCUS@EHMP TF ON T.PCM_STD_TEAM_FOCUS_ID = TF.PCM_STD_TEAM_FOCUS_ID
                      WHERE TM.END_DATE IS NULL';

    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.PCMM_PATIENT TO ACTIVITYDB';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.PCM_STD_TEAM_FOCUS TO ACTIVITYDB';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.PCM_STD_TEAM_ROLE TO ACTIVITYDB';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.STAFF TO ACTIVITYDB';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.TEAM TO ACTIVITYDB';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.TEAM_MEMBERSHIP TO ACTIVITYDB';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.TEAM_PATIENT_ASSIGN TO ACTIVITYDB';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.TEAM_POSITION TO ACTIVITYDB';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.PATIENT_PRIMARY_CARE_VIEW TO ACTIVITYDB';

    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.PCMM_PATIENT TO NOTIFDB';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.PCM_STD_TEAM_FOCUS TO NOTIFDB';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.PCM_STD_TEAM_ROLE TO NOTIFDB';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.STAFF TO NOTIFDB';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.TEAM TO NOTIFDB';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.TEAM_MEMBERSHIP TO NOTIFDB';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.TEAM_PATIENT_ASSIGN TO NOTIFDB';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.TEAM_POSITION TO NOTIFDB';

    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.PCMM_PATIENT TO ehmp_rw_role';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.PCM_STD_TEAM_FOCUS TO ehmp_rw_role';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.PCM_STD_TEAM_ROLE TO ehmp_rw_role';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.STAFF TO ehmp_rw_role';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.TEAM TO ehmp_rw_role';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.TEAM_MEMBERSHIP TO ehmp_rw_role';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.TEAM_PATIENT_ASSIGN TO ehmp_rw_role';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.TEAM_POSITION TO ehmp_rw_role';
    EXECUTE IMMEDIATE 'GRANT SELECT ON PCMM.PATIENT_PRIMARY_CARE_VIEW TO ehmp_rw_role';

  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('EXCEPTION CREATING PCMM VIEWS '||SQLCODE||SQLERRM);
      RAISE;
END;
/

--
-- Create Materialized View to join PCMM.TEAM_MEMBERSHIP, PCMM.STAFF, and SDSADM.STD_INSTITUTION tables
--
DECLARE
  U_COUNT NUMBER;
  refresh_minutes NUMBER;
BEGIN
  U_COUNT := 0;
  refresh_minutes := '<%= @refresh_view_minutes %>';

  SELECT COUNT(*) INTO U_COUNT FROM ALL_MVIEWS WHERE MVIEW_NAME = 'MV_TEAM_STAFF_INST' AND OWNER = 'PCMM';

  IF U_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW PCMM.MV_TEAM_STAFF_INST';
  END IF;

  SELECT COUNT(*) INTO U_COUNT FROM ALL_MVIEWS WHERE MVIEW_NAME = 'STD_INSTITUTION' AND OWNER = 'SDSADM';
  IF U_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW SDSADM.STD_INSTITUTION';
  END IF;

  SELECT COUNT(*) INTO U_COUNT FROM ALL_MVIEWS WHERE MVIEW_NAME = 'STD_INSTITUTION_MV' AND OWNER = 'SDSADM';
  IF U_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW SDSADM.STD_INSTITUTION_MV';
  END IF;

  EXECUTE IMMEDIATE 'CREATE MATERIALIZED VIEW SDSADM.STD_INSTITUTION_MV (ID, STATIONNUMBER, VISTANAME, STREETCITY, STREETSTATE_ID) REFRESH FORCE WITH PRIMARY KEY START WITH SYSDATE NEXT SYSDATE+('||refresh_minutes||'/1440) AS SELECT "id","stationNumber", "vistaName", "streetCity", "streetState_id" FROM sdsadm.STD_INSTITUTION@EHMP';
  EXECUTE IMMEDIATE 'GRANT SELECT ON  SDSADM.STD_INSTITUTION_MV TO ACTIVITYDB';
  EXECUTE IMMEDIATE 'GRANT SELECT ON  SDSADM.STD_INSTITUTION_MV TO NOTIFDB';
  EXECUTE IMMEDIATE 'GRANT SELECT ON  SDSADM.STD_INSTITUTION_MV TO ehmp_rw_role';

  SELECT COUNT(*) INTO U_COUNT FROM ALL_MVIEWS WHERE MVIEW_NAME = 'STD_STATE' AND OWNER = 'SDSADM';
  IF U_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW SDSADM.STD_STATE';
  END IF;

  SELECT COUNT(*) INTO U_COUNT FROM ALL_MVIEWS WHERE MVIEW_NAME = 'STD_STATE_MV' AND OWNER = 'SDSADM';
  IF U_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW SDSADM.STD_STATE_MV';
  END IF;

  EXECUTE IMMEDIATE 'CREATE MATERIALIZED VIEW SDSADM.STD_STATE_MV(ID, POSTALNAME) REFRESH FORCE WITH PRIMARY KEY START WITH SYSDATE NEXT SYSDATE+('||refresh_minutes||'/1440) AS SELECT "id","postalName" FROM sdsadm.STD_STATE@EHMP';
  EXECUTE IMMEDIATE 'GRANT SELECT ON  SDSADM.STD_STATE_MV TO ACTIVITYDB';
  EXECUTE IMMEDIATE 'GRANT SELECT ON  SDSADM.STD_STATE_MV TO NOTIFDB';
  EXECUTE IMMEDIATE 'GRANT SELECT ON  SDSADM.STD_STATE_MV TO ehmp_rw_role';

  SELECT COUNT(*) INTO U_COUNT FROM ALL_MVIEWS WHERE MVIEW_NAME = 'PCM_STD_TEAM_FOCUS_MV' AND OWNER = 'PCMM';
  IF U_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW PCMM.PCM_STD_TEAM_FOCUS_MV';
  END IF;

  EXECUTE IMMEDIATE 'CREATE MATERIALIZED VIEW PCMM.PCM_STD_TEAM_FOCUS_MV(PCM_STD_TEAM_FOCUS_ID, CODE) REFRESH FORCE WITH PRIMARY KEY START WITH SYSDATE NEXT SYSDATE+('||refresh_minutes||'/1440) AS SELECT PCM_STD_TEAM_FOCUS_ID, CODE FROM PCMM.PCM_STD_TEAM_FOCUS@EHMP';
  EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.PCM_STD_TEAM_FOCUS_MV TO ACTIVITYDB';
  EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.PCM_STD_TEAM_FOCUS_MV TO NOTIFDB';
  EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.PCM_STD_TEAM_FOCUS_MV TO ehmp_rw_role';

  EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW SDSADM.STD_INSTITUTION (ID, STATIONNUMBER, VISTANAME, STREETCITY, STREETSTATE_ID) AS SELECT "id","stationNumber", "vistaName", "streetCity", "streetState_id" FROM sdsadm.STD_INSTITUTION@EHMP';
  EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW SDSADM.STD_STATE (ID, POSTALNAME) AS SELECT "id","postalName" FROM sdsadm.STD_STATE@EHMP';

  EXECUTE IMMEDIATE 'GRANT SELECT ON SDSADM.STD_INSTITUTION TO ACTIVITYDB';
  EXECUTE IMMEDIATE 'GRANT SELECT ON SDSADM.STD_INSTITUTION TO NOTIFDB';
  EXECUTE IMMEDIATE 'GRANT SELECT ON SDSADM.STD_INSTITUTION TO ehmp_rw_role';

  EXECUTE IMMEDIATE 'GRANT SELECT ON SDSADM.STD_STATE TO ACTIVITYDB';
  EXECUTE IMMEDIATE 'GRANT SELECT ON SDSADM.STD_STATE TO NOTIFDB';
  EXECUTE IMMEDIATE 'GRANT SELECT ON SDSADM.STD_STATE TO ehmp_rw_role';

  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('EXCEPTION CREATING MATERIALIZED VIEWS '||SQLCODE||SQLERRM);
      RAISE;

END;
/

--
-- Unknown procedures - need more info
--
CREATE OR REPLACE PROCEDURE PCMM.VALIDATE_ROLE (
  instance_id in varchar2,
  pcmm_recordset OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN pcmm_recordset FOR 
    SELECT PCM_STD_TEAM_ROLE_ID,NAME  FROM PCMM.PCM_STD_TEAM_ROLE WHERE PCM_STD_TEAM_ROLE_ID = instance_id;
END VALIDATE_ROLE;
/

GRANT EXECUTE ON PCMM.VALIDATE_ROLE TO ehmp_rw_role ;
/

CREATE OR REPLACE PROCEDURE PCMM.VALIDATE_TEAM (
  instance_id in varchar2,
  pcmm_recordset OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN pcmm_recordset FOR 
    SELECT TEAM_ID, TEAM_NAME FROM PCMM.TEAM WHERE TEAM_ID = instance_id;
END VALIDATE_TEAM;
/

GRANT EXECUTE ON PCMM.VALIDATE_TEAM TO ehmp_rw_role ;
/

--
-- Compile activitydb packages if found
--

DECLARE
  U_COUNT NUMBER;
BEGIN
  U_COUNT := 0;
  SELECT COUNT(*) INTO U_COUNT FROM ALL_OBJECTS WHERE OWNER = 'ACTIVITYDB' AND OBJECT_TYPE = 'PACKAGE' AND OBJECT_NAME = 'ACTIVITIES';
  IF U_COUNT > 0
      THEN
      EXECUTE IMMEDIATE 'ALTER PACKAGE ACTIVITYDB.ACTIVITIES COMPILE';
  END IF;

  SELECT COUNT(*) INTO U_COUNT FROM ALL_OBJECTS WHERE OWNER = 'ACTIVITYDB' AND OBJECT_TYPE = 'PACKAGE' AND OBJECT_NAME = 'PCMMDATA';
  IF U_COUNT > 0
      THEN
      EXECUTE IMMEDIATE 'ALTER PACKAGE ACTIVITYDB.PCMMDATA COMPILE';
  END IF;

  SELECT COUNT(*) INTO U_COUNT FROM ALL_OBJECTS WHERE OWNER = 'ACTIVITYDB' AND OBJECT_TYPE = 'PACKAGE' AND OBJECT_NAME = 'TASKS';
  IF U_COUNT > 0
      THEN
      EXECUTE IMMEDIATE 'ALTER PACKAGE ACTIVITYDB.TASKS COMPILE';
  END IF;

END;
/

--
-- Create dbms_scheduler schedule
--

Declare
    object_exists EXCEPTION;
    PRAGMA exception_init(object_exists, -27477);
    job_running EXCEPTION;
    PRAGMA exception_init(job_running, -27478);
Begin

    Begin
        dbms_scheduler.create_schedule(
            schedule_name   => 'PCMM.REPLICATE_PCMM_SCHEDULE',
            start_date      => SYSTIMESTAMP,
            end_date        => NULL,
            repeat_interval => '<%= @replicate_pcmm_schedule_repeat_interval %>'
        );
        EXCEPTION
            WHEN object_exists THEN
                NULL;
    End;

    Begin
        dbms_scheduler.set_attribute(
            name => 'PCMM.REPLICATE_PCMM_SCHEDULE',
            attribute => 'repeat_interval',
            value => '<%= @replicate_pcmm_schedule_repeat_interval %>'
        );
    End;

End;
/