set serveroutput on
--
-- Drop the PCMM tables if still there
--
DECLARE
   sql_statement VARCHAR2(1024);
   CURSOR pcmm_tables_cur
   IS
      SELECT table_name
      FROM DBA_TABLES
      WHERE OWNER = 'PCMM';
BEGIN
   FOR table_rec
   IN pcmm_tables_cur
   LOOP
      sql_statement := 'DROP TABLE PCMM.'||table_rec.table_name||' CASCADE CONSTRAINTS';
      DBMS_OUTPUT.put_line(sql_statement);
      EXECUTE IMMEDIATE sql_statement;
   END LOOP;

  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('EXCEPTION DROPPING PCMM TABLES '||SQLCODE||SQLERRM);

END;
/

--
-- Create the PCMM data link
--
DECLARE
  U_COUNT NUMBER;
  sql_statement VARCHAR2(1024);
  user_name VARCHAR2(32);
  password VARCHAR(32);
  BEGIN
  U_COUNT := 0;
  user_name := '<%= @mssql_username %>';
  password := '<%= @mssql_password %>';


  SELECT COUNT(*) INTO U_COUNT FROM DBA_DB_LINKS WHERE DB_LINK = 'EHMP';

  IF U_COUNT = 0
    THEN
      sql_statement := 'CREATE PUBLIC DATABASE LINK EHMP CONNECT TO '||user_name||' IDENTIFIED BY '||password||' USING ''dg4ehmp'' ';
      execute immediate sql_statement;

  END IF;

  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('EXCEPTION CREATING PCMM DATA LINK '||SQLCODE||SQLERRM);

END;
/

--
-- Create Views for all avaialble MSSQL (PCMM) tables
--
BEGIN

   EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.PCMM_PATIENT (PCMM_PATIENT_ID, ICN) AS SELECT PCMM_PATIENT_ID, ICN FROM PCMM.PCMM_PATIENT@EHMP';
   EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.PCM_STD_TEAM_FOCUS (PCM_STD_TEAM_FOCUS_ID, CODE) AS SELECT PCM_STD_TEAM_FOCUS_ID, CODE FROM PCMM.PCM_STD_TEAM_FOCUS@EHMP';
   EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.PCM_STD_TEAM_ROLE (PCM_STD_TEAM_ROLE_ID, NAME) AS SELECT PCM_STD_TEAM_ROLE_ID, NAME FROM PCMM.PCM_STD_TEAM_ROLE@EHMP';
   EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.STAFF (STAFF_ID, VA_INSTITUTION_ID, STAFF_IEN) AS SELECT STAFF_ID,VA_INSTITUTION_ID,STAFF_IEN FROM PCMM.STAFF@EHMP';
   EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.TEAM (TEAM_ID, PCM_STD_TEAM_FOCUS_ID, PCM_STD_TEAM_FOCUS2_ID, VA_INSTITUTION_ID, PCM_STD_TEAM_CARE_TYPE_ID, TEAM_NAME) AS SELECT TEAM_ID, PCM_STD_TEAM_FOCUS_ID, PCM_STD_TEAM_FOCUS2_ID, VA_INSTITUTION_ID, PCM_STD_TEAM_CARE_TYPE_ID, TEAM_NAME FROM PCMM.TEAM@EHMP';
   EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.TEAM_MEMBERSHIP (PCM_STD_TEAM_ROLE_ID, STAFF_ID, TEAM_POSITION_ID, TEAM_ID) AS SELECT PCM_STD_TEAM_ROLE_ID, STAFF_ID, TEAM_POSITION_ID, TEAM_ID FROM PCMM.TEAM_MEMBERSHIP@EHMP';
   EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.TEAM_PATIENT_ASSIGN (PCMM_PATIENT_ID, TEAM_ID) AS SELECT PCMM_PATIENT_ID, TEAM_ID FROM PCMM.TEAM_PATIENT_ASSIGN@EHMP';
   EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW PCMM.TEAM_POSITION (TEAM_POSITION_ID, PCM_STD_TEAM_ROLE_ID, TEAM_ID) AS SELECT TEAM_POSITION_ID, PCM_STD_TEAM_ROLE_ID, TEAM_ID FROM PCMM.TEAM_POSITION@EHMP';

   EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.PCMM_PATIENT TO ACTIVITYDBUSER';
   EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.PCM_STD_TEAM_FOCUS TO ACTIVITYDBUSER';
   EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.PCM_STD_TEAM_ROLE TO ACTIVITYDBUSER';
   EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.STAFF TO ACTIVITYDBUSER';
   EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.TEAM TO ACTIVITYDBUSER';
   EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.TEAM_MEMBERSHIP TO ACTIVITYDBUSER';
   EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.TEAM_PATIENT_ASSIGN TO ACTIVITYDBUSER';
   EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.TEAM_POSITION TO ACTIVITYDBUSER';


   EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.PCMM_PATIENT TO NOTIFDB';
   EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.PCM_STD_TEAM_FOCUS TO NOTIFDB';
   EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.PCM_STD_TEAM_ROLE TO NOTIFDB';
   EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.STAFF TO NOTIFDB';
   EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.TEAM TO NOTIFDB';
   EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.TEAM_MEMBERSHIP TO NOTIFDB';
   EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.TEAM_PATIENT_ASSIGN TO NOTIFDB';
   EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.TEAM_POSITION TO NOTIFDB';


  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('EXCEPTION CREATING PCMM VIEWS '||SQLCODE||SQLERRM);
END;
/

--
-- Create Materialized View to join PCMM.TEAM_MEMBERSHIP, PCMM.STAFF, and SDSADM.STD_INSTITUTION tables
--
DECLARE
  U_COUNT NUMBER;
  refresh_minutes NUMBER;
BEGIN
  U_COUNT := 0;
  refresh_minutes := '<%= @refresh_view_minutes %>';

  SELECT COUNT(*) INTO U_COUNT FROM ALL_MVIEWS WHERE MVIEW_NAME = 'MV_TEAM_STAFF_INST' AND OWNER = 'PCMM';

  IF U_COUNT > 0
    THEN
      EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW PCMM.MV_TEAM_STAFF_INST';
  END IF;

  EXECUTE IMMEDIATE 'CREATE MATERIALIZED VIEW PCMM.MV_TEAM_STAFF_INST (TEAM_ID, TEAM_POSITION_ID, PCM_STD_TEAM_ROLE_ID, STATIONNUMBER, STAFF_IEN, VA_INSTITUTION_ID, STAFF_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME) REFRESH FORCE WITH PRIMARY KEY START WITH SYSDATE NEXT SYSDATE+('||refresh_minutes||'/1440) AS SELECT TM.TEAM_ID, TM.team_position_id, TM.PCM_STD_TEAM_ROLE_ID, SI."stationNumber", S.STAFF_IEN, S.VA_INSTITUTION_ID, S.STAFF_ID, S.FIRST_NAME, S.MIDDLE_NAME, S.LAST_NAME FROM PCMM.TEAM_MEMBERSHIP@EHMP TM JOIN PCMM.STAFF@EHMP S ON S.STAFF_ID =TM.STAFF_ID JOIN SDSADM.STD_INSTITUTION@EHMP SI ON S.VA_INSTITUTION_ID = SI."id"';
  EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.MV_TEAM_STAFF_INST TO ACTIVITYDBUSER';
  EXECUTE IMMEDIATE 'GRANT SELECT ON  PCMM.MV_TEAM_STAFF_INST TO NOTIFDB';

  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('EXCEPTION CREATING PCMM DATA LINK '||SQLCODE||SQLERRM);

END;
/


--
-- Unknown procedures - need more info
--
CREATE OR REPLACE PROCEDURE PCMM.VALIDATE_ROLE (
  instance_id in varchar2,
  pcmm_recordset OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN pcmm_recordset FOR 
    SELECT PCM_STD_TEAM_ROLE_ID,NAME  FROM PCMM.PCM_STD_TEAM_ROLE WHERE PCM_STD_TEAM_ROLE_ID = instance_id;
END VALIDATE_ROLE;
/

GRANT EXECUTE ON PCMM.VALIDATE_ROLE TO ACTIVITYDBUSER ;
/

CREATE OR REPLACE PROCEDURE PCMM.VALIDATE_TEAM (
  instance_id in varchar2,
  pcmm_recordset OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN pcmm_recordset FOR 
    SELECT TEAM_ID, TEAM_NAME FROM PCMM.TEAM WHERE TEAM_ID = instance_id;
END VALIDATE_TEAM;
/

GRANT EXECUTE ON PCMM.VALIDATE_TEAM TO ACTIVITYDBUSER ;
/
