KIDS Distribution saved on Aug 16, 2017@12:37:32
HMP PATCH 4 TEST VERSION 2
**KIDS**:HMP*2.0*4^

**INSTALL NAME**
HMP*2.0*4
"BLD",9973,0)
HMP*2.0*4^HEALTH MANAGEMENT PLATFORM^0^3170816^y
"BLD",9973,4,0)
^9.64PA^800000^1
"BLD",9973,4,800000,0)
800000
"BLD",9973,4,800000,222)
y^y^f^^^^n
"BLD",9973,4,"B",800000,800000)

"BLD",9973,6.3)
13
"BLD",9973,"INIT")
POST^HMPPTIMO
"BLD",9973,"KRN",0)
^9.67PA^779.2^20
"BLD",9973,"KRN",.4,0)
.4
"BLD",9973,"KRN",.401,0)
.401
"BLD",9973,"KRN",.402,0)
.402
"BLD",9973,"KRN",.403,0)
.403
"BLD",9973,"KRN",.5,0)
.5
"BLD",9973,"KRN",.84,0)
.84
"BLD",9973,"KRN",3.6,0)
3.6
"BLD",9973,"KRN",3.8,0)
3.8
"BLD",9973,"KRN",9.2,0)
9.2
"BLD",9973,"KRN",9.8,0)
9.8
"BLD",9973,"KRN",9.8,"NM",0)
^9.68A^50^29
"BLD",9973,"KRN",9.8,"NM",1,0)
HMPDJFSQ^^0^B94537756
"BLD",9973,"KRN",9.8,"NM",2,0)
HMPMETA^^0^B46311090
"BLD",9973,"KRN",9.8,"NM",21,0)
HMPDJFSM^^0^B126535134
"BLD",9973,"KRN",9.8,"NM",22,0)
HMPDJFS^^0^B85758404
"BLD",9973,"KRN",9.8,"NM",23,0)
HMPDJFSG^^0^B216706735
"BLD",9973,"KRN",9.8,"NM",24,0)
HMPDJFSR^^0^B153706114
"BLD",9973,"KRN",9.8,"NM",25,0)
HMPDJFSP^^0^B155700320
"BLD",9973,"KRN",9.8,"NM",26,0)
HMPPTIMO^^0^B2182688
"BLD",9973,"KRN",9.8,"NM",27,0)
HMPDERRH^^0^B3239620
"BLD",9973,"KRN",9.8,"NM",28,0)
HMPDJ05V^^0^B75151382
"BLD",9973,"KRN",9.8,"NM",29,0)
HMPEVNT^^0^B202600828
"BLD",9973,"KRN",9.8,"NM",31,0)
HMPDJ02^^0^B152352466
"BLD",9973,"KRN",9.8,"NM",32,0)
HMPDVSIT^^0^B100619956
"BLD",9973,"KRN",9.8,"NM",33,0)
HMPDJ02A^^0^B20713203
"BLD",9973,"KRN",9.8,"NM",35,0)
HMPEASU^^0^B30940340
"BLD",9973,"KRN",9.8,"NM",36,0)
HMPDJFS1^^0^B13653252
"BLD",9973,"KRN",9.8,"NM",37,0)
HMPUTILS^^0^B101301435
"BLD",9973,"KRN",9.8,"NM",38,0)
HMPFPTC^^0^B14682882
"BLD",9973,"KRN",9.8,"NM",39,0)
HMPDJ05^^0^B100445962
"BLD",9973,"KRN",9.8,"NM",40,0)
HMPDJ04^^0^B101503739
"BLD",9973,"KRN",9.8,"NM",41,0)
HMPDJ04A^^0^B76733122
"BLD",9973,"KRN",9.8,"NM",42,0)
HMPUTIL1^^0^B48063389
"BLD",9973,"KRN",9.8,"NM",43,0)
HMPDJ0^^0^B124643614
"BLD",9973,"KRN",9.8,"NM",44,0)
HMPDJ^^0^B40624366
"BLD",9973,"KRN",9.8,"NM",45,0)
HMPDJ1^^0^B18444617
"BLD",9973,"KRN",9.8,"NM",46,0)
HMPDJ2^^0^B21349653
"BLD",9973,"KRN",9.8,"NM",47,0)
HMPDJX^^0^B36263065
"BLD",9973,"KRN",9.8,"NM",49,0)
HMPEF^^0^B92374442
"BLD",9973,"KRN",9.8,"NM",50,0)
HMPEFX^^0^B8402792
"BLD",9973,"KRN",9.8,"NM","B","HMPDERRH",27)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJ",44)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJ0",43)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJ02",31)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJ02A",33)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJ04",40)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJ04A",41)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJ05",39)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJ05V",28)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJ1",45)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJ2",46)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJFS",22)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJFS1",36)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJFSG",23)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJFSM",21)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJFSP",25)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJFSQ",1)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJFSR",24)

"BLD",9973,"KRN",9.8,"NM","B","HMPDJX",47)

"BLD",9973,"KRN",9.8,"NM","B","HMPDVSIT",32)

"BLD",9973,"KRN",9.8,"NM","B","HMPEASU",35)

"BLD",9973,"KRN",9.8,"NM","B","HMPEF",49)

"BLD",9973,"KRN",9.8,"NM","B","HMPEFX",50)

"BLD",9973,"KRN",9.8,"NM","B","HMPEVNT",29)

"BLD",9973,"KRN",9.8,"NM","B","HMPFPTC",38)

"BLD",9973,"KRN",9.8,"NM","B","HMPMETA",2)

"BLD",9973,"KRN",9.8,"NM","B","HMPPTIMO",26)

"BLD",9973,"KRN",9.8,"NM","B","HMPUTIL1",42)

"BLD",9973,"KRN",9.8,"NM","B","HMPUTILS",37)

"BLD",9973,"KRN",19,0)
19
"BLD",9973,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",9973,"KRN",19,"NM",1,0)
HMPM EXTRACT MONITOR^^1^
"BLD",9973,"KRN",19,"NM","B","HMPM EXTRACT MONITOR",1)

"BLD",9973,"KRN",19.1,0)
19.1
"BLD",9973,"KRN",101,0)
101
"BLD",9973,"KRN",409.61,0)
409.61
"BLD",9973,"KRN",771,0)
771
"BLD",9973,"KRN",779.2,0)
779.2
"BLD",9973,"KRN",870,0)
870
"BLD",9973,"KRN",8989.51,0)
8989.51
"BLD",9973,"KRN",8989.52,0)
8989.52
"BLD",9973,"KRN",8994,0)
8994
"BLD",9973,"KRN",8994,"NM",0)
^9.68A^1^1
"BLD",9973,"KRN",8994,"NM",1,0)
HMP CHKXTMP^^0
"BLD",9973,"KRN",8994,"NM","B","HMP CHKXTMP",1)

"BLD",9973,"KRN","B",.4,.4)

"BLD",9973,"KRN","B",.401,.401)

"BLD",9973,"KRN","B",.402,.402)

"BLD",9973,"KRN","B",.403,.403)

"BLD",9973,"KRN","B",.5,.5)

"BLD",9973,"KRN","B",.84,.84)

"BLD",9973,"KRN","B",3.6,3.6)

"BLD",9973,"KRN","B",3.8,3.8)

"BLD",9973,"KRN","B",9.2,9.2)

"BLD",9973,"KRN","B",9.8,9.8)

"BLD",9973,"KRN","B",19,19)

"BLD",9973,"KRN","B",19.1,19.1)

"BLD",9973,"KRN","B",101,101)

"BLD",9973,"KRN","B",409.61,409.61)

"BLD",9973,"KRN","B",771,771)

"BLD",9973,"KRN","B",779.2,779.2)

"BLD",9973,"KRN","B",870,870)

"BLD",9973,"KRN","B",8989.51,8989.51)

"BLD",9973,"KRN","B",8989.52,8989.52)

"BLD",9973,"KRN","B",8994,8994)

"BLD",9973,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",9973,"QUES",0)
^9.62^^
"BLD",9973,"REQB",0)
^9.611^1^1
"BLD",9973,"REQB",1,0)
HMP*2.0*3^2
"BLD",9973,"REQB","B","HMP*2.0*3",1)

"FIA",800000)
HMP SUBSCRIPTION
"FIA",800000,0)
^HMP(800000,
"FIA",800000,0,0)
800000
"FIA",800000,0,1)
y^y^f^^^^n
"FIA",800000,0,10)

"FIA",800000,0,11)

"FIA",800000,0,"RLRO")

"FIA",800000,0,"VR")
2.0^HMP
"FIA",800000,800000)
0
"FIA",800000,800000.01)
0
"FIA",800000,800000.02)
0
"FIA",800000,800000.14)
0
"FIA",800000,800000.142)
0
"INIT")
POST^HMPPTIMO
"IX",800000,800000,"AD",0)
800000^AD^Index of operational data by server.^R^^F^IR^I^800000^^^^^S
"IX",800000,800000,"AD",.1,0)
^^1^1^3160720^
"IX",800000,800000,"AD",.1,1,0)
This index is used to find operational data for each eHMP server.
"IX",800000,800000,"AD",1)
S ^HMP(800000,"AD",X,DA)=""
"IX",800000,800000,"AD",1.4)
S X=X(1)
"IX",800000,800000,"AD",2)
K ^HMP(800000,"AD",X,DA)
"IX",800000,800000,"AD",2.4)
S X=X(1)
"IX",800000,800000,"AD",2.5)
K ^HMP(800000,"AD")
"IX",800000,800000,"AD",11.1,0)
^.114IA^1^1
"IX",800000,800000,"AD",11.1,1,0)
1^F^800000^.07^^1^F
"IX",800000,800000,"ADFN",0)
800000^ADFN^Patients to track in the Data Monitor^MU^^R^IR^W^800000.01^^^^^S
"IX",800000,800000,"ADFN",.1,0)
^^1^1^3160720^
"IX",800000,800000,"ADFN",.1,1,0)
This index will place the entry in the data monitor for this patient.
"IX",800000,800000,"ADFN",1)
D HMPSET^HMPDJFS(.DA,.X)
"IX",800000,800000,"ADFN",1.4)
S X=0 I +X(1)>0 S X=1
"IX",800000,800000,"ADFN",2)
D HMPKILL^HMPDJFS(.DA,.X)
"IX",800000,800000,"ADFN",2.4)
S X=0 I X(1)'="" S X=1
"IX",800000,800000,"ADFN",2.5)
K ^HMP(800000,"AITEM")
"IX",800000,800000,"ADFN",11.1,0)
^.114IA^2^2
"IX",800000,800000,"ADFN",11.1,1,0)
1^F^800000.01^.01^^1^F
"IX",800000,800000,"ADFN",11.1,2,0)
2^F^800000.01^2^^^F
"IX",800000,800000,"AITEM",0)
800000^AITEM^AITEM TEST^MU^^F^IR^I^800000^^^^^A
"IX",800000,800000,"AITEM",.1,0)
^^1^1^3160726^
"IX",800000,800000,"AITEM",.1,1,0)
This index will place the entry in the data monitor for this patient.
"IX",800000,800000,"AITEM",1)
D HMPOSET^HMPDJFS(DA,X)
"IX",800000,800000,"AITEM",1.4)
I X(1)'=""
"IX",800000,800000,"AITEM",2)
D HMPOKILL^HMPDJFS(DA)
"IX",800000,800000,"AITEM",2.4)
I X(1)'=""
"IX",800000,800000,"AITEM",2.5)
K ^HMP(800000,"AITEM")
"IX",800000,800000,"AITEM",11.1,0)
^.114IA^1^1
"IX",800000,800000,"AITEM",11.1,1,0)
1^F^800000^.03^^^F
"IX",800000,800000,"AROS",0)
800000^AROS^Rosters to track in the Data Monitor^MU^^R^IR^W^800000.02^^^^^S
"IX",800000,800000,"AROS",.1,0)
^^1^1^3160720^
"IX",800000,800000,"AROS",.1,1,0)
A cross-reference of rosters for groups of patients on wards.
"IX",800000,800000,"AROS",1)
S:X2(2) ^HMP(800000,"AROS",X,DA(1))=""
"IX",800000,800000,"AROS",2)
K:X1(2) ^HMP(800000,"AROS",X,DA(1))
"IX",800000,800000,"AROS",2.5)
K ^HMP(800000,"AROS")
"IX",800000,800000,"AROS",11.1,0)
^.114IA^2^2
"IX",800000,800000,"AROS",11.1,1,0)
1^F^800000.02^.01^^1^F
"IX",800000,800000,"AROS",11.1,2,0)
2^F^800000.02^2^^2^
"IX",800000,800000.01,"AP",0)
800000.01^AP^Subscribed patients by server not yet initialized.^R^^R^IR^I^800000.01^^^^^S
"IX",800000,800000.01,"AP",.1,0)
^^6^6^3140521^
"IX",800000,800000.01,"AP",.1,1,0)
This index lists the patients who are not yet initialized:
"IX",800000,800000.01,"AP",.1,2,0)
 
"IX",800000,800000.01,"AP",.1,3,0)
  SERVER_IEN, "AP", STATUS, STATUS TIME, DFN
"IX",800000,800000.01,"AP",.1,4,0)
 
"IX",800000,800000.01,"AP",.1,5,0)
Patients with an initialized status (STATUS = 2) do not appear in this 
"IX",800000,800000.01,"AP",.1,6,0)
index.
"IX",800000,800000.01,"AP",1)
S ^HMP(800000,DA(1),1,"AP",X(1),X(2),DA)=""
"IX",800000,800000.01,"AP",1.4)
S X=(+X2(1)<2)
"IX",800000,800000.01,"AP",2)
K ^HMP(800000,DA(1),1,"AP",X(1),X(2),DA)
"IX",800000,800000.01,"AP",2.5)
K ^HMP(800000,DA(1),1,"AP")
"IX",800000,800000.01,"AP",11.1,0)
^.114IA^2^2
"IX",800000,800000.01,"AP",11.1,1,0)
1^F^800000.01^2^^1^F
"IX",800000,800000.01,"AP",11.1,2,0)
2^F^800000.01^3^^2^F
"KRN",19,14580,-1)
1^1
"KRN",19,14580,0)
HMPM EXTRACT MONITOR
"KRN",8994,3551,-1)
0^1
"KRN",8994,3551,0)
HMP CHKXTMP^CHKXTMP^HMPMONX^2^S^^^0^^^1
"KRN",8994,3551,1,0)
^8994.01^5^5^3160914^^^^
"KRN",8994,3551,1,1,0)
This Remote Procedure returns information about the eHMP storage size 
"KRN",8994,3551,1,2,0)
in ^XTMP and the number of patients in the queue.  The site hash plus 
"KRN",8994,3551,1,3,0)
the local date and time are also returned.
"KRN",8994,3551,1,4,0)
  
"KRN",8994,3551,1,5,0)
No input parameters are required.
"KRN",8994,3551,3,0)
^8994.03^14^14^3160914^^^^
"KRN",8994,3551,3,1,0)
It returns two lines of text:
"KRN",8994,3551,3,2,0)
 RESULT(1) - '^' delimited text describing the values returned
"KRN",8994,3551,3,3,0)
 RESULT(2) - '^' delimited text with values corresponding to the
"KRN",8994,3551,3,4,0)
              same $PIECE described in RESULT(1)
"KRN",8994,3551,3,5,0)
   
"KRN",8994,3551,3,6,0)
For example:
"KRN",8994,3551,3,7,0)
 Piece 1 - "site hash" and "9E7A"
"KRN",8994,3551,3,8,0)
 Piece 2 - "site local date time" and "2016-12-20 11:27:15"
"KRN",8994,3551,3,9,0)
 Piece 3 - "Patients in queue" and "17"
"KRN",8994,3551,3,10,0)
 Piece 4 - "Patients complete" and "15"
"KRN",8994,3551,3,11,0)
 Piece 5 - "Patients staging" and "2"
"KRN",8994,3551,3,12,0)
 Piece 6 - "XTMP('HMP') bytes" and "78445"
"KRN",8994,3551,3,13,0)
 Piece 7 - "XTMP('HMP') objects" and "2"
"KRN",8994,3551,3,14,0)
 
"MBREQ")
0
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",578,-1)
1^1
"PKG",578,0)
HEALTH MANAGEMENT PLATFORM^HMP^Access patient medical records from all VistA's
"PKG",578,20,0)
^9.402P^^
"PKG",578,22,0)
^9.49I^1^1
"PKG",578,22,1,0)
2.0^3160223^3170815^1
"PKG",578,22,1,"PAH",1,0)
4^3170816^1
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
29
"RTN","HMPDERRH")
0^27^B3239620
"RTN","HMPDERRH",1,0)
HMPDERRH ;SLC/AGP,ASMR/RRB,AFS/PB - HMP Error Handler;3/21/12 5:44pm
"RTN","HMPDERRH",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;*4*;Sep 01, 2011;Build 13
"RTN","HMPDERRH",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDERRH",4,0)
 ;
"RTN","HMPDERRH",5,0)
 ; External References          DBIA#
"RTN","HMPDERRH",6,0)
 ; -------------------          ----- 
"RTN","HMPDERRH",7,0)
 ; %ZTER,UNWIND^%ZTER           1621
"RTN","HMPDERRH",8,0)
 ; EC^%ZOSV                     10097
"RTN","HMPDERRH",9,0)
 Q
"RTN","HMPDERRH",10,0)
 ;
"RTN","HMPDERRH",11,0)
ERRHDLR ; -- save errors to return in JSON [Expects ERRPAT, ERRMSG]
"RTN","HMPDERRH",12,0)
 N ERROR S ERROR=$$EC^%ZOSV
"RTN","HMPDERRH",13,0)
 ;
"RTN","HMPDERRH",14,0)
 ;Ignore the "errors" the unwinder creates.
"RTN","HMPDERRH",15,0)
 I ERROR["ZTER" D UNWIND^%ZTER
"RTN","HMPDERRH",16,0)
 ;
"RTN","HMPDERRH",17,0)
 ;Make sure we don't loop if there is an error during processing of
"RTN","HMPDERRH",18,0)
 ;the error handler.
"RTN","HMPDERRH",19,0)
 N $ET S $ET="D ^%ZTER,UNWIND^%ZTER"
"RTN","HMPDERRH",20,0)
 ;
"RTN","HMPDERRH",21,0)
 ;Save the error then put it in the error trap, this saves the correct
"RTN","HMPDERRH",22,0)
 ;last global reference.
"RTN","HMPDERRH",23,0)
 D ^%ZTER
"RTN","HMPDERRH",24,0)
 ;
"RTN","HMPDERRH",25,0)
 N CNT,MSGCNT
"RTN","HMPDERRH",26,0)
 S CNT=+$G(^TMP($J,"HMP ERROR","# of Errors"))
"RTN","HMPDERRH",27,0)
 S CNT=CNT+1,^TMP($J,"HMP ERROR","# of Errors")=CNT
"RTN","HMPDERRH",28,0)
 S MSGCNT=+$O(^TMP($J,"HMP ERROR","ERROR MESSAGE",""),-1)
"RTN","HMPDERRH",29,0)
 I $G(ERRPAT)>0,MSGCNT=0 S MSGCNT=MSGCNT+1,^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT)="An error occurred on patient: "_$G(ERRPAT)
"RTN","HMPDERRH",30,0)
 I $G(ERRMSG)'="" S MSGCNT=MSGCNT+1,^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT)=ERRMSG
"RTN","HMPDERRH",31,0)
 S:$G(ERROR)'="" MSGCNT=$G(MSGCNT)+1,^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT)="The error is: "_$G(ERROR) ;Log the error message into TMP
"RTN","HMPDERRH",32,0)
 ;I $D(ERRARRY) D
"RTN","HMPDERRH",33,0)
 ;.S DOMCNT=$O(^TMP($J,"HMP ERROR",ERRPAT,ERRDOM,"DATA",""))+1
"RTN","HMPDERRH",34,0)
 ;.I $D(ERRARRY)>0 M ^TMP($J,"HMP ERROR",ERRPAT,ERRDOM,"DATA",DOMCNT)=ERRARRY
"RTN","HMPDERRH",35,0)
 ;if unwind I lose the entire process, which returns incomplete data to the extract return value.
"RTN","HMPDERRH",36,0)
 ;D GTQ^HMPDJ
"RTN","HMPDERRH",37,0)
 D UNWIND^%ZTER
"RTN","HMPDERRH",38,0)
 Q
"RTN","HMPDJ")
0^44^B40624366
"RTN","HMPDJ",1,0)
HMPDJ ;SLC/MKB,ASMR/RRB,CK,CPC -- Serve VistA data as JSON via RPC;Aug 29, 2016 20:06:27
"RTN","HMPDJ",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3,4**;May 15, 2016;Build 13
"RTN","HMPDJ",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ",4,0)
 ;
"RTN","HMPDJ",5,0)
 ; External References          DBIA#
"RTN","HMPDJ",6,0)
 ; -------------------          -----
"RTN","HMPDJ",7,0)
 ; ^DPT                         10035
"RTN","HMPDJ",8,0)
 ; MPIF001                       2701
"RTN","HMPDJ",9,0)
 ; XLFDT                        10103
"RTN","HMPDJ",10,0)
 ; XLFSTR                       10104
"RTN","HMPDJ",11,0)
 ; XUPARAM                       2541
"RTN","HMPDJ",12,0)
 ;
"RTN","HMPDJ",13,0)
 ; DE2818/RRB - SQA findings 1st 3 lines of code.
"RTN","HMPDJ",14,0)
 ;
"RTN","HMPDJ",15,0)
 Q
"RTN","HMPDJ",16,0)
 ;
"RTN","HMPDJ",17,0)
GET(HMP,FILTER) ; -- Return search results as JSON in @HMP@(n)
"RTN","HMPDJ",18,0)
 ; RPC = HMP GET PATIENT DATA JSON
"RTN","HMPDJ",19,0)
 ; where FILTER("patientId") = DFN or DFN;ICN
"RTN","HMPDJ",20,0)
 ;       FILTER("domain")    = name of desired data type  (see HMPDJ0)
"RTN","HMPDJ",21,0)
 ;       FILTER("text")      = boolean, to include document text [opt]
"RTN","HMPDJ",22,0)
 ;       FILTER("start")     = start date.time of search         [opt]
"RTN","HMPDJ",23,0)
 ;       FILTER("stop")      = stop date.time of search          [opt]
"RTN","HMPDJ",24,0)
 ;       FILTER("max")       = maximum number of items to return [opt]
"RTN","HMPDJ",25,0)
 ;       FILTER("id")        = single item id to return          [opt]
"RTN","HMPDJ",26,0)
 ;       FILTER("uid")       = single record uid to return       [opt]
"RTN","HMPDJ",27,0)
 ;       FILTER("noHead")    = flag, to omit header and commas   [opt]
"RTN","HMPDJ",28,0)
 ;
"RTN","HMPDJ",29,0)
 N ICN,DFN,HMPI,HMPSYS,HMPTYPE,HMPSTART,HMPSTOP,HMPMAX,HMPID,HMPTEXT,HMPP,TYPE,HMPTN,HMPERR
"RTN","HMPDJ",30,0)
 S HMP=$NA(^TMP("HMP",$J)),HMPI=0 K @HMP
"RTN","HMPDJ",31,0)
 S HMPSYS=$$SYS^HMPUTILS
"RTN","HMPDJ",32,0)
 S DT=$$DT^XLFDT  ;for crossing midnight
"RTN","HMPDJ",33,0)
 ;
"RTN","HMPDJ",34,0)
 ; parse & validate input parameters
"RTN","HMPDJ",35,0)
 I $G(FILTER("uid"))'="" D SEPUID(.FILTER)
"RTN","HMPDJ",36,0)
 ;
"RTN","HMPDJ",37,0)
 S DFN=$G(FILTER("patientId"))
"RTN","HMPDJ",38,0)
 ;
"RTN","HMPDJ",39,0)
 S ICN=+$P($G(DFN),";",2),DFN=+$G(DFN)
"RTN","HMPDJ",40,0)
 I '(DFN>0),ICN S DFN=+$$GETDFN^MPIF001(ICN)  ;DE4496
"RTN","HMPDJ",41,0)
 ;
"RTN","HMPDJ",42,0)
 S HMPTYPE=$G(FILTER("domain")) S:HMPTYPE="" HMPTYPE=$$ALL
"RTN","HMPDJ",43,0)
 I $D(ZTQUEUED) S HMP=$NA(^XTMP(HMPBATCH,HMPFZTSK,HMPTYPE)) K @HMP
"RTN","HMPDJ",44,0)
 ;ICR 10035 DE2818 ASF 11/2/15, DE4496 August 19, 2016
"RTN","HMPDJ",45,0)
 I HMPTYPE'="new",'(DFN>0)!'$D(^DPT(DFN)) D LOGDPT^HMPLOG(DFN) S HMPERR=$$ERR(1,DFN) G GTQ
"RTN","HMPDJ",46,0)
 ;
"RTN","HMPDJ",47,0)
 ; -- initialize chunking if from DOMPT^HMPDJFSP ; i.e. HMPCHNK defined *S68-JCH*
"RTN","HMPDJ",48,0)
 D CHNKINIT^HMPDJFSP(.HMP,.HMPI) ; *S68-JCH*
"RTN","HMPDJ",49,0)
 ;
"RTN","HMPDJ",50,0)
 S HMPSTART=+$G(FILTER("start"),1410102)
"RTN","HMPDJ",51,0)
 S HMPSTOP=+$G(FILTER("stop"),4141015)
"RTN","HMPDJ",52,0)
 S HMPMAX=+$G(FILTER("max"),999999)
"RTN","HMPDJ",53,0)
 I HMPSTART,HMPSTOP,HMPSTOP<HMPSTART D
"RTN","HMPDJ",54,0)
 . N X S X=HMPSTART,HMPSTART=HMPSTOP,HMPSTOP=X
"RTN","HMPDJ",55,0)
 I HMPSTOP,$L(HMPSTOP,".")<2 S HMPSTOP=HMPSTOP_".24"
"RTN","HMPDJ",56,0)
 ;
"RTN","HMPDJ",57,0)
 S HMPID=$G(FILTER("id"))
"RTN","HMPDJ",58,0)
 S HMPTEXT=+$G(FILTER("text"),1) ;default = true/text
"RTN","HMPDJ",59,0)
 ;
"RTN","HMPDJ",60,0)
 ;set error trap
"RTN","HMPDJ",61,0)
 K ^TMP($J,"HMP ERROR")
"RTN","HMPDJ",62,0)
 ;
"RTN","HMPDJ",63,0)
 ; extract data
"RTN","HMPDJ",64,0)
 I HMPTYPE="new",$L($T(EN^HMPDJX)),'$G(^XTMP("HMP-off","GET")) D EN^HMPDJX(HMPID,HMPMAX) Q  ;data updates
"RTN","HMPDJ",65,0)
 F HMPP=1:1:$L(HMPTYPE,";") S TYPE=$P(HMPTYPE,";",HMPP) I $L(TYPE) D
"RTN","HMPDJ",66,0)
 . S HMPTN=$$TAG(TYPE)_"^HMPDJ0" Q:'$L($T(@HMPTN))  ;D ERR(2) Q
"RTN","HMPDJ",67,0)
 . N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ",68,0)
 . S $ET="D ERRHDLR^HMPDERRH",ERRMSG="A problem occurred when trying to load patient data from an API."
"RTN","HMPDJ",69,0)
 . D @HMPTN
"RTN","HMPDJ",70,0)
 ;
"RTN","HMPDJ",71,0)
GTQ ; add item count and terminating characters
"RTN","HMPDJ",72,0)
 N ERROR I $D(^TMP($J,"HMP ERROR"))>0 D BUILDERR(.ERROR)
"RTN","HMPDJ",73,0)
 I +$G(FILTER("noHead"))=1 D  Q
"RTN","HMPDJ",74,0)
 . I $L($G(ERROR(1)))>1 D
"RTN","HMPDJ",75,0)
 ..  ;HMPMETA existence shows being called from sync request, freshnessDateTime shows it is unsolicited update
"RTN","HMPDJ",76,0)
 ..  ;so for freshness or RPC call this goes into TMP
"RTN","HMPDJ",77,0)
 ..  I '$D(HMPMETA)!($G(FILTER("freshnessDateTime"))) S @HMP@("error")=ERROR(1) Q
"RTN","HMPDJ",78,0)
 ..  ;whereas this goes into HMPFX
"RTN","HMPDJ",79,0)
 ..  S HMPI=HMPI+1,@HMP@(HMPI,1)="null,"_ERROR(1)
"RTN","HMPDJ",80,0)
 . S @HMP@("total")=+$G(HMPI)
"RTN","HMPDJ",81,0)
 S @HMP@(.5)="{"_$$APIVERS^HMPDJFS()_",""params"":{"_$$SYS_"},"
"RTN","HMPDJ",82,0)
 I $D(HMPERR) S @HMP@(1)="""error"":{""message"":"""_HMPERR_"""}}" Q
"RTN","HMPDJ",83,0)
 I '$D(@HMP)!'$G(HMPI) D  Q
"RTN","HMPDJ",84,0)
 . I '$D(ERROR) S @HMP@(1)="""data"":{""totalItems"":0,""items"":[]}}" Q
"RTN","HMPDJ",85,0)
 . S @HMP@(1)="""data"":{""totalItems"":0,""items"":[]},"
"RTN","HMPDJ",86,0)
 . S @HMP@(2,1)=ERROR(1)_"}"
"RTN","HMPDJ",87,0)
 ;
"RTN","HMPDJ",88,0)
 S @HMP@(.6)="""data"":{""updated"":"""_$$HL7NOW_""",""totalItems"":"_HMPI_",""items"":["
"RTN","HMPDJ",89,0)
 S HMPI=HMPI+1,@HMP@(HMPI)=$S($D(ERROR):"]}",1:"]}}")
"RTN","HMPDJ",90,0)
 I $D(ERROR)>0 S HMPI=HMPI+1,@HMP@(HMPI,.3)=",",@HMP@(HMPI,1)=ERROR(1)_"}"
"RTN","HMPDJ",91,0)
 K ^TMP($J,"HMP ERROR"),^TMP("HMPTEXT",$J)
"RTN","HMPDJ",92,0)
 Q
"RTN","HMPDJ",93,0)
 ;
"RTN","HMPDJ",94,0)
SEPUID(FILTER) ; -- separate uid into FILTER pieces
"RTN","HMPDJ",95,0)
 N UID
"RTN","HMPDJ",96,0)
 S UID=$G(FILTER("uid")) K FILTER("uid") Q:UID=""
"RTN","HMPDJ",97,0)
 I $P(UID,":",4)'=HMPSYS Q
"RTN","HMPDJ",98,0)
 S FILTER("patientId")=$P(UID,":",5)
"RTN","HMPDJ",99,0)
 S FILTER("domain")=$P(UID,":",3)
"RTN","HMPDJ",100,0)
 S FILTER("id")=$P(UID,":",6)
"RTN","HMPDJ",101,0)
 Q
"RTN","HMPDJ",102,0)
 ;
"RTN","HMPDJ",103,0)
SYS() ; -- return system info for JSON header
"RTN","HMPDJ",104,0)
 Q """domain"":"""_$$KSP^XUPARAM("WHERE")_""",""systemId"":"""_HMPSYS_""""
"RTN","HMPDJ",105,0)
 ;
"RTN","HMPDJ",106,0)
BUILDERR(RESULT,DFN) ; -- build error array
"RTN","HMPDJ",107,0)
 N COUNT,MESSAGE,MSGCNT
"RTN","HMPDJ",108,0)
 S COUNT=$G(^TMP($J,"HMP ERROR","# of Errors"))
"RTN","HMPDJ",109,0)
 S MESSAGE="A mumps error occurred when extracting patient data. A total of "_COUNT_" occurred.\n\r"
"RTN","HMPDJ",110,0)
 S MSGCNT=0 F  S MSGCNT=$O(^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT)) Q:MSGCNT'>0  D
"RTN","HMPDJ",111,0)
 . S MESSAGE=MESSAGE_$G(^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT))_"\n\r"
"RTN","HMPDJ",112,0)
 S RESULT(1)="""error"":{""message"":"""_MESSAGE_"""}"
"RTN","HMPDJ",113,0)
 Q
"RTN","HMPDJ",114,0)
 ;
"RTN","HMPDJ",115,0)
TAG(X) ; -- Return linetag in HMPDJ0 routine for clinical domain X
"RTN","HMPDJ",116,0)
 N Y S X=$G(X,"Z")
"RTN","HMPDJ",117,0)
 S Y=$E($$UP^XLFSTR(X),1,8)
"RTN","HMPDJ",118,0)
 S:'$L($T(@(Y_"^HMPDJ0"))) Y="HMP"
"RTN","HMPDJ",119,0)
 Q Y
"RTN","HMPDJ",120,0)
 ;
"RTN","HMPDJ",121,0)
ALL() ; -- return string for all types of data
"RTN","HMPDJ",122,0)
 Q "patient;problem;allergy;consult;vital;lab;procedure;obs;order;treatment;med;ptf;factor;immunization;exam;cpt;education;pov;skin;image;appointment;surgery;document;visit;mh"
"RTN","HMPDJ",123,0)
 ;
"RTN","HMPDJ",124,0)
ERR(X,VAL) ; -- return error message
"RTN","HMPDJ",125,0)
 N MSG  S MSG="Error"
"RTN","HMPDJ",126,0)
 I X=1  S MSG="Patient with dfn '"_$G(VAL)_"' not found"
"RTN","HMPDJ",127,0)
 I X=2  S MSG="Domain type '"_$G(VAL)_"' not recognized"
"RTN","HMPDJ",128,0)
 I X=3  S MSG="UID '"_$G(VAL)_"' not found"
"RTN","HMPDJ",129,0)
 I X=4  S MSG="Unable to create new object"
"RTN","HMPDJ",130,0)
 I X=99 S MSG="Unknown request"
"RTN","HMPDJ",131,0)
 Q MSG
"RTN","HMPDJ",132,0)
 ;
"RTN","HMPDJ",133,0)
HL7NOW() ; -- Return current time in HL7 format
"RTN","HMPDJ",134,0)
 Q $$FMTHL7^HMPSTMP($$NOW^XLFDT)  ; DE5016
"RTN","HMPDJ",135,0)
 ;
"RTN","HMPDJ",136,0)
ADD(ITEM,COLL) ; -- add ITEM to results
"RTN","HMPDJ",137,0)
 I $D(HMPCRC),$D(COLL) D ONE^HMPDCRC(ITEM,COLL) Q  ;checksum
"RTN","HMPDJ",138,0)
 ; -- add ITEM to @HMP@(HMPI) to return JSON
"RTN","HMPDJ",139,0)
 N HMPY,HMPERR
"RTN","HMPDJ",140,0)
 D ENCODE^HMPJSON(ITEM,"HMPY","HMPERR")
"RTN","HMPDJ",141,0)
 I $D(HMPERR) D  ;return ERRor instead of ITEM
"RTN","HMPDJ",142,0)
 . N HMPTMP,HMPTXT,HMPITM
"RTN","HMPDJ",143,0)
 . M HMPITM=@ITEM K HMPY
"RTN","HMPDJ",144,0)
 . S HMPTXT(1)="Problem encoding json output."
"RTN","HMPDJ",145,0)
 . D SETERROR^HMPUTILS(.HMPTMP,.HMPERR,.HMPTXT,.HMPITM)
"RTN","HMPDJ",146,0)
 . K HMPERR D ENCODE^HMPJSON("HMPTMP","HMPY","HMPERR")
"RTN","HMPDJ",147,0)
 I $D(HMPY) D
"RTN","HMPDJ",148,0)
 . S HMPI=HMPI+1
"RTN","HMPDJ",149,0)
 . I HMPI>1 S @HMP@(HMPI,.3)=","
"RTN","HMPDJ",150,0)
 . M @HMP@(HMPI)=HMPY
"RTN","HMPDJ",151,0)
 . ;
"RTN","HMPDJ",152,0)
 . ; -- chunk data if from DOMPT^HMPDJFSP ; i.e. HMPCHNK defined ; *S68-JCH*
"RTN","HMPDJ",153,0)
 . D CHNKCHK^HMPDJFSP(.HMP,.HMPI) ; *S68-JCH*
"RTN","HMPDJ",154,0)
 Q
"RTN","HMPDJ",155,0)
 ;
"RTN","HMPDJ",156,0)
TEST(DFN,TYPE,ID,TEXT,IN) ; -- test GET, write results to screen
"RTN","HMPDJ",157,0)
 N OUT,IDX S U="^"
"RTN","HMPDJ",158,0)
 S:'$D(IN("systemID")) IN("systemID")=$$SYS^HMPUTILS
"RTN","HMPDJ",159,0)
 S IN("patientId")=+$G(DFN)
"RTN","HMPDJ",160,0)
 S IN("domain")=$G(TYPE)
"RTN","HMPDJ",161,0)
 S:$D(ID) IN("id")=ID
"RTN","HMPDJ",162,0)
 S:$D(TEXT) IN("text")=TEXT
"RTN","HMPDJ",163,0)
 D GET(.OUT,.IN)
"RTN","HMPDJ",164,0)
 ;
"RTN","HMPDJ",165,0)
 S IDX=OUT
"RTN","HMPDJ",166,0)
 F  S IDX=$Q(@IDX) Q:IDX'?1"^TMP(""HMP"","1.N.E  Q:+$P(IDX,",",2)'=$J  W !,@IDX
"RTN","HMPDJ",167,0)
 Q
"RTN","HMPDJ",168,0)
 ;
"RTN","HMPDJ0")
0^43^B124643614
"RTN","HMPDJ0",1,0)
HMPDJ0 ;SLC/MKB,ASMR/JD,PB,CPC -- Serve VistA data as JSON cont ; 07/13/16 04:45pm
"RTN","HMPDJ0",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3,4**;Sep 01, 2011;Build 13
"RTN","HMPDJ0",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ0",4,0)
 ;
"RTN","HMPDJ0",5,0)
 ; External References          DBIA#
"RTN","HMPDJ0",6,0)
 ; -------------------          -----
"RTN","HMPDJ0",7,0)
 ; ^DPT                         10035  <see HMPDJ0* for others>
"RTN","HMPDJ0",8,0)
 ; EN^ORQ1                      3154
"RTN","HMPDJ0",9,0)
 ; SDAMA301                     4433
"RTN","HMPDJ0",10,0)
 ;
"RTN","HMPDJ0",11,0)
 ; All tags expect DFN, HMPSTART, HMPSTOP, HMPMAX, HMPID, HMPTEXT
"RTN","HMPDJ0",12,0)
 Q
"RTN","HMPDJ0",13,0)
 ;
"RTN","HMPDJ0",14,0)
PATIENT ; -- Patient Registration
"RTN","HMPDJ0",15,0)
 D DPT1^HMPDJ00
"RTN","HMPDJ0",16,0)
 Q
"RTN","HMPDJ0",17,0)
 ;
"RTN","HMPDJ0",18,0)
PROBLEM ; -- Problem List
"RTN","HMPDJ0",19,0)
 I $G(HMPID) D GMPL1^HMPDJ02(HMPID) Q
"RTN","HMPDJ0",20,0)
 N ID,HMPSTS,HMPPROB,HMPN,X,POVLST
"RTN","HMPDJ0",21,0)
 S HMPSTS=$G(FILTER("status")) ;default = all problems
"RTN","HMPDJ0",22,0)
 D LIST^GMPLUTL2(.HMPPROB,DFN,HMPSTS)
"RTN","HMPDJ0",23,0)
 D DIAGLIST^HMPDJ02(.POVLST,DFN)
"RTN","HMPDJ0",24,0)
 S HMPN=0 F  S HMPN=$O(HMPPROB(HMPN)) Q:(HMPN<1)!(HMPI'<HMPMAX)  D
"RTN","HMPDJ0",25,0)
 . S X=$P(HMPPROB(HMPN),U,6) I X,(X<HMPSTART)!(X>HMPSTOP) Q  ;last updated
"RTN","HMPDJ0",26,0)
 . S ID=+HMPPROB(HMPN) D GMPL1^HMPDJ02(ID,.POVLST)
"RTN","HMPDJ0",27,0)
 Q
"RTN","HMPDJ0",28,0)
 ;
"RTN","HMPDJ0",29,0)
ALLERGY ; -- Allergies/Adverse Reactions
"RTN","HMPDJ0",30,0)
 N GMRAL,ID D EN1^GMRADPT
"RTN","HMPDJ0",31,0)
 ; This IF statement was disabled to prevent getting "deletes" in the
"RTN","HMPDJ0",32,0)
 ; JSON during a fetch if ALL allergies for a given patient have been marked
"RTN","HMPDJ0",33,0)
 ; as "entered in error". US6021
"RTN","HMPDJ0",34,0)
 ;I 'GMRAL Q  ;D NKA^HMPDJ02 Q
"RTN","HMPDJ0",35,0)
 I $G(HMPID) D GMRA1^HMPDJ02(HMPID) Q
"RTN","HMPDJ0",36,0)
 S ID=0 F  S ID=+$O(GMRAL(ID)) Q:ID<1  D GMRA1^HMPDJ02(ID) Q:HMPI'<HMPMAX
"RTN","HMPDJ0",37,0)
 Q
"RTN","HMPDJ0",38,0)
 ;
"RTN","HMPDJ0",39,0)
CONSULT ; -- Consult/Request Tracking
"RTN","HMPDJ0",40,0)
 N HMPN,HMPX,ID
"RTN","HMPDJ0",41,0)
 D OER^GMRCSLM1(DFN,"",HMPSTART,HMPSTOP,"")
"RTN","HMPDJ0",42,0)
 S HMPN=0 F  S HMPN=$O(^TMP("GMRCR",$J,"CS",HMPN)) Q:HMPN<1!(HMPN>HMPMAX)  S HMPX=$G(^(HMPN,0)) Q:$E(HMPX)="<"  D
"RTN","HMPDJ0",43,0)
 . I $G(HMPID),HMPID'=+HMPX Q
"RTN","HMPDJ0",44,0)
 . D GMRC1^HMPDJ03(+HMPX)
"RTN","HMPDJ0",45,0)
 K ^TMP("GMRCR",$J,"CS")
"RTN","HMPDJ0",46,0)
 Q
"RTN","HMPDJ0",47,0)
 ;
"RTN","HMPDJ0",48,0)
VITAL ; -- GMR Vital Measurements
"RTN","HMPDJ0",49,0)
 I $L($G(HMPID)) D GMV1^HMPDJ02(HMPID) Q
"RTN","HMPDJ0",50,0)
 N GMRVSTR,HMPIDT,HMPTYP,ID
"RTN","HMPDJ0",51,0)
 S GMRVSTR="BP;T;R;P;HT;WT;CVP;CG;PO2;PN"
"RTN","HMPDJ0",52,0)
 S GMRVSTR(0)=HMPSTART_U_HMPSTOP_U_HMPMAX_"^1"
"RTN","HMPDJ0",53,0)
 D EN1^GMRVUT0
"RTN","HMPDJ0",54,0)
 S HMPIDT=0 F  S HMPIDT=$O(^UTILITY($J,"GMRVD",HMPIDT)) Q:HMPIDT<1  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",55,0)
 . S HMPTYP="" F  S HMPTYP=$O(^UTILITY($J,"GMRVD",HMPIDT,HMPTYP)) Q:HMPTYP=""  D
"RTN","HMPDJ0",56,0)
 .. S ID=$O(^UTILITY($J,"GMRVD",HMPIDT,HMPTYP,0)) D GMV1^HMPDJ02(ID)
"RTN","HMPDJ0",57,0)
 K ^UTILITY($J,"GMRVD")
"RTN","HMPDJ0",58,0)
 Q
"RTN","HMPDJ0",59,0)
 ;
"RTN","HMPDJ0",60,0)
LAB ; -- Lab Results
"RTN","HMPDJ0",61,0)
 N LRDFN,LRID,HMPSUB,HMPIDT,HMPN,HMPP,HMPACC,BEG,END,SUB,ORPK,ID,X
"RTN","HMPDJ0",62,0)
 S LRDFN=$$LRDFN^HMPXGLAB(DFN),HMPSUB=$G(FILTER("category"))  ;DE2818, (#63) LABORATORY REFERENCE
"RTN","HMPDJ0",63,0)
 S BEG=HMPSTART,END=HMPSTOP,LRID=$G(HMPID),ORPK=""
"RTN","HMPDJ0",64,0)
 I $L(LRID) D  ;reset for LR7OR1
"RTN","HMPDJ0",65,0)
 . I LRID S ORPK=LRID,LRID=$P(LRID,";",4,99) Q:LRID=""  ;order
"RTN","HMPDJ0",66,0)
 . S HMPSUB=$P(LRID,";"),HMPIDT=+$P(LRID,";",2)
"RTN","HMPDJ0",67,0)
 . S:HMPIDT (BEG,END)=9999999-HMPIDT
"RTN","HMPDJ0",68,0)
 S SUB=HMPSUB I $L(SUB),"CH^MI"'[SUB S SUB="AP"
"RTN","HMPDJ0",69,0)
 D RR^LR7OR1(DFN,ORPK,BEG,END,SUB,,,HMPMAX)  ; ICR 2503, DE2818
"RTN","HMPDJ0",70,0)
 S HMPSUB="" F  S HMPSUB=$O(^TMP("LRRR",$J,DFN,HMPSUB)) Q:HMPSUB=""  D
"RTN","HMPDJ0",71,0)
 . S HMPIDT=0 F  S HMPIDT=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT)) Q:HMPIDT<1  I $O(^(HMPIDT,0)) D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",72,0)
 .. I HMPSUB="MI"  S ID=HMPSUB_";"_HMPIDT D MI^HMPDJ06 Q
"RTN","HMPDJ0",73,0)
 .. I HMPSUB'="CH" S ID=HMPSUB_";"_HMPIDT D AP^HMPDJ06 Q
"RTN","HMPDJ0",74,0)
 .. D ACC^HMPDJ06 ;get chem accession data
"RTN","HMPDJ0",75,0)
 .. S HMPP=0 F  S HMPP=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT,HMPP)) Q:HMPP<1  S X=+$G(^(HMPP)) D
"RTN","HMPDJ0",76,0)
 ... S HMPN=$$LRDN^LRPXAPIU(X) I $L(LRID,";")>2,HMPN'=$P(LRID,";",3) Q
"RTN","HMPDJ0",77,0)
 ... S ID=HMPSUB_";"_HMPIDT_";"_HMPN D CH1^HMPDJ06
"RTN","HMPDJ0",78,0)
 K ^TMP("LRRR",$J),^TMP("LRX",$J)
"RTN","HMPDJ0",79,0)
 Q
"RTN","HMPDJ0",80,0)
 ;
"RTN","HMPDJ0",81,0)
PROCEDUR ; -- Clinical Procedures
"RTN","HMPDJ0",82,0)
 N HMPN,HMPX,BEG,END,ID
"RTN","HMPDJ0",83,0)
 S BEG=HMPSTART,END=HMPSTOP
"RTN","HMPDJ0",84,0)
 I $G(HMPID) D  ;reset dates for HMPID only
"RTN","HMPDJ0",85,0)
 . N HMPMC,IEN,FILE,X
"RTN","HMPDJ0",86,0)
 . S IEN=+HMPID,FILE=+$P(HMPID,"(",2)  Q:FILE=702  Q:'FILE
"RTN","HMPDJ0",87,0)
 . D MEDLKUP^MCARUTL3(.HMPMC,FILE,IEN)
"RTN","HMPDJ0",88,0)
 . S X=$P(HMPMC,U,6) S:X (BEG,END)=X
"RTN","HMPDJ0",89,0)
 D MDPS1^HMPDJ03(DFN,BEG,END,HMPMAX)    ;gets ^TMP("MDHSP",$J)
"RTN","HMPDJ0",90,0)
 S HMPN=0 F  S HMPN=$O(^TMP("MDHSP",$J,HMPN)) Q:HMPN<1  S HMPX=$G(^(HMPN)) D
"RTN","HMPDJ0",91,0)
 . I $G(HMPID),+HMPID'=+$P(HMPX,U,2) Q  ;update 1 procedure
"RTN","HMPDJ0",92,0)
 . D MC1^HMPDJ03($G(HMPID))             ;uses HMPX
"RTN","HMPDJ0",93,0)
 K ^TMP("MDHSP",$J)
"RTN","HMPDJ0",94,0)
 Q
"RTN","HMPDJ0",95,0)
 ;
"RTN","HMPDJ0",96,0)
OBS ; -- Clinical Observations (CLiO)
"RTN","HMPDJ0",97,0)
 N HMPCLIO,HMPN,ID,X
"RTN","HMPDJ0",98,0)
 I $L($G(HMPID)) D MDC1^HMPDJ03(HMPID) Q
"RTN","HMPDJ0",99,0)
 D QRYPT^HMPDMDC("HMPCLIO",DFN,HMPSTART,HMPSTOP) ;all [verified] observations
"RTN","HMPDJ0",100,0)
 S HMPN=0 F  S HMPN=$O(HMPCLIO(HMPN)) Q:(HMPN<1)!(HMPI'<HMPMAX)  D
"RTN","HMPDJ0",101,0)
 . S ID=$G(HMPCLIO(HMPN)) ;GUID
"RTN","HMPDJ0",102,0)
 . D MDC1^HMPDJ03(ID)
"RTN","HMPDJ0",103,0)
 Q
"RTN","HMPDJ0",104,0)
 ;
"RTN","HMPDJ0",105,0)
ORDER ; -- Order Entry
"RTN","HMPDJ0",106,0)
 N DAD,HMPN,HMPORDR,ID,ORLIST,X  ; DE2818, added HMPORDR, removed X3,X4
"RTN","HMPDJ0",107,0)
 I $G(HMPID) S ORLIST=$H D OR1^HMPDJ01(HMPID) G ORQ
"RTN","HMPDJ0",108,0)
 ; changed FLG to 1 to get all orders including pending.  JD - 1/20/16 - US11951
"RTN","HMPDJ0",109,0)
 D EN^ORQ1(DFN_";DPT(",,1,,HMPSTART,HMPSTOP,,,,1) ; DBIA 3154
"RTN","HMPDJ0",110,0)
 S HMPN=0 F  S HMPN=$O(^TMP("ORR",$J,ORLIST,HMPN)) Q:HMPN<1  S ID=$G(^(HMPN)),ID=+ID D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",111,0)
 . ;DE2818, begin logic change
"RTN","HMPDJ0",112,0)
 . K HMPORDR D ORDINFO(.HMPORDR,ID)  ; kill it for each iteration
"RTN","HMPDJ0",113,0)
 . ; (#33) PACKAGE REFERENCE
"RTN","HMPDJ0",114,0)
 . ; (# 5) STATUS: 13=CANCELLED, 12=DISCONTINUED/EDIT, 1=DISCONTINUED
"RTN","HMPDJ0",115,0)
 . Q:$G(HMPORDR(100,ID,5,"I"))=13  I $G(HMPORDR(100,ID,33,"I"))["P",($G(HMPORDR(100,ID,5,"I"))=12)!($G(HMPORDR(100,ID,5,"I"))=1) Q
"RTN","HMPDJ0",116,0)
 . ; Get Parent order if we don't already have it
"RTN","HMPDJ0",117,0)
 . ; Also, add the child order to the returned list
"RTN","HMPDJ0",118,0)
 . S DAD=$G(HMPORDR(100,ID,36,"I"))  ;(#36) PARENT 
"RTN","HMPDJ0",119,0)
 . I DAD D:'$D(^TMP("ORGOTIT",$J,DAD)) OR1^HMPDJ01(DAD)
"RTN","HMPDJ0",120,0)
 . ;DE2818, end logic change
"RTN","HMPDJ0",121,0)
 . D OR1^HMPDJ01(ID)
"RTN","HMPDJ0",122,0)
ORQ ; end
"RTN","HMPDJ0",123,0)
 K ^TMP("ORR",$J),^TMP("ORGOTIT",$J)
"RTN","HMPDJ0",124,0)
 Q
"RTN","HMPDJ0",125,0)
 ;
"RTN","HMPDJ0",126,0)
TREATMEN ; -- Nursing Treatments (orders)
"RTN","HMPDJ0",127,0)
 N HMPN,HMPORDR,ID,ORDG,ORLIST,X  ;DE2818, added HMPORDR, removed X3,X4
"RTN","HMPDJ0",128,0)
 I $G(HMPID) S ORLIST=$H D NTX1^HMPDJ01(HMPID) G TXQ
"RTN","HMPDJ0",129,0)
 ;DE2818, ***replacement for ^ORD reference needed below***
"RTN","HMPDJ0",130,0)
 S ORDG=+$O(^ORD(100.98,"B","NTX",0))
"RTN","HMPDJ0",131,0)
 D EN^ORQ1(DFN_";DPT(",ORDG,6,,HMPSTART,HMPSTOP,,,,1)
"RTN","HMPDJ0",132,0)
 S HMPN=0 F  S HMPN=$O(^TMP("ORR",$J,ORLIST,HMPN)) Q:HMPN<1  S ID=$G(^(HMPN)) D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",133,0)
 . Q:$D(^TMP("ORGOTIT",$J,+ID))  Q:$P(ID,";",2)>1  S ID=+ID  ;actions
"RTN","HMPDJ0",134,0)
 . ;DE2818, begin logic change
"RTN","HMPDJ0",135,0)
 . K HMPORDR D ORDINFO(.HMPORDR,ID)  ; kill it for each iteration
"RTN","HMPDJ0",136,0)
 . ;(#33) PACKAGE REFERENCE,(#5) STATUS: 13=CANCELLED, 12=DISCONTINUED/EDIT, 1=DISCONTINUED
"RTN","HMPDJ0",137,0)
 . Q:$G(HMPORDR(100,ID,5,"I"))=13  I $G(HMPORDR(100,ID,33,"I"))["P",($G(HMPORDR(100,ID,5,"I"))=12)!($G(HMPORDR(100,ID,5,"I"))=1) Q
"RTN","HMPDJ0",138,0)
 . ;DE2818, end logic change
"RTN","HMPDJ0",139,0)
 . D NTX1^HMPDJ01(ID)
"RTN","HMPDJ0",140,0)
TXQ ; end
"RTN","HMPDJ0",141,0)
 K ^TMP("ORR",$J),^TMP("ORGOTIT",$J)
"RTN","HMPDJ0",142,0)
 Q
"RTN","HMPDJ0",143,0)
 ;
"RTN","HMPDJ0",144,0)
MED ; -- Pharmacy
"RTN","HMPDJ0",145,0)
 ;DE2818, removed reference to ^OR(100,HMPID) below
"RTN","HMPDJ0",146,0)
 N ORDIALOG I $G(HMPID),$$GET1^DIQ(100,+HMPID_",",.01)]"" D PS1^HMPDJ05(HMPID) Q  ;get 1 order
"RTN","HMPDJ0",147,0)
 N DAD,HMPN,HMPORDR,ID,ORDG,ORLIST,ORVP,TYPE  ;DE2818, added HMPORDR, removed extra ORLIST and X3,X4
"RTN","HMPDJ0",148,0)
 S TYPE=$G(FILTER("vaType")) S:$L(TYPE) TYPE=$S(TYPE="N":"NV",TYPE="V":"IV",1:TYPE)_" "
"RTN","HMPDJ0",149,0)
 ;DE2818, ***replacement for ^ORD reference needed below***
"RTN","HMPDJ0",150,0)
 S ORDG=$O(^ORD(100.98,"B",TYPE_"RX",0)),ORVP=DFN_";DPT(" ;CPC removed + 10/30/15 DE2434
"RTN","HMPDJ0",151,0)
 ;If RX group not found, and not overridden by specific type then try PHARMACY CPC 10/30/15 DE2434
"RTN","HMPDJ0",152,0)
 I ORDG="" S ORDG=0 I TYPE="" S ORDG=+$O(^ORD(100.98,"B","PHARMACY",0)) ;CPC 10/30/15 DE2434
"RTN","HMPDJ0",153,0)
 D EN^ORQ1(ORVP,ORDG,6,,HMPSTART,HMPSTOP)
"RTN","HMPDJ0",154,0)
 K ^TMP("HMPOR",$J) S HMPN=0
"RTN","HMPDJ0",155,0)
 F  S HMPN=$O(^TMP("ORR",$J,ORLIST,HMPN)) Q:HMPN<1  S ID=$G(^(HMPN)),ID=+ID D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",156,0)
 . ;DE2818, begin logic change
"RTN","HMPDJ0",157,0)
 . K HMPORDR D ORDINFO(.HMPORDR,ID)  ; kill it for each iteration
"RTN","HMPDJ0",158,0)
 . ;(#33) PACKAGE REFERENCE,(#5) STATUS: 13=CANCELLED, 12=DISCONTINUED/EDIT, 1=DISCONTINUED
"RTN","HMPDJ0",159,0)
 . Q:$G(HMPORDR(100,ID,5,"I"))=13  I $G(HMPORDR(100,ID,33,"I"))["P",($G(HMPORDR(100,ID,5,"I"))=12)!($G(HMPORDR(100,ID,5,"I"))=1) Q
"RTN","HMPDJ0",160,0)
 . S DAD=$G(HMPORDR(100,ID,36,"I"))  ;(#36) PARENT
"RTN","HMPDJ0",161,0)
 . I DAD D:'$D(^TMP("HMPOR",$J,DAD)) PS1^HMPDJ05(DAD)
"RTN","HMPDJ0",162,0)
 . ;DE2818, end logic change
"RTN","HMPDJ0",163,0)
 . D PS1^HMPDJ05(ID) ;DE5156 ensure parent added as well as children
"RTN","HMPDJ0",164,0)
 K ^TMP("HMPOR",$J),^TMP("ORR",$J),^TMP("ORGOTIT",$J),^TMP($J,"PSOI")
"RTN","HMPDJ0",165,0)
 Q
"RTN","HMPDJ0",166,0)
 ;
"RTN","HMPDJ0",167,0)
PTF ; -- Patient Treatment File
"RTN","HMPDJ0",168,0)
 ;Purpose - Main Patient Treatment File (PTF) RPC
"RTN","HMPDJ0",169,0)
 ;
"RTN","HMPDJ0",170,0)
 ;Called by - PTF RPC
"RTN","HMPDJ0",171,0)
 ;
"RTN","HMPDJ0",172,0)
 ;Assumptions - Expects variables DFN, HMPSTART, HMPSTOP, HMPMAX
"RTN","HMPDJ0",173,0)
 ;
"RTN","HMPDJ0",174,0)
 ;Modification History -
"RTN","HMPDJ0",175,0)
 ;US5630 (TW) - Namespaced variables and enhanced newing
"RTN","HMPDJ0",176,0)
 ;
"RTN","HMPDJ0",177,0)
 N HMPRDT,HMPX,HMPAPI,HMPLID
"RTN","HMPDJ0",178,0)
 K ^TMP("HMPPX",$J)
"RTN","HMPDJ0",179,0)
 ;
"RTN","HMPDJ0",180,0)
 I $G(HMPID),HMPID'=+HMPID D PTFA^HMPDJ04A(HMPID) Q  ; If HMPID and dx type, process and quit
"RTN","HMPDJ0",181,0)
 ;
"RTN","HMPDJ0",182,0)
 I $G(HMPID) D  Q:'$D(^TMP("HMPPX",$J))  ; If HMPID only, set one ^TMP("HMPPX") entry
"RTN","HMPDJ0",183,0)
 . S HMPRDT=9999999
"RTN","HMPDJ0",184,0)
 . D RPC^DGPTFAPI(.HMPAPI,HMPID)
"RTN","HMPDJ0",185,0)
 . S HMPX=$P($G(HMPAPI(1)),U,3)
"RTN","HMPDJ0",186,0)
 . I $L(HMPX) S ^TMP("HMPPX",$J,HMPRDT,HMPID_";70;DXLS")=HMPX_U
"RTN","HMPDJ0",187,0)
 . F HMPAPI=1:1:9 S HMPX=$P($G(HMPY(2)),U,HMPAPI) I $L(HMPX) S ^TMP("HMPPX",$J,HMPRDT,HMPID_";70;D SD"_HMPAPI)=HMPX_U_$G(DISDAT)
"RTN","HMPDJ0",188,0)
 ;
"RTN","HMPDJ0",189,0)
 I '$G(HMPID) D PTF^HMPDJ09  ; If no HMPID, set up ^TMP("HMPPX") for all dx
"RTN","HMPDJ0",190,0)
 ;
"RTN","HMPDJ0",191,0)
 ;Loop through ^TMP("HMPPX",$J) and do PTF1^HMPDJ04A to set PTF array, ^TMP
"RTN","HMPDJ0",192,0)
 S HMPRDT="" F  S HMPRDT=$O(^TMP("HMPPX",$J,HMPRDT)) Q:HMPRDT=""  D
"RTN","HMPDJ0",193,0)
 . S HMPLID="" F  S HMPLID=$O(^TMP("HMPPX",$J,HMPRDT,HMPLID)) Q:HMPLID=""!(HMPI'<HMPMAX)  D
"RTN","HMPDJ0",194,0)
 .. D PTF1^HMPDJ04A
"RTN","HMPDJ0",195,0)
 K ^TMP("HMPPX",$J)
"RTN","HMPDJ0",196,0)
 Q
"RTN","HMPDJ0",197,0)
 ;
"RTN","HMPDJ0",198,0)
FACTOR   D PX^HMPDJ09(9000010.23) Q   ; -- PCE Health Factors
"RTN","HMPDJ0",199,0)
IMMUNIZA D PX^HMPDJ09(9000010.11) Q   ; -- PCE Immunizations
"RTN","HMPDJ0",200,0)
EXAM     D PX^HMPDJ09(9000010.13) Q   ; -- PCE Exams
"RTN","HMPDJ0",201,0)
CPT      D PX^HMPDJ09(9000010.18) Q   ; -- PCE CPT
"RTN","HMPDJ0",202,0)
EDUCATIO D PX^HMPDJ09(9000010.16) Q   ; -- PCE Patient Education
"RTN","HMPDJ0",203,0)
POV      D PX^HMPDJ09(9000010.07) Q   ; -- PCE Purpose of Visit (POV)
"RTN","HMPDJ0",204,0)
SKIN     D PX^HMPDJ09(9000010.12) Q   ; -- PCE Skin Tests
"RTN","HMPDJ0",205,0)
 ;
"RTN","HMPDJ0",206,0)
IMAGE ; -- Radiology/Nuclear Medicine
"RTN","HMPDJ0",207,0)
 D EN1^RAO7PC1(DFN,HMPSTART,HMPSTOP,HMPMAX_"P")
"RTN","HMPDJ0",208,0)
 I $G(HMPID) D RA1^HMPDJ07(HMPID) G IMQ
"RTN","HMPDJ0",209,0)
 N ID S ID=""
"RTN","HMPDJ0",210,0)
 F  S ID=$O(^TMP($J,"RAE1",DFN,ID)) Q:ID=""  D RA1^HMPDJ07(ID)  Q:HMPI'<+HMPMAX
"RTN","HMPDJ0",211,0)
IMQ ; end
"RTN","HMPDJ0",212,0)
 K ^TMP($J,"RAE1")
"RTN","HMPDJ0",213,0)
 Q
"RTN","HMPDJ0",214,0)
 ;
"RTN","HMPDJ0",215,0)
APPOINTM ; -- Scheduling/Appointment Mgt
"RTN","HMPDJ0",216,0)
 N HMPX,HMPNUM,HMPDT,X,HMPA,ID
"RTN","HMPDJ0",217,0)
 S HMPX(1)=HMPSTART_";"_HMPSTOP,HMPX(4)=DFN,ID=$G(HMPID)
"RTN","HMPDJ0",218,0)
 S HMPX("FLDS")="1;2;3;6;9;10;11;13;22",HMPX("SORT")="P"  ;DE4469 - PB - Apr 26, 2016 added field 22 to the list of fields to be pulled.
"RTN","HMPDJ0",219,0)
 I $L(ID) G:$E(ID)="H" DGS^HMPDJ04 D  Q
"RTN","HMPDJ0",220,0)
 . S HMPDT=$P(ID,";",2),HMPX(1)=$P(ID,";",2)_";"_$P(ID,";",2)
"RTN","HMPDJ0",221,0)
 . S HMPX(2)=$P(ID,";",3)
"RTN","HMPDJ0",222,0)
 . S HMPNUM=$$SDAPI^SDAMA301(.HMPX)
"RTN","HMPDJ0",223,0)
 . D:HMPNUM>0 SDAM1^HMPDJ04
"RTN","HMPDJ0",224,0)
 . K ^TMP($J,"SDAMA301",DFN)
"RTN","HMPDJ0",225,0)
 ; appointments
"RTN","HMPDJ0",226,0)
 S HMPX(3)="R;I;NS;NSR;NT" ;no cancelled appt's
"RTN","HMPDJ0",227,0)
 S HMPNUM=$$SDAPI^SDAMA301(.HMPX),HMPDT=0
"RTN","HMPDJ0",228,0)
 F  S HMPDT=$O(^TMP($J,"SDAMA301",DFN,HMPDT)) Q:HMPDT<1  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",229,0)
 . S X=$P($G(^TMP($J,"SDAMA301",DFN,HMPDT)),U,3)
"RTN","HMPDJ0",230,0)
 . ;I HMPDT<DT,$P(X,";")'["NS" Q   ;no prior kept appt's
"RTN","HMPDJ0",231,0)
 . D SDAM1^HMPDJ04
"RTN","HMPDJ0",232,0)
 K ^TMP($J,"SDAMA301",DFN)
"RTN","HMPDJ0",233,0)
 Q
"RTN","HMPDJ0",234,0)
 ;
"RTN","HMPDJ0",235,0)
SURGERY ; -- Surgery
"RTN","HMPDJ0",236,0)
 I $G(HMPID) D SR1^HMPDJ07(HMPID) Q
"RTN","HMPDJ0",237,0)
 Q:'$L($T(LIST^SROESTV))
"RTN","HMPDJ0",238,0)
 N SHOWADD S SHOWADD=1 ;to omit leading '+' with note titles
"RTN","HMPDJ0",239,0)
 N HMPN,HMPY,ID D LIST^SROESTV(.HMPY,DFN,HMPSTART,HMPSTOP,HMPMAX,1)
"RTN","HMPDJ0",240,0)
 S HMPN=0 F  S HMPN=$O(@HMPY@(HMPN)) Q:HMPN<1  D
"RTN","HMPDJ0",241,0)
 . S ID=+$G(@HMPY@(HMPN)) D:ID SR1^HMPDJ07(ID)
"RTN","HMPDJ0",242,0)
 K @HMPY
"RTN","HMPDJ0",243,0)
 Q
"RTN","HMPDJ0",244,0)
 ;
"RTN","HMPDJ0",245,0)
DOCUMENT ; -- Text Integration Utilities
"RTN","HMPDJ0",246,0)
 N HMPC,CLS,HMPS,CTXT,HMPY,HMPN,HMPX,ID
"RTN","HMPDJ0",247,0)
 I $L($G(HMPID)) D TIU1^HMPDJ08(HMPID) Q
"RTN","HMPDJ0",248,0)
 N CLASS,SUBCLASS,STATUS
"RTN","HMPDJ0",249,0)
 D SETUP^HMPDJ08 ;define search criteria
"RTN","HMPDJ0",250,0)
 F HMPC=1:1:$L(CLASS,U) S CLS=$P(CLASS,U,HMPC) D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",251,0)
 . I CLS="CP" D CP^HMPDJ08A(DFN,HMPSTART,HMPSTOP,HMPMAX) Q
"RTN","HMPDJ0",252,0)
 . I CLS="RA" D RA^HMPDJ08A(DFN,HMPSTART,HMPSTOP,HMPMAX) Q
"RTN","HMPDJ0",253,0)
 . I CLS="LR" D LR^HMPDJ08A(DFN,HMPSTART,HMPSTOP,HMPMAX) Q
"RTN","HMPDJ0",254,0)
 . ; TIU document classes, by sig status
"RTN","HMPDJ0",255,0)
 . F HMPS=1:1:$L(STATUS,U) S CTXT=$P(STATUS,U,HMPS) D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",256,0)
 .. ;I $L($G(HMPBATCH)) D GET^TIUHMP(.HMPY,DFN,CLS,HMPSTART,HMPSTOP) I 1 ; <<<< 12.3
"RTN","HMPDJ0",257,0)
 .. I $L($G(HMPBATCH)) D GET^TIUVPR(.HMPY,DFN,CLS,HMPSTART,HMPSTOP) I 1 ;  <<<< 12.3
"RTN","HMPDJ0",258,0)
 .. E  D CONTEXT^TIUSRVLO(.HMPY,CLS,CTXT,DFN,HMPSTART,HMPSTOP,,HMPMAX,,1)
"RTN","HMPDJ0",259,0)
 .. S HMPN=0 F  S HMPN=$O(@HMPY@(HMPN)) Q:HMPN<1  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",260,0)
 ... S HMPX=$G(@HMPY@(HMPN)) ;Q:'$$MATCH^HMPDJ08(HMPX,CTXT)
"RTN","HMPDJ0",261,0)
 ... Q:$D(^TMP("HMPD",$J,+HMPX))  ;already included
"RTN","HMPDJ0",262,0)
 ... D EN1^HMPDJ08(HMPX,CLS)
"RTN","HMPDJ0",263,0)
 .. K @HMPY
"RTN","HMPDJ0",264,0)
 Q
"RTN","HMPDJ0",265,0)
 ;
"RTN","HMPDJ0",266,0)
DISCHARG ; -- Discharge notifications US18852
"RTN","HMPDJ0",267,0)
 I $L($G(HMPID)) D DISCHARG^HMPDJ04A(HMPID)
"RTN","HMPDJ0",268,0)
 Q
"RTN","HMPDJ0",269,0)
VISIT ; -- Visits
"RTN","HMPDJ0",270,0)
 I $L($G(HMPID)) D VSIT1^HMPDJ04(HMPID) Q
"RTN","HMPDJ0",271,0)
 N BEG,END,HMPADMIT,HMPDEMOG,HMPIDT,ID  ;DE2818, added HMPDEMOG
"RTN","HMPDJ0",272,0)
 D TOP^HMPXGDPT("HMPDEMOG",DFN,.105,"I")  ;DE2818, (.105) CURRENT ADMISSION
"RTN","HMPDJ0",273,0)
 S HMPADMIT=+$G(HMPDEMOG(2,DFN,.105,"I")) ;DE2818
"RTN","HMPDJ0",274,0)
 S BEG=HMPSTART,END=HMPSTOP D IDT^HMPDVSIT ;invert dates
"RTN","HMPDJ0",275,0)
 ;DE2818 ***ICR 2028 needed for ^AUPNVSIT references below***
"RTN","HMPDJ0",276,0)
 S HMPIDT=BEG F  S HMPIDT=$O(^AUPNVSIT("AA",DFN,HMPIDT)) Q:HMPIDT<1!(HMPIDT>END)  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",277,0)
 . S ID=0 F  S ID=$O(^AUPNVSIT("AA",DFN,HMPIDT,ID)) Q:ID<1  D VSIT1^HMPDJ04(ID)
"RTN","HMPDJ0",278,0)
 ; kill HMPADMIT in VSIT1 if adm is included, but add unless filtered
"RTN","HMPDJ0",279,0)
 I $G(HMPADMIT),HMPMAX'<9999,HMPSTART'>1410102 D VSIT1^HMPDJ04("H"_HMPADMIT)
"RTN","HMPDJ0",280,0)
 Q
"RTN","HMPDJ0",281,0)
 ;I HMPSTOP,HMPSTOP'["." S END=HMPSTOP_".24" ;assume end of day
"RTN","HMPDJ0",282,0)
 ;S HMPDT=END F  S HMPDT=$O(^AUPNVSIT("AET",DFN,HMPDT),-1)  Q:HMPDT<HMPSTART  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",283,0)
 ;. S HMPLOC=0 F  S HMPLOC=$O(^AUPNVSIT("AET",DFN,HMPDT,HMPLOC)) Q:HMPLOC<1  D
"RTN","HMPDJ0",284,0)
 ;.. S ID=0 F  S ID=$O(^AUPNVSIT("AET",DFN,HMPDT,HMPLOC,"P",ID)) Q:ID<1  D VSIT1^HMPDJ04(ID)
"RTN","HMPDJ0",285,0)
 ;
"RTN","HMPDJ0",286,0)
HMP ; -- HMP Patient Objects
"RTN","HMPDJ0",287,0)
 D HMP^HMPDJ02($G(TYPE))
"RTN","HMPDJ0",288,0)
 Q
"RTN","HMPDJ0",289,0)
 ;
"RTN","HMPDJ0",290,0)
MH ; -- Mental Health
"RTN","HMPDJ0",291,0)
 I $L($T(MH^HMPDJ09M)) D MH^HMPDJ09M
"RTN","HMPDJ0",292,0)
 Q
"RTN","HMPDJ0",293,0)
 ;
"RTN","HMPDJ0",294,0)
ERRQ ; -- Quit for error handling
"RTN","HMPDJ0",295,0)
 Q
"RTN","HMPDJ0",296,0)
 ;
"RTN","HMPDJ0",297,0)
 ;new subroutine for DE2818
"RTN","HMPDJ0",298,0)
ORDINFO(ORRSLT,ORIEN) ; ORDER file (#100), ORRSLT passed by reference
"RTN","HMPDJ0",299,0)
 ; all data returned in internal format
"RTN","HMPDJ0",300,0)
 ;
"RTN","HMPDJ0",301,0)
 ;   fields on ^OR(100,D0,0)
"RTN","HMPDJ0",302,0)
 ;(#.01) ORDER #
"RTN","HMPDJ0",303,0)
 ;(#.02) OBJECT OF ORDER
"RTN","HMPDJ0",304,0)
 ;
"RTN","HMPDJ0",305,0)
 ;   fields on ^OR(100,D0,3)
"RTN","HMPDJ0",306,0)
 ;(#5) STATUS
"RTN","HMPDJ0",307,0)
 ;(#7) ITEM ORDERED
"RTN","HMPDJ0",308,0)
 ;(#8) VEILED
"RTN","HMPDJ0",309,0)
 ;(#8.1) TYPE
"RTN","HMPDJ0",310,0)
 ;(#9) REPLACED ORDER
"RTN","HMPDJ0",311,0)
 ;(#9.1) REPLACEMENT ORDER
"RTN","HMPDJ0",312,0)
 ;(#30) CURRENT ACTION
"RTN","HMPDJ0",313,0)
 ;(#31) DATE OF LAST ACTIVITY
"RTN","HMPDJ0",314,0)
 ;(#32) GRACE DAYS BEFORE PURGE
"RTN","HMPDJ0",315,0)
 ;(#36) PARENT
"RTN","HMPDJ0",316,0)
 ;(#35) ALERT ON RESULTS
"RTN","HMPDJ0",317,0)
 ;
"RTN","HMPDJ0",318,0)
 ;   field on ^OR(100,D0,4)
"RTN","HMPDJ0",319,0)
 ;(#33) PACKAGE REFERENCE
"RTN","HMPDJ0",320,0)
 ;
"RTN","HMPDJ0",321,0)
 Q:'($G(ORIEN)>0)  ; IEN required
"RTN","HMPDJ0",322,0)
 D TOP^HMPXGORD("ORRSLT",ORIEN,".01;.02;5;7;8;8.1;9;9.1;30;31;32;33;35;36","I")
"RTN","HMPDJ0",323,0)
 ;
"RTN","HMPDJ0",324,0)
 Q
"RTN","HMPDJ0",325,0)
 ;end DE2818
"RTN","HMPDJ0",326,0)
 ;
"RTN","HMPDJ02")
0^31^B152352466
"RTN","HMPDJ02",1,0)
HMPDJ02 ;ASMR/MKB/JD,CK,CPC,PB,BL - Problems,Allergies,Vitals ;Aug 23, 2016 09:56:26
"RTN","HMPDJ02",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3,4**;Sep 02, 2016;Build 13
"RTN","HMPDJ02",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ02",4,0)
 ;
"RTN","HMPDJ02",5,0)
 ; External References          DBIA#
"RTN","HMPDJ02",6,0)
 ; -------------------          -----
"RTN","HMPDJ02",7,0)
 ; ^PXRMINDX                     4290
"RTN","HMPDJ02",8,0)
 ; ^SC                          10040
"RTN","HMPDJ02",9,0)
 ; ^AUPNPROB                     2727 (where items not available from GMPLUTL2)
"RTN","HMPDJ02",10,0)
 ; DIC                           2051
"RTN","HMPDJ02",11,0)
 ; DIQ                           2056
"RTN","HMPDJ02",12,0)
 ; GMPLUTL2                      2741
"RTN","HMPDJ02",13,0)
 ; GMRADPT                      10099
"RTN","HMPDJ02",14,0)
 ; GMRAOR2                       2422
"RTN","HMPDJ02",15,0)
 ; GMRVUT0,^UTILITY($J           1446
"RTN","HMPDJ02",16,0)
 ; GMVGETQL                      5048
"RTN","HMPDJ02",17,0)
 ; GMVGETVT                      5047
"RTN","HMPDJ02",18,0)
 ; GMVUTL                        5046
"RTN","HMPDJ02",19,0)
 ; ICDEX                         5747
"RTN","HMPDJ02",20,0)
 ; XLFSTR                       10104
"RTN","HMPDJ02",21,0)
 ; XUAF4                         2171
"RTN","HMPDJ02",22,0)
 ; ^AUPNVSIT(                    2028
"RTN","HMPDJ02",23,0)
 ; ^TIU(8925,DA,0                6154
"RTN","HMPDJ02",24,0)
 ;
"RTN","HMPDJ02",25,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ02",26,0)
 ;
"RTN","HMPDJ02",27,0)
 Q
"RTN","HMPDJ02",28,0)
 ;
"RTN","HMPDJ02",29,0)
GMPL1(ID,POVLST) ; -- problem
"RTN","HMPDJ02",30,0)
 N HMPL,PROB,X,I,DATE,USER,FAC,LEXS
"RTN","HMPDJ02",31,0)
 D DETAIL^GMPLUTL2(ID,.HMPL) Q:'$D(HMPL)  ;doesn't exist
"RTN","HMPDJ02",32,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ02",33,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ02",34,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the problem domain"
"RTN","HMPDJ02",35,0)
 ;
"RTN","HMPDJ02",36,0)
 S PROB("uid")=$$SETUID^HMPUTILS("problem",DFN,ID),PROB("localId")=ID
"RTN","HMPDJ02",37,0)
 S PROB("problemText")=$G(HMPL("NARRATIVE"))
"RTN","HMPDJ02",38,0)
 S DATE=$P($G(HMPL("ENTERED")),U)
"RTN","HMPDJ02",39,0)
 S:$L(DATE) DATE=$$DATE^HMPDGMPL(DATE),PROB("entered")=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ02",40,0)
 S X=$G(HMPL("DIAGNOSIS")) I $L(X) D
"RTN","HMPDJ02",41,0)
 . N ICD9ZN,DIAG,SCTCODE
"RTN","HMPDJ02",42,0)
 . I DATE'>0 S DATE=DT
"RTN","HMPDJ02",43,0)
 . S ICD9ZN=$$ICDDX^ICDEX(X,DATE),DIAG=$S($P($G(ICD9ZN),U,4)'="":$P(ICD9ZN,U,4),1:X) ;Sep 1, 2016 - PB - DE5033
"RTN","HMPDJ02",44,0)
 . ; BEGIN MOD ASF 09/8/15 US 9239 DE 2082
"RTN","HMPDJ02",45,0)
 . ; Only set icdCode and icdName if it is ICD9 (ICD10 is only available in codes array)
"RTN","HMPDJ02",46,0)
 . I HMPL("CSYS")="ICD" S PROB("icdCode")=$$SETNCS^HMPUTILS("icd",HMPL("DIAGNOSIS")),PROB("icdName")=DIAG
"RTN","HMPDJ02",47,0)
 . ; Create codes array for both ICD9 or ICD10
"RTN","HMPDJ02",48,0)
 . S PROB("codes",1,"code")=HMPL("DIAGNOSIS")
"RTN","HMPDJ02",49,0)
 . S PROB("codes",1,"display")=$S(HMPL("CSYS")="ICD":DIAG,HMPL("CSYS")="10D":HMPL("ICDD"),1:DIAG)  ;DE8166
"RTN","HMPDJ02",50,0)
 . S PROB("codes",1,"system")=$S(HMPL("CSYS")="ICD":"urn:oid:2.16.840.1.113883.6.42",HMPL("CSYS")="10D":"urn:oid:2.16.840.1.113883.6.3",1:"codesystem error")
"RTN","HMPDJ02",51,0)
 . ;SNOMED CT codes
"RTN","HMPDJ02",52,0)
 . S SCTCODE=HMPL("SCTC") ;DE4685 ;9000011,80001 SNOMED CT CONCEPT CODE
"RTN","HMPDJ02",53,0)
 . D:SCTCODE EN^LEXCODE(SCTCODE) ; ICR 1614
"RTN","HMPDJ02",54,0)
 . I $D(LEXS("SCT",1)) D
"RTN","HMPDJ02",55,0)
 . . S PROB("codes",2,"code")=SCTCODE
"RTN","HMPDJ02",56,0)
 . . S PROB("codes",2,"code","\s")="" ; Ensure code is sent as a string
"RTN","HMPDJ02",57,0)
 . . S PROB("codes",2,"display")=$P(LEXS("SCT",1),U,2)
"RTN","HMPDJ02",58,0)
 . . S PROB("codes",2,"system")="http://snomed.info/sct"
"RTN","HMPDJ02",59,0)
 . ; END MOD ASF US 9239 DE 2082
"RTN","HMPDJ02",60,0)
 ;Get the internal date from ^AUPNPROB so the imprecise date can be converted properly
"RTN","HMPDJ02",61,0)
 ;JD - 2/1/16 - DE3548
"RTN","HMPDJ02",62,0)
 S X=$$GET1^DIQ(9000011,ID_",",.01,"I") S:$L(X) PROB("lexiconCode")=X  ; DE4680 May 11, 2016 - added lexiconCode to JDS
"RTN","HMPDJ02",63,0)
 S X=$$GET1^DIQ(9000011,ID_",",.13,"I") S:$L(X) PROB("onset")=$$JSONDT^HMPUTILS(X) ;retrieve internal value for proper date format
"RTN","HMPDJ02",64,0)
 S X=$G(HMPL("MODIFIED")) S:$L(X) X=$$DATE^HMPDGMPL(X),PROB("updated")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ02",65,0)
 S X=$G(HMPL("STATUS")) I $L(X) D
"RTN","HMPDJ02",66,0)
 . S PROB("statusName")=X,X=$E(X)
"RTN","HMPDJ02",67,0)
 . S X=$S(X="A":55561003,X="I":73425007,1:"")
"RTN","HMPDJ02",68,0)
 . S PROB("statusCode")=$$SETNCS^HMPUTILS("sct",X)
"RTN","HMPDJ02",69,0)
 ;S X=$G(HMPL("PRIORITY")) I X]"" D
"RTN","HMPDJ02",70,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.14,"I") I X]"" D  ;DE3988 take directly from the file regardless of status
"RTN","HMPDJ02",71,0)
 . S X=$S(X="C":"chronic",X="A":"acute",1:"")
"RTN","HMPDJ02",72,0)
 . I X'="" S PROB("acuityName")=X,PROB("acuityCode")=$$SETVURN^HMPUTILS("prob-acuity",$E(X))
"RTN","HMPDJ02",73,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.07,"I") S:X PROB("resolved")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ02",74,0)
 S X=$P(HMPL("ENTERED"),U,2) S:$L(X) PROB("enteredBy")=X  ; DE5096 June 24, 2016 - add addt'l problem fields to JDS
"RTN","HMPDJ02",75,0)
 S X=$P(HMPL("RECORDED"),U,2) S:$L(X) PROB("recordedBy")=X  ; DE5096 June 24, 2016
"RTN","HMPDJ02",76,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.09,"I") S:$L(X) PROB("recordedOn")=$$JSONDT^HMPUTILS(X)  ; DE5096 July 1, 2016 
"RTN","HMPDJ02",77,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.02,"I")
"RTN","HMPDJ02",78,0)
 S:X="P" PROB("unverified")="false",PROB("removed")="false"
"RTN","HMPDJ02",79,0)
 S:X="T" PROB("unverified")="true",PROB("removed")="false"
"RTN","HMPDJ02",80,0)
 S:X="H" PROB("unverified")="false",PROB("removed")="true"
"RTN","HMPDJ02",81,0)
 S X=$G(HMPL("SC")),X=$S(X="YES":"true",X="NO":"false",1:"")  ; DE3918, Mar 2, 2016
"RTN","HMPDJ02",82,0)
 S:$L(X) PROB("serviceConnected")=X
"RTN","HMPDJ02",83,0)
 S X=$G(HMPL("PROVIDER")) I $L(X) D
"RTN","HMPDJ02",84,0)
 . S PROB("providerName")=X,X=$$GET1^DIQ(9000011,ID_",",1.05,"I")
"RTN","HMPDJ02",85,0)
 . S PROB("providerUid")=$$SETUID^HMPUTILS("user",,+X)
"RTN","HMPDJ02",86,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.06) S:$L(X) PROB("service")=X
"RTN","HMPDJ02",87,0)
 S X=$G(HMPL("CLINIC")) I $L(X) D
"RTN","HMPDJ02",88,0)
 . S PROB("locationName")=X
"RTN","HMPDJ02",89,0)
 . N LOC S LOC=+$$FIND1^DIC(44,,"QX",X)
"RTN","HMPDJ02",90,0)
 . S:LOC PROB("locationUid")=$$SETUID^HMPUTILS("location",,LOC)
"RTN","HMPDJ02",91,0)
 S X=+$$GET1^DIQ(9000011,ID_",",.06,"I")
"RTN","HMPDJ02",92,0)
 S:X FAC=$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U)
"RTN","HMPDJ02",93,0)
 I 'X S FAC=$$FAC^HMPD ;local stn#^name
"RTN","HMPDJ02",94,0)
 D FACILITY^HMPUTILS(FAC,"PROB")
"RTN","HMPDJ02",95,0)
 S I=0 F  S I=$O(HMPL("COMMENT",I)) Q:I<1  D
"RTN","HMPDJ02",96,0)
 . S X=$G(HMPL("COMMENT",I))
"RTN","HMPDJ02",97,0)
 . S USER=$$VA200^HMPDGMPL($P(X,U,2)),DATE=$$DATE^HMPDGMPL($P(X,U))
"RTN","HMPDJ02",98,0)
 . S PROB("comments",I,"noteCounter")=I  ; Feb 24, 2016 - US12724
"RTN","HMPDJ02",99,0)
 . S PROB("comments",I,"enteredByCode")=$$SETUID^HMPUTILS("user",,+USER)
"RTN","HMPDJ02",100,0)
 . S PROB("comments",I,"enteredByName")=$P(X,U,2)
"RTN","HMPDJ02",101,0)
 . S PROB("comments",I,"entered")=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ02",102,0)
 . S PROB("comments",I,"comment")=$P(X,U,3)
"RTN","HMPDJ02",103,0)
 I $D(POVLST) D GMPLVST(ID,"PROB",.POVLST)  ;JL;add encounter information.
"RTN","HMPDJ02",104,0)
 ;== Treatment attributes - Added on 1/4/16 - JD - US12358
"RTN","HMPDJ02",105,0)
 ;Modified 1/8/16 - JD - US12358
"RTN","HMPDJ02",106,0)
 ;Guarding against direct sets into ^AUPNPROB in RPC: "ORQQPL ADD SAVE" by checking for "Y" and "N".
"RTN","HMPDJ02",107,0)
 S X=$$UP^XLFSTR($$GET1^DIQ(9000011,ID_",",1.11,"I"))
"RTN","HMPDJ02",108,0)
 S:$L(X) PROB("agentOrangeExposure")=$S(X=1:"YES",$E(X)="Y":"YES",X=0:"NO",$E(X)="N":"NO",1:X)
"RTN","HMPDJ02",109,0)
 S X=$$UP^XLFSTR($$GET1^DIQ(9000011,ID_",",1.12,"I"))
"RTN","HMPDJ02",110,0)
 S:$L(X) PROB("radiationExposure")=$S(X=1:"YES",$E(X)="Y":"YES",X=0:"NO",$E(X)="N":"NO",1:X)
"RTN","HMPDJ02",111,0)
 S X=$$UP^XLFSTR($$GET1^DIQ(9000011,ID_",",1.13,"I"))
"RTN","HMPDJ02",112,0)
 S:$L(X) PROB("persianGulfExposure")=$S(X=1:"YES",$E(X)="Y":"YES",X=0:"NO",$E(X)="N":"NO",1:X)
"RTN","HMPDJ02",113,0)
 S X=$$UP^XLFSTR($$GET1^DIQ(9000011,ID_",",1.15,"I"))
"RTN","HMPDJ02",114,0)
 S:$L(X) PROB("headNeckCancer")=$S(X=1:"YES",$E(X)="Y":"YES",X=0:"NO",$E(X)="N":"NO",1:X)
"RTN","HMPDJ02",115,0)
 S X=$$UP^XLFSTR($$GET1^DIQ(9000011,ID_",",1.16,"I"))
"RTN","HMPDJ02",116,0)
 S:$L(X) PROB("militarySexualTrauma")=$S(X=1:"YES",$E(X)="Y":"YES",X=0:"NO",$E(X)="N":"NO",1:X)
"RTN","HMPDJ02",117,0)
 S X=$$UP^XLFSTR($$GET1^DIQ(9000011,ID_",",1.17,"I"))
"RTN","HMPDJ02",118,0)
 S:$L(X) PROB("combatVeteran")=$S(X=1:"YES",$E(X)="Y":"YES",X=0:"NO",$E(X)="N":"NO",1:X)
"RTN","HMPDJ02",119,0)
 S X=$$UP^XLFSTR($$GET1^DIQ(9000011,ID_",",1.18,"I"))
"RTN","HMPDJ02",120,0)
 S:$L(X) PROB("shipboardHazard")=$S(X=1:"YES",$E(X)="Y":"YES",X=0:"NO",$E(X)="N":"NO",1:X)
"RTN","HMPDJ02",121,0)
 ;==
"RTN","HMPDJ02",122,0)
 S PROB("lastUpdateTime")=$$EN^HMPSTMP("problem")
"RTN","HMPDJ02",123,0)
 S PROB("stampTime")=PROB("lastUpdateTime") ; RHL 20141231
"RTN","HMPDJ02",124,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ02",125,0)
 I $G(HMPMETA) D ADD^HMPMETA("problem",PROB("uid"),PROB("stampTime")) Q:HMPMETA=1  ;US11019/US6734
"RTN","HMPDJ02",126,0)
 D ADD^HMPDJ("PROB","problem")
"RTN","HMPDJ02",127,0)
 Q
"RTN","HMPDJ02",128,0)
 ;
"RTN","HMPDJ02",129,0)
GMPLVST(ID,Y,POVLST)  ; --- JL;associate problem with visit and notes
"RTN","HMPDJ02",130,0)
 Q:'$G(ID)!'$G(^AUPNPROB(ID,0))!'$D(POVLST)  ;invalid id or no data
"RTN","HMPDJ02",131,0)
 N ICDCODE
"RTN","HMPDJ02",132,0)
 S ICDCODE=$$CODEC^ICDEX(80,$$GET1^DIQ(9000011,ID_",",.01,"I")) Q:ICDCODE=-1  ;invalid icdcode Sep 1, 2016 - PB - DE5033
"RTN","HMPDJ02",133,0)
 Q:$D(POVLST(ICDCODE))=0
"RTN","HMPDJ02",134,0)
 N IDX,VCNT,NCNT,DIEN,VIEN,FAC,STCODE
"RTN","HMPDJ02",135,0)
 S IDX="",VCNT=0,NCNT=0 F  S IDX=$O(POVLST(ICDCODE,IDX)) Q:IDX=""  D
"RTN","HMPDJ02",136,0)
 . S VCNT=VCNT+1
"RTN","HMPDJ02",137,0)
 . S VIEN=+$G(POVLST(ICDCODE,IDX)),FAC=$$FAC^HMPDJ04(VIEN),STCODE=$$STCODE^HMPDJ04(VIEN)
"RTN","HMPDJ02",138,0)
 . I FAC D FACILITY^HMPUTILS(FAC,Y_"(""encounters"","_VCNT_")")  ; facility info
"RTN","HMPDJ02",139,0)
 . I STCODE D STOPCODE^HMPDJ04(STCODE,Y_"(""encounters"","_VCNT_")") ; stop code
"RTN","HMPDJ02",140,0)
 . S @Y@("encounters",VCNT,"dateTime")=$$JSONDT^HMPUTILS($$DATE^HMPDGMPL(+IDX))
"RTN","HMPDJ02",141,0)
 . S @Y@("encounters",VCNT,"visitUid")=$$SETUID^HMPUTILS("visit",DFN,VIEN)
"RTN","HMPDJ02",142,0)
 . N ENINFO S ENINFO=$G(POVLST(ICDCODE,IDX))
"RTN","HMPDJ02",143,0)
 . S DIEN=+$P(ENINFO,U,2)
"RTN","HMPDJ02",144,0)
 . ;W "DIEN is "_DIEN,!
"RTN","HMPDJ02",145,0)
 . I DIEN D
"RTN","HMPDJ02",146,0)
 . . S NCNT=NCNT+1
"RTN","HMPDJ02",147,0)
 . . ; extract the extra data from the document
"RTN","HMPDJ02",148,0)
 . . N DOCINFO S DOCINFO=$E(ENINFO,$F($G(ENINFO),U),$L(ENINFO))
"RTN","HMPDJ02",149,0)
 . . N OUTPUT S OUTPUT="" D EN1^HMPDJ08(DOCINFO,3,.OUTPUT)
"RTN","HMPDJ02",150,0)
 . . N NAME F NAME="documentTypeName","entered","summary","facilityName","authorDisplayName" D
"RTN","HMPDJ02",151,0)
 . . . S:$D(OUTPUT(NAME)) @Y@("documents",NCNT,NAME)=$G(OUTPUT(NAME))
"RTN","HMPDJ02",152,0)
 . . S @Y@("documents",NCNT,"documentUid")=$$SETUID^HMPUTILS("document",DFN,DIEN)
"RTN","HMPDJ02",153,0)
 Q
"RTN","HMPDJ02",154,0)
 ;
"RTN","HMPDJ02",155,0)
GMPLPOV(DFNN,POVLST,DONTKILL) ; -- JL;All problem of visit related to the patient from V POV file
"RTN","HMPDJ02",156,0)
 ;INPUT: Patient's DFN
"RTN","HMPDJ02",157,0)
 ;OUTPUT: Patient's VISIT list in the format of
"RTN","HMPDJ02",158,0)
 ;        OUTPUT(DIAGNOSIS,DATATIME)="VISITIEN"
"RTN","HMPDJ02",159,0)
 ;
"RTN","HMPDJ02",160,0)
 Q:'$G(DFNN)
"RTN","HMPDJ02",161,0)
 N INVVST
"RTN","HMPDJ02",162,0)
 K:'DONTKILL POVLST ; clear the output
"RTN","HMPDJ02",163,0)
 ; Query V POV(^AUPNVPOV() by using "AA" Cross Reference.
"RTN","HMPDJ02",164,0)
 S INVVST="",CURVST="" F  S INVVST=$O(^AUPNVPOV("AA",DFNN,INVVST)) Q:INVVST=""  D
"RTN","HMPDJ02",165,0)
 . N CURVST,DIEN
"RTN","HMPDJ02",166,0)
 . S CURVST=INVVST,DIEN="" F  S DIEN=$O(^AUPNVPOV("AA",DFNN,CURVST,DIEN)) Q:DIEN=""  D
"RTN","HMPDJ02",167,0)
 . . N ICDIEN,PVISIT
"RTN","HMPDJ02",168,0)
 . . S ICDIEN=+$P(^AUPNVPOV(DIEN,0),U,1),PVISIT=$P(^AUPNVPOV(DIEN,0),U,3)
"RTN","HMPDJ02",169,0)
 . . N VISITDT
"RTN","HMPDJ02",170,0)
 . . S VISITDT=+$G(^AUPNVSIT(PVISIT,0)) Q:'$L(VISITDT)  ;quit if no visit is found, bad data entry.
"RTN","HMPDJ02",171,0)
 . . N ICDCODE,VIEN
"RTN","HMPDJ02",172,0)
 . . S ICDCODE=$$CODEC^ICDEX(80,ICDIEN) Q:ICDCODE=-1  ;convert to ICD code, quit if not valid Sep 1, 2016 - PB - DE5033
"RTN","HMPDJ02",173,0)
 . . I $D(POVLST(ICDCODE,VISITDT))'=0 D  Q
"RTN","HMPDJ02",174,0)
 . . . S VIEN=$$GETVIEN^HMPDJ02A(DFNN,VISITDT)
"RTN","HMPDJ02",175,0)
 . . . ; W:VIEN=-1 "Can not find VISIT IEN for "_VISITDT,!
"RTN","HMPDJ02",176,0)
 . . . S:VIEN'=-1 POVLST(ICDCODE,VISITDT)=VIEN
"RTN","HMPDJ02",177,0)
 Q
"RTN","HMPDJ02",178,0)
 ;
"RTN","HMPDJ02",179,0)
DIAGLIST(DIAGS,DFN,ORDATE,ORPRCNT) ;BL,JL; get list diagnosis on past notes
"RTN","HMPDJ02",180,0)
 S:'+$G(ORDATE) ORDATE=DT
"RTN","HMPDJ02",181,0)
 S:'+$G(ORPRCNT) ORPRCNT=1
"RTN","HMPDJ02",182,0)
 ;Use TIU DOCUMENTS BY CONTEXT to retrieve all notes associated with patient (CONTEXT^TIUSRVLO)
"RTN","HMPDJ02",183,0)
 K ENC,DIAGCODE,CNT,DIAG,DIAGNUM,DIAGLINE,ENCNUM,LINE,IEN,CLASS,CONTEXT,EARLY,LATE,PERSON,OCCLIM,SEQUENCE,SHOWADD,INCUND,LSTNUM,NOTEINFO
"RTN","HMPDJ02",184,0)
 K NEWCNT,OLDLST,DIAGCNT,^TMP("HMP",$J)
"RTN","HMPDJ02",185,0)
 S CLASS=3,CONTEXT=1,EARLY=-1,LATE=-1,PERSON=0,OCCLIM=0,SEQUENCE="D",SHOWADD=0,INCUND=0,OLDLST=""
"RTN","HMPDJ02",186,0)
 ;TAKE EXISTING LIST FROM ENCOUNTER CALL AND PRESERVE TO BE APPENDED AFTERWARD
"RTN","HMPDJ02",187,0)
 K DIAGS S DIAGS=""
"RTN","HMPDJ02",188,0)
 D CONTEXT^TIUSRVLO(.DIAGS,CLASS,CONTEXT,DFN,EARLY,LATE,PERSON,OCCLIM,SEQUENCE,SHOWADD,INCUND)
"RTN","HMPDJ02",189,0)
 ;DE7518;BL Previous call creates several elements ensure all are combined. Then move array to ^TMP
"RTN","HMPDJ02",190,0)
 M ^TMP("HMP",$J,"DIAGS")=^TMP("TIUR",$J)
"RTN","HMPDJ02",191,0)
 M ^TMP("HMP",$J,"DIAGS")=DIAGS  ;DE7518;BL prevent DIAGS array from getting to large causes STORE error
"RTN","HMPDJ02",192,0)
 K DIAGS
"RTN","HMPDJ02",193,0)
 ;Go through notes list extract diagnosis associated with each encounter to previous problem list
"RTN","HMPDJ02",194,0)
 S LSTNUM=""
"RTN","HMPDJ02",195,0)
 ;THIS CALL WILL EXTRACT ALL THE VISIT INFORMATION TO ^TMP(PXKENC,$J,VISIT)
"RTN","HMPDJ02",196,0)
 N VIEN
"RTN","HMPDJ02",197,0)
 F  S LSTNUM=$O(^TMP("HMP",$J,"DIAGS",LSTNUM)) Q:LSTNUM=""  D
"RTN","HMPDJ02",198,0)
 . N HMPV
"RTN","HMPDJ02",199,0)
 . S NOTEINFO=""
"RTN","HMPDJ02",200,0)
 . S IEN=$P(^TMP("HMP",$J,"DIAGS",LSTNUM),"^",1)
"RTN","HMPDJ02",201,0)
 . ;DE6877 - 21 Jan 17 - PB next two lines of code check to see if the Visit/Admit Date&Time and/or Patient Name fields are missing for the visit. if either are missing processing this record stops.
"RTN","HMPDJ02",202,0)
 . S HMPV=$P($G(^TIU(8925,IEN,0)),U,3)
"RTN","HMPDJ02",203,0)
 . I $G(HMPV)>0 Q:$$VSTIEN^HMPDJ02A(HMPV)>0
"RTN","HMPDJ02",204,0)
 . D PCE4NOTE^ORWPCE3(.NOTEINFO,IEN,DFN)
"RTN","HMPDJ02",205,0)
 . S CNT=0,DIAGCNT=0
"RTN","HMPDJ02",206,0)
 . F  S CNT=$O(NOTEINFO(CNT)) Q:CNT=""  D
"RTN","HMPDJ02",207,0)
 . . Q:$P(NOTEINFO(CNT),"^",1)'["POV"
"RTN","HMPDJ02",208,0)
 . . S DIAGCNT=DIAGCNT+1
"RTN","HMPDJ02",209,0)
 . . S VISITDT=$P($G(NOTEINFO(2)),U,3)  ; get the visit datetime
"RTN","HMPDJ02",210,0)
 . . S ICDCODE=$P(NOTEINFO(CNT),U,2)  ; get the diagnosis code
"RTN","HMPDJ02",211,0)
 . . I $D(^TMP("HMP",$J,"ENC",ICDCODE,VISITDT))=0 D  ;DE7518 move ENC array to global reference
"RTN","HMPDJ02",212,0)
 . . . S VIEN=$$GETVIEN^HMPDJ02A(DFN,VISITDT)
"RTN","HMPDJ02",213,0)
 . . . ;W:VIEN=-1 "Can not find Visit ID for "_NOTEINFO(CNT),!
"RTN","HMPDJ02",214,0)
 . . . S:VIEN'=-1 ^TMP("HMP",$J,"ENC",ICDCODE,VISITDT)=VIEN_U_$G(^TMP("HMP",$J,"DIAGS",LSTNUM)) ;  add to list only if visit ien is valid
"RTN","HMPDJ02",215,0)
 ; KILL DIAGS BECAUSE IT NOW CONTAINS NOTE INFO
"RTN","HMPDJ02",216,0)
 K DIAGS
"RTN","HMPDJ02",217,0)
 M DIAGS=^TMP("HMP",$J,"ENC")
"RTN","HMPDJ02",218,0)
 ;CLEAN UP ARRAYS
"RTN","HMPDJ02",219,0)
 K NOTEINFO,ENC,DIAG,^TMP("TIUR",$J),^TMP("HMP",$J)
"RTN","HMPDJ02",220,0)
 D GMPLPOV(DFN,.DIAGS,1)  ; Also loop thru V POV file to find extra encounter
"RTN","HMPDJ02",221,0)
 Q
"RTN","HMPDJ02",222,0)
 ;
"RTN","HMPDJ02",223,0)
GMRA1(ID) ; -- allergy/reaction GMRAL(ID)
"RTN","HMPDJ02",224,0)
 N GMRA,HMPY,REAC,X,Y,I,USER,CMMT
"RTN","HMPDJ02",225,0)
 S GMRA=$G(GMRAL(ID)) D EN1^GMRAOR2(ID,"HMPY")
"RTN","HMPDJ02",226,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ02",227,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ02",228,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the allergy domain"
"RTN","HMPDJ02",229,0)
 ;
"RTN","HMPDJ02",230,0)
 S X=$P(HMPY,U,10) I $L(X) S X=$$DATE^HMPDGMRA(X) Q:X<HMPSTART  Q:X>HMPSTOP  S REAC("entered")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ02",231,0)
 S X=$$FAC^HMPD D FACILITY^HMPUTILS(X,"REAC")
"RTN","HMPDJ02",232,0)
 S REAC("kind")="Allergy / Adverse Reaction"
"RTN","HMPDJ02",233,0)
 S REAC("localId")=ID,REAC("uid")=$$SETUID^HMPUTILS("allergy",DFN,ID)
"RTN","HMPDJ02",234,0)
 S (REAC("summary"),REAC("products",1,"name"))=$P(HMPY,U) I $P(GMRA,U,9) D
"RTN","HMPDJ02",235,0)
 . S X=$P(GMRA,U,9),REAC("reference")=X
"RTN","HMPDJ02",236,0)
 . S Y=+$P(X,"(",2) I 'Y,X["PSDRUG" S Y=50
"RTN","HMPDJ02",237,0)
 . S I=$$VUID^HMPD(+X,Y),REAC("products",1,"vuid")=$$SETVURN^HMPUTILS("vuid",I)
"RTN","HMPDJ02",238,0)
 S X=$P(HMPY,U,2) S:$L(X) REAC("originatorName")=X
"RTN","HMPDJ02",239,0)
 S REAC("historical")=$S($E($P(HMPY,U,5))="H":"true",1:"false")
"RTN","HMPDJ02",240,0)
 S X=$P(HMPY,U,6) S:$L(X) REAC("mechanism")=X
"RTN","HMPDJ02",241,0)
 S X=$P(HMPY,U,7) S:$L(X) REAC("typeName")=X
"RTN","HMPDJ02",242,0)
 ; REAC("adverseEventTypeName")=$P(HMPY,U,7)_" "_$P(HMPY,U,6) ;TYPE_MECH
"RTN","HMPDJ02",243,0)
 I $P(HMPY,U,4)="VERIFIED",$P(HMPY,U,9) D
"RTN","HMPDJ02",244,0)
 . S REAC("verified")=$$JSONDT^HMPUTILS($P(HMPY,U,9))
"RTN","HMPDJ02",245,0)
 . S REAC("verifierName")=$P(HMPY,U,8)
"RTN","HMPDJ02",246,0)
 ; severity
"RTN","HMPDJ02",247,0)
 S I=0 F  S I=$O(HMPY("O",I)) Q:I<1  D
"RTN","HMPDJ02",248,0)
 . S X=$G(HMPY("O",I))
"RTN","HMPDJ02",249,0)
 . S REAC("observations",I,"date")=$$JSONDT^HMPUTILS(+X)
"RTN","HMPDJ02",250,0)
 . S REAC("observations",I,"severity")=$P(X,U,2)
"RTN","HMPDJ02",251,0)
 ; reactions
"RTN","HMPDJ02",252,0)
 S I=0 F  S I=$O(GMRAL(ID,"S",I)) Q:I<1  D
"RTN","HMPDJ02",253,0)
 . S X=$G(GMRAL(ID,"S",I))
"RTN","HMPDJ02",254,0)
 . S REAC("reactions",I,"name")=$P(X,";")
"RTN","HMPDJ02",255,0)
 . S Y=$$VUID^HMPD(+$P(X,";",2),120.83)
"RTN","HMPDJ02",256,0)
 . S REAC("reactions",I,"vuid")=$$SETVURN^HMPUTILS("vuid",Y)
"RTN","HMPDJ02",257,0)
 ; drug classes
"RTN","HMPDJ02",258,0)
 S I=0 F  S I=$O(HMPY("V",I)) Q:I<1  D
"RTN","HMPDJ02",259,0)
 . S X=$G(HMPY("V",I))
"RTN","HMPDJ02",260,0)
 . S REAC("drugClasses",I,"code")=$P(X,U)
"RTN","HMPDJ02",261,0)
 . S REAC("drugClasses",I,"name")=$P(X,U,2)
"RTN","HMPDJ02",262,0)
 S I=0 F  S I=$O(HMPY("C",I)) Q:I<1  D
"RTN","HMPDJ02",263,0)
 . S X=$G(HMPY("C",I)),USER=$$VA200^HMPDGMPL($P(X,U,3))
"RTN","HMPDJ02",264,0)
 . S REAC("comments",I,"enteredByUid")=$$SETUID^HMPUTILS("user",,+USER)
"RTN","HMPDJ02",265,0)
 . S REAC("comments",I,"enteredByName")=$P(X,U,3)
"RTN","HMPDJ02",266,0)
 . S REAC("comments",I,"entered")=$$JSONDT^HMPUTILS(+X)
"RTN","HMPDJ02",267,0)
 . K CMMT M CMMT=HMPY("C",I)
"RTN","HMPDJ02",268,0)
 . S REAC("comments",I,"comment")=$$STRING^HMPD(.CMMT)
"RTN","HMPDJ02",269,0)
 I GMRA="" S REAC("removed")="true" ;entered in error
"RTN","HMPDJ02",270,0)
 ; next
"RTN","HMPDJ02",271,0)
 S REAC("lastUpdateTime")=$$EN^HMPSTMP("allergy")
"RTN","HMPDJ02",272,0)
 S REAC("stampTime")=REAC("lastUpdateTime") ; RHL 20141231
"RTN","HMPDJ02",273,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ02",274,0)
 I $G(HMPMETA) D ADD^HMPMETA("allergy",REAC("uid"),REAC("stampTime")) Q:HMPMETA=1  ;US11019/US6734
"RTN","HMPDJ02",275,0)
 D ADD^HMPDJ("REAC","allergy")
"RTN","HMPDJ02",276,0)
 Q
"RTN","HMPDJ02",277,0)
 ;
"RTN","HMPDJ02",278,0)
NKA ; -- no assessment or NKA [GMRAL=0 or ""]
"RTN","HMPDJ02",279,0)
 N REAC,X
"RTN","HMPDJ02",280,0)
 S X=$G(^GMR(120.86,DFN,0)) Q:GMRAL=""!'$P(X,U,2)
"RTN","HMPDJ02",281,0)
 S REAC("uid")=$$SETUID^HMPUTILS("obs",DFN,"120.86;"_DFN)
"RTN","HMPDJ02",282,0)
 S REAC("typeCode")="urn:sct:160244002"
"RTN","HMPDJ02",283,0)
 S REAC("typeName")="No known allergies"
"RTN","HMPDJ02",284,0)
 S X=$$FAC^HMPD D FACILITY^HMPUTILS(X,"REAC")
"RTN","HMPDJ02",285,0)
 D ADD^HMPDJ("REAC","allergy")
"RTN","HMPDJ02",286,0)
 Q
"RTN","HMPDJ02",287,0)
 ;
"RTN","HMPDJ02",288,0)
 ;DE7518; This routine has exceed SACC adding the following subroutines to HMPDJ02A
"RTN","HMPDJ02",289,0)
GMV1(ID) ; -- vital/measurement ^UTILITY($J,"GMRVD",HMPIDT,HMPTYP,ID)
"RTN","HMPDJ02",290,0)
 D GMV1^HMPDJ02A(ID)
"RTN","HMPDJ02",291,0)
 Q
"RTN","HMPDJ02",292,0)
 ;
"RTN","HMPDJ02",293,0)
HMP(COLL) ; -- HMP Patient Objects
"RTN","HMPDJ02",294,0)
 D HMP^HMPDJ02A(COLL)
"RTN","HMPDJ02",295,0)
 Q
"RTN","HMPDJ02",296,0)
HMP1(FNUM,ID) ; -- [patient] object
"RTN","HMPDJ02",297,0)
 D HMP1^HMPDJ02A(FNUM,ID)
"RTN","HMPDJ02",298,0)
 Q
"RTN","HMPDJ02A")
0^33^B20713203
"RTN","HMPDJ02A",1,0)
HMPDJ02A ;ASMR/MKB/JD,CK,CPC,PB,BL - Problems,Allergies,Vitals ;Jan 17, 2107 09:56:26
"RTN","HMPDJ02A",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3,4**;Jan 17, 2017;Build 13
"RTN","HMPDJ02A",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ02A",4,0)
 ;
"RTN","HMPDJ02A",5,0)
 ; External References          DBIA#
"RTN","HMPDJ02A",6,0)
 ; -------------------          ----- 
"RTN","HMPDJ02A",7,0)
 ; ^AUPNVSIT(                    2028
"RTN","HMPDJ02A",8,0)
 ;
"RTN","HMPDJ02A",9,0)
 Q
"RTN","HMPDJ02A",10,0)
GETVIEN(DFNN,VISITDT)  ;JL; get the Visit IEN from VISIT file based on patient ID and Datetime
"RTN","HMPDJ02A",11,0)
 Q:'+$G(DFNN)!'$L(VISITDT) -1  ;return -1 if bad parameter
"RTN","HMPDJ02A",12,0)
 N REVDT,VISITIEN
"RTN","HMPDJ02A",13,0)
 S REVDT=9999999-$P(VISITDT,".",1)_$S($P(VISITDT,".",2)'="":"."_$P(VISITDT,".",2),1:"")
"RTN","HMPDJ02A",14,0)
 S VISITIEN=$O(^AUPNVSIT("AA",DFNN,REVDT,""))  ; using "AA" cross-reference
"RTN","HMPDJ02A",15,0)
 Q:VISITIEN="" -1
"RTN","HMPDJ02A",16,0)
 Q VISITIEN
"RTN","HMPDJ02A",17,0)
 ;
"RTN","HMPDJ02A",18,0)
VSTIEN(VSTIEN) ; Jan 17, 2017 - PB - DE6877 - Function to check for the visit and the patient to exist for the visit in the Visit File
"RTN","HMPDJ02A",19,0)
 ; INPUT - VSTIEN the IEN for the visit in the Visit File
"RTN","HMPDJ02A",20,0)
 ; OUTPUT - 1 = missing required data element, 0 = required data elements are present
"RTN","HMPDJ02A",21,0)
 N VSTDATA
"RTN","HMPDJ02A",22,0)
 S VSTDATA=$G(^AUPNVSIT(VSTIEN,0))  ;ICR 2028
"RTN","HMPDJ02A",23,0)
 Q:$P(VSTDATA,U)="" 1  ; if the .01 field is null quit and return 1
"RTN","HMPDJ02A",24,0)
 Q:$P(VSTDATA,U,5)="" 1  ; if field .05 is null quit and return 1
"RTN","HMPDJ02A",25,0)
 Q 0
"RTN","HMPDJ02A",26,0)
GMV1(ID) ; -- vital/measurement ^UTILITY($J,"GMRVD",HMPIDT,HMPTYP,ID)
"RTN","HMPDJ02A",27,0)
 N VIT,HMPY,X0,TYPE,LOC,FAC,X,Y,MRES,MUNT,HIGH,LOW,I
"RTN","HMPDJ02A",28,0)
 D GETREC^GMVUTL(.HMPY,ID,1) S X0=$G(HMPY(0))
"RTN","HMPDJ02A",29,0)
 ; GMRVUT0 returns CLiO data with a pseudo-ID >> get real ID
"RTN","HMPDJ02A",30,0)
 I X0="",$G(HMPIDT),$D(HMPTYP) D  ;[from HMPDJ0]
"RTN","HMPDJ02A",31,0)
 . N GMRVD S GMRVD=$G(^UTILITY($J,"GMRVD",HMPIDT,HMPTYP,ID))
"RTN","HMPDJ02A",32,0)
 . S ID=$O(^PXRMINDX(120.5,"PI",DFN,$P(GMRVD,U,3),+GMRVD,""))
"RTN","HMPDJ02A",33,0)
 . I $L(ID) D GETREC^GMVUTL(.HMPY,ID,1) S X0=$G(HMPY(0))
"RTN","HMPDJ02A",34,0)
 Q:X0=""
"RTN","HMPDJ02A",35,0)
 ;
"RTN","HMPDJ02A",36,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ02A",37,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ02A",38,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the vitals domain"
"RTN","HMPDJ02A",39,0)
 S VIT("localId")=ID,VIT("kind")="Vital Sign"
"RTN","HMPDJ02A",40,0)
 S VIT("uid")=$$SETUID^HMPUTILS("vital",DFN,ID)
"RTN","HMPDJ02A",41,0)
 S VIT("observed")=$$JSONDT^HMPUTILS(+X0)
"RTN","HMPDJ02A",42,0)
 S VIT("resulted")=$$JSONDT^HMPUTILS(+$P(X0,U,4))
"RTN","HMPDJ02A",43,0)
 S TYPE=$$FIELD^GMVGETVT(+$P(X0,U,3),2)
"RTN","HMPDJ02A",44,0)
 S VIT("displayName")=TYPE
"RTN","HMPDJ02A",45,0)
 S VIT("typeName")=$$FIELD^GMVGETVT($P(X0,U,3),1)
"RTN","HMPDJ02A",46,0)
 S VIT("typeCode")="urn:va:vuid:"_$$FIELD^GMVGETVT($P(X0,U,3),4)
"RTN","HMPDJ02A",47,0)
 S X=$P(X0,U,8),VIT("result")=X
"RTN","HMPDJ02A",48,0)
 S VIT("units")=$$UNIT^HMPDGMV(TYPE),(MRES,MUNT)=""
"RTN","HMPDJ02A",49,0)
 I TYPE="T"  S:X=+X MUNT="C",MRES=$J(X-32*5/9,0,1) ;EN1^GMRVUTL
"RTN","HMPDJ02A",50,0)
 I TYPE="HT" S MUNT="cm",MRES=$J(2.54*X,0,2)  ;EN2^GMRVUTL
"RTN","HMPDJ02A",51,0)
 I TYPE="WT" S MUNT="kg",MRES=$J(X/2.2,0,2)   ;EN3^GMRVUTL
"RTN","HMPDJ02A",52,0)
 I TYPE="CG" S MUNT="cm",MRES=$J(2.54*X,0,2)
"RTN","HMPDJ02A",53,0)
 S:MRES VIT("metricResult")=MRES,VIT("metricUnits")=MUNT
"RTN","HMPDJ02A",54,0)
 S X=$$RANGE^HMPDGMV(TYPE) I $L(X) S VIT("high")=$P(X,U),VIT("low")=$P(X,U,2)
"RTN","HMPDJ02A",55,0)
 S VIT("summary")=VIT("typeName")_" "_VIT("result")_" "_VIT("units")
"RTN","HMPDJ02A",56,0)
 F I=1:1:$L(HMPY(5),U) S X=$P(HMPY(5),U,I) I X D
"RTN","HMPDJ02A",57,0)
 . S VIT("qualifiers",I,"name")=$$FIELD^GMVGETQL(X,1)
"RTN","HMPDJ02A",58,0)
 . S VIT("qualifiers",I,"vuid")=$$FIELD^GMVGETQL(X,3)
"RTN","HMPDJ02A",59,0)
 ;US4338 - add pulse ox qualifier if it exists. name component is required. vuid is not per Thomas Loth
"RTN","HMPDJ02A",60,0)
 I $P(X0,U,10) S VIT("qualifiers",I+1,"name")=$P(X0,U,10)
"RTN","HMPDJ02A",61,0)
 I $G(HMPY(2)) D
"RTN","HMPDJ02A",62,0)
 . S VIT("removed")="true"        ;entered in error
"RTN","HMPDJ02A",63,0)
 . S X=$$GET1^DIQ(120.506,"1,"_ID_",",.01,"E") S:X VIT("reasonEnteredInError")=X
"RTN","HMPDJ02A",64,0)
 . S X=$$GET1^DIQ(120.506,"1,"_ID_",",.02,"I") S:X VIT("dateEnteredInError")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ02A",65,0)
 S LOC=+$P(X0,U,5),FAC=$$FAC^HMPD(LOC)
"RTN","HMPDJ02A",66,0)
 S VIT("locationUid")=$$SETUID^HMPUTILS("location",,LOC)
"RTN","HMPDJ02A",67,0)
 S VIT("locationName")=$S(LOC:$P($G(^SC(LOC,0)),U),1:"unknown")
"RTN","HMPDJ02A",68,0)
 N USERID S USERID=$P(HMPY(0),U,6)
"RTN","HMPDJ02A",69,0)
 I $G(USERID) D
"RTN","HMPDJ02A",70,0)
 . S VIT("enteredByUid")=$$SETUID^HMPUTILS("user",,USERID)
"RTN","HMPDJ02A",71,0)
 . S VIT("enteredByName")=$P($G(^VA(200,USERID,0)),U,1)
"RTN","HMPDJ02A",72,0)
 D FACILITY^HMPUTILS(FAC,"VIT")
"RTN","HMPDJ02A",73,0)
 S VIT("lastUpdateTime")=$$EN^HMPSTMP("vital")
"RTN","HMPDJ02A",74,0)
 S VIT("stampTime")=VIT("lastUpdateTime") ; RHL 20141231
"RTN","HMPDJ02A",75,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ02A",76,0)
 I $G(HMPMETA) D ADD^HMPMETA("vital",VIT("uid"),VIT("stampTime")) Q:HMPMETA=1  ;US11019/US6734
"RTN","HMPDJ02A",77,0)
 D ADD^HMPDJ("VIT","vital")
"RTN","HMPDJ02A",78,0)
 Q
"RTN","HMPDJ02A",79,0)
 ;
"RTN","HMPDJ02A",80,0)
HMP(COLL) ; -- HMP Patient Objects
"RTN","HMPDJ02A",81,0)
 N ID I $L($G(HMPID)) D  Q
"RTN","HMPDJ02A",82,0)
 . S ID=+HMPID I 'ID S ID=+$O(^HMP(800000.1,"B",HMPID,0)) ;IEN or UID
"RTN","HMPDJ02A",83,0)
 . D:ID HMP1(800000.1,ID)
"RTN","HMPDJ02A",84,0)
 Q:$G(COLL)=""  ;error
"RTN","HMPDJ02A",85,0)
 S ID=0 F  S ID=$O(^HMP(800000.1,"C",DFN,COLL,ID)) Q:ID<1  D HMP1(800000.1,ID)
"RTN","HMPDJ02A",86,0)
 Q
"RTN","HMPDJ02A",87,0)
HMP1(FNUM,ID) ; -- [patient] object
"RTN","HMPDJ02A",88,0)
 N I,X,HMPY
"RTN","HMPDJ02A",89,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ02A",90,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=$G(DFN)
"RTN","HMPDJ02A",91,0)
 S ERRMSG="A problem occurred retreiving record "_ID_" for the HMP domain"
"RTN","HMPDJ02A",92,0)
 S I=0 F  S I=$O(^HMP(FNUM,ID,1,I)) Q:I<1  S X=$G(^(I,0)),HMPY(I)=X
"RTN","HMPDJ02A",93,0)
 I $D(HMPY) D  ;already encoded JSON
"RTN","HMPDJ02A",94,0)
 . S HMPI=HMPI+1 S:HMPI>1 @HMP@(HMPI,.3)=","
"RTN","HMPDJ02A",95,0)
 . M @HMP@(HMPI)=HMPY
"RTN","HMPDJ02A",96,0)
 . ; -- chunk data if from DQINIT^HMPDJFSP ; i.e. HMPCHNK defined ;*S68-JCH*
"RTN","HMPDJ02A",97,0)
 . D CHNKCHK^HMPDJFSP(.HMP,.HMPI) ;*S68-JCH*
"RTN","HMPDJ02A",98,0)
 Q
"RTN","HMPDJ04")
0^40^B101503739
"RTN","HMPDJ04",1,0)
HMPDJ04 ;SLC/MKB,ASMR/RRB,ASF,PB,MBS - Appointments,Visits;July 20, 2017 10:53:17
"RTN","HMPDJ04",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3,4**;Sep 01, 2011;Build 13
"RTN","HMPDJ04",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ04",4,0)
 ;
"RTN","HMPDJ04",5,0)
 ; External References          DBIA#
"RTN","HMPDJ04",6,0)
 ; -------------------          -----
"RTN","HMPDJ04",7,0)
 ; ^DGS(41.1                     3796
"RTN","HMPDJ04",8,0)
 ; ^DIC(42                      10039
"RTN","HMPDJ04",9,0)
 ; ^SC                          10040
"RTN","HMPDJ04",10,0)
 ; ^VA(200                      10060
"RTN","HMPDJ04",11,0)
 ; DIQ                           2056
"RTN","HMPDJ04",12,0)
 ; ICPTCOD                       1995
"RTN","HMPDJ04",13,0)
 ; ENCEVENT^PXKENC               1894  ;DE6363 - JD - 8/23/16
"RTN","HMPDJ04",14,0)
 ; SDAMA301                      4433
"RTN","HMPDJ04",15,0)
 ; XLFDT                        10103
"RTN","HMPDJ04",16,0)
 ; XUAF4                         2171
"RTN","HMPDJ04",17,0)
 ; EDP(230                       6275
"RTN","HMPDJ04",18,0)
 ; SC(                             93
"RTN","HMPDJ04",19,0)
 ;
"RTN","HMPDJ04",20,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ04",21,0)
 Q
"RTN","HMPDJ04",22,0)
 ;
"RTN","HMPDJ04",23,0)
SDAM1 ; -- appointment ^TMP($J,"SDAMA301",DFN,HMPDT)
"RTN","HMPDJ04",24,0)
 N NODE,HLOC,APPT,X,STS,CLS,FAC,SV,PRV,CREDSTOP
"RTN","HMPDJ04",25,0)
 S NODE=$G(^TMP($J,"SDAMA301",DFN,HMPDT))
"RTN","HMPDJ04",26,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ04",27,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ04",28,0)
 S ERRMSG="A problem occurred converting a record for the appointment domain"
"RTN","HMPDJ04",29,0)
 ;
"RTN","HMPDJ04",30,0)
 S HLOC=$P(NODE,U,2),X="A;"_HMPDT_";"_+HLOC
"RTN","HMPDJ04",31,0)
 I $L($G(ID)),$P(ID,";",1,3)'=X Q
"RTN","HMPDJ04",32,0)
 S APPT("localId")=X,APPT("uid")=$$SETUID^HMPUTILS("appointment",DFN,X)
"RTN","HMPDJ04",33,0)
 S X=$P(NODE,U,10),APPT("typeCode")=$P(X,";"),APPT("typeName")=$P(X,";",2)
"RTN","HMPDJ04",34,0)
 S STS=$P(NODE,U,3),CLS=$S($E(STS)="I":"I",1:"O")
"RTN","HMPDJ04",35,0)
 S STS=$P($P(NODE,U,22),";",1,2)  ;DE4469 - PB - APR 26, 2016 changed from using the SDAMA308 API to using the SDAMA301 Supported API to get appointment status ICR 4433
"RTN","HMPDJ04",36,0)
 S APPT("dateTime")=$$JSONDT^HMPUTILS(HMPDT)
"RTN","HMPDJ04",37,0)
 S:$L($P(NODE,U,6)) APPT("comment")=$P(NODE,U,6)
"RTN","HMPDJ04",38,0)
 S:$P(NODE,U,9) APPT("checkIn")=$$JSONDT^HMPUTILS($P(NODE,U,9))
"RTN","HMPDJ04",39,0)
 S:$P(NODE,U,11) APPT("checkOut")=$$JSONDT^HMPUTILS($P(NODE,U,11))
"RTN","HMPDJ04",40,0)
 I $L(ID,";")>3 S APPT("reasonName")=$P(ID,";",4),PRV=+$P(ID,";",5) ;from SDAM event
"RTN","HMPDJ04",41,0)
 S FAC=$$FAC^HMPD(+HLOC) D FACILITY^HMPUTILS(FAC,"APPT") I HLOC D
"RTN","HMPDJ04",42,0)
 . S APPT("locationName")=$P(HLOC,";",2)
"RTN","HMPDJ04",43,0)
 . S APPT("locationUid")=$$SETUID^HMPUTILS("location",,+HLOC)
"RTN","HMPDJ04",44,0)
 . S X=$$GET1^DIQ(44,(+HLOC)_",",1) S:X]"" APPT("shortLocationName")=X  ;DE2818, (#1) ABBREVIATION
"RTN","HMPDJ04",45,0)
 . S X=$$AMIS^HMPDVSIT(+$P(NODE,U,13))
"RTN","HMPDJ04",46,0)
 . S:$L(X) APPT("stopCodeUid")="urn:va:stop-code:"_$P(X,U),APPT("stopCodeName")=$P(X,U,2)
"RTN","HMPDJ04",47,0)
 . S CREDSTOP=$$GET1^DIQ(44,HLOC_",",2503,"I")
"RTN","HMPDJ04",48,0)
 . S:CREDSTOP CREDSTOP=$$AMIS^HMPDVSIT(CREDSTOP),APPT("creditStopCodeUid")="urn:va:stop-code:"_$P(CREDSTOP,U),APPT("creditStopCodeName")=$P(CREDSTOP,U,2)
"RTN","HMPDJ04",49,0)
 . S SV=$$GET1^DIQ(44,+HLOC_",",9.5,"I")
"RTN","HMPDJ04",50,0)
 . I SV S APPT("service")=$$SERV^HMPDSDAM(SV)
"RTN","HMPDJ04",51,0)
 . ;find default provider
"RTN","HMPDJ04",52,0)
 . S:'$G(PRV) PRV=+$$GET1^DIQ(44,+HLOC_",",16,"I") I 'PRV D
"RTN","HMPDJ04",53,0)
 .. N HMPP,I,FIRST
"RTN","HMPDJ04",54,0)
 .. D GETS^DIQ(44,+HLOC_",","2600*","I","HMPP")
"RTN","HMPDJ04",55,0)
 .. S FIRST=$O(HMPP(44.1,"")),I=""
"RTN","HMPDJ04",56,0)
 .. F  S I=$O(HMPP(44.1,I)) Q:I=""  I $G(HMPP(44.1,I,.02,"I")) S PRV=$G(HMPP(44.1,I,.01,"I")) Q
"RTN","HMPDJ04",57,0)
 .. I 'PRV,FIRST S PRV=$G(HMPP(44.1,FIRST,.01,"I"))
"RTN","HMPDJ04",58,0)
 I $G(PRV) S APPT("providers",1,"providerUid")=$$SETUID^HMPUTILS("user",,PRV),APPT("providers",1,"providerName")=$$GET1^DIQ(200,PRV_",",.01)  ;DE2818
"RTN","HMPDJ04",59,0)
 S APPT("patientClassCode")="urn:va:patient-class:"_$S(CLS="I":"IMP",1:"AMB")
"RTN","HMPDJ04",60,0)
 S APPT("patientClassName")=$S(CLS="I":"Inpatient",1:"Ambulatory")
"RTN","HMPDJ04",61,0)
 S APPT("categoryCode")="urn:va:encounter-category:OV",APPT("categoryName")="Outpatient Visit"
"RTN","HMPDJ04",62,0)
 S APPT("appointmentStatus")=$P(STS,";",2)
"RTN","HMPDJ04",63,0)
 S APPT("lastUpdateTime")=$$EN^HMPSTMP("appointment") ;RHL 20150102
"RTN","HMPDJ04",64,0)
 S APPT("stampTime")=APPT("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ04",65,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ04",66,0)
 I $G(HMPMETA) D ADD^HMPMETA("appointment",APPT("uid"),APPT("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ04",67,0)
 D ADD^HMPDJ("APPT","appointment")
"RTN","HMPDJ04",68,0)
 Q
"RTN","HMPDJ04",69,0)
 ;
"RTN","HMPDJ04",70,0)
DGS ; scheduled admissions [from APPOINTM^HMPDJ0]
"RTN","HMPDJ04",71,0)
 N HMPA,HMPX
"RTN","HMPDJ04",72,0)
 ;DE2818, ^DGS(41.1) references ICR 3796
"RTN","HMPDJ04",73,0)
 S HMPA=0 F  S HMPA=$O(^DGS(41.1,"B",DFN,HMPA)) Q:HMPA<1  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ04",74,0)
 . S HMPX=$G(^DGS(41.1,HMPA,0))
"RTN","HMPDJ04",75,0)
 . I $L($G(ID)),+$P(ID,";",2)=+$P(HMPX,U,2) D DGS1(HMPA) Q
"RTN","HMPDJ04",76,0)
 . Q:$P(HMPX,U,13)  Q:$P(HMPX,U,17)  ;cancelled or admitted
"RTN","HMPDJ04",77,0)
 . S X=$P(HMPX,U,2) Q:X<HMPSTART!(X>HMPSTOP)  ;out of date range
"RTN","HMPDJ04",78,0)
 . D DGS1(HMPA)
"RTN","HMPDJ04",79,0)
 Q
"RTN","HMPDJ04",80,0)
 ;
"RTN","HMPDJ04",81,0)
DGS1(IFN) ; -- scheduled admission
"RTN","HMPDJ04",82,0)
 N ADM,X0,DATE,HLOC,FAC,SV,X,CREDSTOP
"RTN","HMPDJ04",83,0)
 S X0=$G(^DGS(41.1,+$G(IFN),0)) Q:X0=""  ;deleted (DE2818, ICR 3796)
"RTN","HMPDJ04",84,0)
 ;
"RTN","HMPDJ04",85,0)
 S DATE=+$P(X0,U,2),HLOC=+$$GET1^DIQ(42,+$P(X0,U,8)_",",.01)  ;DE2818, ICR 10039
"RTN","HMPDJ04",86,0)
 S X="H;"_DATE,ADM("localId")=X,ADM("uid")=$$SETUID^HMPUTILS("appointment",DFN,X)
"RTN","HMPDJ04",87,0)
 S ADM("dateTime")=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ04",88,0)
 S FAC=$$FAC^HMPD(+HLOC) D FACILITY^HMPUTILS(FAC,"ADM") I HLOC D
"RTN","HMPDJ04",89,0)
 . S HLOC=$$GET1^DIQ(44,(+HLOC)_",",.01)  ;DE2818, (#.01) NAME
"RTN","HMPDJ04",90,0)
 . S ADM("uid")=ADM("uid")_";"_+HLOC
"RTN","HMPDJ04",91,0)
 . S ADM("locationName")=$P(HLOC,";",2)
"RTN","HMPDJ04",92,0)
 . S X=$$GET1^DIQ(44,(+HLOC)_",",1)  S:X]"" ADM("shortLocationName")=X  ;DE2818, (#1) ABBREVIATION
"RTN","HMPDJ04",93,0)
 . S ADM("locationUid")=$$SETUID^HMPUTILS("location",,+HLOC)
"RTN","HMPDJ04",94,0)
 . S X=$$GET1^DIQ(44,+HLOC_",",8,"I"),X=$$AMIS^HMPDVSIT(X)
"RTN","HMPDJ04",95,0)
 . S:$L(X) ADM("stopCodeUid")="urn:va:stop-code:"_$P(X,U),ADM("stopCodeName")=$P(X,U,2)
"RTN","HMPDJ04",96,0)
 . S CREDSTOP=$$GET1^DIQ(44,HLOC_",",2503,"I")
"RTN","HMPDJ04",97,0)
 . S:CREDSTOP CREDSTOP=$$AMIS^HMPDVSIT(CREDSTOP),ADM("creditStopCodeUid")="urn:va:stop-code:"_$P(CREDSTOP,U),ADM("creditStopCodeName")=$P(CREDSTOP,U,2)
"RTN","HMPDJ04",98,0)
 . S SV=$$GET1^DIQ(44,+HLOC_",",9.5,"I")
"RTN","HMPDJ04",99,0)
 . I SV S ADM("service")=$$SERV^HMPDSDAM(SV)
"RTN","HMPDJ04",100,0)
 S X=+$P(X0,U,5) I X D
"RTN","HMPDJ04",101,0)
 . S ADM("providers",1,"providerUid")=$$SETUID^HMPUTILS("user",,X)
"RTN","HMPDJ04",102,0)
 . S ADM("providers",1,"providerName")=$$GET1^DIQ(200,X_",",.01)  ;DE2818
"RTN","HMPDJ04",103,0)
 S ADM("patientClassCode")="urn:va:patient-class:IMP",ADM("patientClassName")="Inpatient"
"RTN","HMPDJ04",104,0)
 S ADM("categoryCode")="urn:va:encounter-category:AD",ADM("categoryName")="Admission"
"RTN","HMPDJ04",105,0)
 S ADM("appointmentStatus")=$S($P(X0,U,17):"ADMITTED",$P(X0,U,13):"CANCELLED",1:"SCHEDULED")
"RTN","HMPDJ04",106,0)
 S ADM("lastUpdateTime")=$$EN^HMPSTMP("adm") ;RHL 20150102
"RTN","HMPDJ04",107,0)
 S ADM("stampTime")=ADM("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ04",108,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ04",109,0)
 I $G(HMPMETA) D ADD^HMPMETA("appointment",ADM("uid"),ADM("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ04",110,0)
 D ADD^HMPDJ("ADM","appointment")
"RTN","HMPDJ04",111,0)
 Q
"RTN","HMPDJ04",112,0)
 ;
"RTN","HMPDJ04",113,0)
VSIT1(ID) ; -- visit
"RTN","HMPDJ04",114,0)
 N VST,X0,X15,X,FAC,LOC,CATG,AMIS,INPT,DA,PS,CREDSTOP
"RTN","HMPDJ04",115,0)
 I $G(ID)?1"H"1.N D ADM^HMPDJ04A(ID) Q
"RTN","HMPDJ04",116,0)
 ;DE2818, ICR 6275
"RTN","HMPDJ04",117,0)
 I $D(^EDP(230,"V",ID)),$L($T(EDP1^HMPDJ04E)) D EDP1^HMPDJ04E(ID) Q
"RTN","HMPDJ04",118,0)
 ; ENCEVENT^PXAPI(ID)
"RTN","HMPDJ04",119,0)
 ;
"RTN","HMPDJ04",120,0)
 ; DE2818, ^AUPNVSIT - ICR 2028
"RTN","HMPDJ04",121,0)
 S X0=$G(^AUPNVSIT(ID,0)),X15=$G(^(150)) Q:X0=""  ;pjh - quit if visit already deleted
"RTN","HMPDJ04",122,0)
 ; X0=$G(^TMP("PXKENC",$J,ID,"VST",ID,0)),X15=$G(^(150))
"RTN","HMPDJ04",123,0)
 ;Q:$P(X15,U,3)'="P"  Q:$P(X0,U,7)="E"  Q:$P(X0,U,12)  ;primary, not historical or child
"RTN","HMPDJ04",124,0)
 I $P(X0,U,7)="H" D ADM^HMPDJ04A(ID,+X0) Q
"RTN","HMPDJ04",125,0)
 S VST("localId")=ID,VST("uid")=$$SETUID^HMPUTILS("visit",DFN,ID)
"RTN","HMPDJ04",126,0)
 S VST("dateTime")=$$JSONDT^HMPUTILS(+X0)  ;(#.01) VISIT/ADMIT DATE&TIME
"RTN","HMPDJ04",127,0)
 S:$P(X0,U,18) VST("checkOut")=$$JSONDT^HMPUTILS($P(X0,U,18))  ;(#.18) CHECK OUT DATE&TIME
"RTN","HMPDJ04",128,0)
 S:$P(X0,U,12) VST("parentUid")=$$SETUID^HMPUTILS("visit",DFN,$P(X0,U,12))  ;(#.12) PARENT VISIT LINK
"RTN","HMPDJ04",129,0)
 ;(#.06) LOC. OF ENCOUNTER, (#.07) SERVICE CATEGORY, (#.22) HOSPITAL LOCATION
"RTN","HMPDJ04",130,0)
 S FAC=+$P(X0,U,6),CATG=$P(X0,U,7),LOC=+$P(X0,U,22)
"RTN","HMPDJ04",131,0)
 S:FAC X=$$STA^XUAF4(FAC)_U_$P($$NS^XUAF4(FAC),U)
"RTN","HMPDJ04",132,0)
 S:'FAC X=$$FAC^HMPD(LOC) D FACILITY^HMPUTILS(X,"VST")
"RTN","HMPDJ04",133,0)
 S X=$S(CATG="H":"AD",CATG="C":"CR",CATG="T":"TC",CATG="N":"U",CATG="R":"NH","D^X"[CATG:"O",1:"OV")
"RTN","HMPDJ04",134,0)
 S VST("categoryCode")="urn:va:encounter-category:"_X
"RTN","HMPDJ04",135,0)
 S VST("categoryName")=$S(X="AD":"Admission",X="CR":"Chart Review",X="TC":"Phone Contact",X="U":"Unknown",X="NH":"Nursing Home",X="O":"Other",1:"Outpatient Visit")
"RTN","HMPDJ04",136,0)
 S INPT=$P(X15,U,2) S:INPT="" INPT=$S("H^I^R^D"[CATG:1,1:0)  ;(#15002) PATIENT STATUS IN/OUT
"RTN","HMPDJ04",137,0)
 S X=$P(X15,U,3) S:$L(X) VST("encounterType")=X  ;(#15003) ENCOUNTER TYPE
"RTN","HMPDJ04",138,0)
 S X=$$CPT(ID) S:X VST("typeName")=$P($$CPT^ICPTCOD(X),U,3)
"RTN","HMPDJ04",139,0)
 I 'X S VST("typeName")=$S('INPT&LOC:$$GET1^DIQ(44,LOC_",",.01)_" VISIT",1:$$CATG^HMPDVSIT(CATG))  ;DE2818
"RTN","HMPDJ04",140,0)
 S VST("patientClassCode")="urn:va:patient-class:"_$S(INPT:"IMP",1:"AMB")
"RTN","HMPDJ04",141,0)
 S VST("patientClassName")=$S(INPT:"Inpatient",1:"Ambulatory")
"RTN","HMPDJ04",142,0)
 ; US12589 - add createdByName field to extract
"RTN","HMPDJ04",143,0)
 S X=$$GET1^DIQ(200,$P(X0,U,23)_",",".01") S:$G(X)="" X="UNKNOWN"
"RTN","HMPDJ04",144,0)
 S VST("createdByName")=X
"RTN","HMPDJ04",145,0)
 ;(#.08) DSS ID
"RTN","HMPDJ04",146,0)
 S X=$P(X0,U,8) S:X AMIS=$$AMIS^HMPDVSIT(X) I LOC D
"RTN","HMPDJ04",147,0)
 . I 'X N AMISARR D GETS^DIQ(44,LOC_",",8,"I","AMISARR","ERR") I $G(AMISARR(44,LOC_",",8,"I"))'="" S X=$G(AMISARR(44,LOC_",",8,"I")),AMIS=$$AMIS^HMPDVSIT(X)  ;DE5300 - PB - Jun 30 2015 changed call to get stop code name and number
"RTN","HMPDJ04",148,0)
 . S VST("locationUid")=$$SETUID^HMPUTILS("location",,+LOC)
"RTN","HMPDJ04",149,0)
 . S X=$$GET1^DIQ(44,LOC_",",1) S:X]"" VST("shortLocationName")=X  ;DE2818, (#1) ABBREVIATION
"RTN","HMPDJ04",150,0)
 . S VST("locationName")=$$GET1^DIQ(44,LOC_",",.01)  ;DE2818, (#.01) NAME
"RTN","HMPDJ04",151,0)
 . S VST("locationOos")=$S($$GET1^DIQ(44,LOC_",",50.01,"I"):"true",1:"false")  ;DE2818, (#50.01) OCCASION OF SERVICE CLINIC?
"RTN","HMPDJ04",152,0)
 . S X=$$SERV^HMPDVSIT($$GET1^DIQ(44,LOC_",",9.5,"I")) S:$L(X) VST("service")=X  ;DE2818, (#9.5) TREATING SPECIALTY
"RTN","HMPDJ04",153,0)
 . S CREDSTOP=$$GET1^DIQ(44,LOC_",",2503,"I")
"RTN","HMPDJ04",154,0)
 . S:CREDSTOP CREDSTOP=$$AMIS^HMPDVSIT(CREDSTOP),VST("creditStopCodeUid")="urn:va:stop-code:"_$P(CREDSTOP,U),VST("creditStopCodeName")=$P(CREDSTOP,U,2)
"RTN","HMPDJ04",155,0)
 S:$D(AMIS) VST("stopCodeUid")="urn:va:stop-code:"_$P(AMIS,U),VST("stopCodeName")=$P(AMIS,U,2)
"RTN","HMPDJ04",156,0)
 S X=$$POV(ID) S:$L(X) VST("reasonUid")=$$SETNCS^HMPUTILS("icd",$P(X,U)),VST("reasonName")=$P(X,U,2)
"RTN","HMPDJ04",157,0)
 ; provider(s), DE2818 - ^AUPNVPRV references - ICR 2316
"RTN","HMPDJ04",158,0)
 S DA=0 F  S DA=$O(^AUPNVPRV("AD",ID,DA)) Q:DA<1  D
"RTN","HMPDJ04",159,0)
 . S X0=$G(^AUPNVPRV(DA,0))
"RTN","HMPDJ04",160,0)
 . I $P(X0,U,4)="P" D PROV("VST",DA,+X0,"P",1) Q  ;primary
"RTN","HMPDJ04",161,0)
 . D:'$D(PS(+X0)) PROV("VST",DA,+X0,"S")          ;secondary
"RTN","HMPDJ04",162,0)
 . S PS(+X0)=""                                   ; (no duplicates)
"RTN","HMPDJ04",163,0)
 K ^TMP("PXKENC",$J,ID)
"RTN","HMPDJ04",164,0)
 S VST("lastUpdateTime")=$$EN^HMPSTMP("visit") ;RHL 20150103
"RTN","HMPDJ04",165,0)
 S VST("stampTime")=VST("lastUpdateTime") ; RHL 20150103
"RTN","HMPDJ04",166,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ04",167,0)
 I $G(HMPMETA) D ADD^HMPMETA("visit",VST("uid"),VST("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ04",168,0)
 D ADD^HMPDJ("VST","visit")
"RTN","HMPDJ04",169,0)
 Q
"RTN","HMPDJ04",170,0)
 ;
"RTN","HMPDJ04",171,0)
CPT(VISIT) ; -- Return CPT code of encounter type
"RTN","HMPDJ04",172,0)
 ;DE2818 - Change to use API and not directly access the global
"RTN","HMPDJ04",173,0)
 N DA,Y S Y=""
"RTN","HMPDJ04",174,0)
 ;DE4198 - remove use of ^AUPNVCPT
"RTN","HMPDJ04",175,0)
 D ENCEVENT^PXKENC(VISIT,1)  ;ICR 1894
"RTN","HMPDJ04",176,0)
 S DA=0 F  S DA=$O(^TMP("PXKENC",$J,VISIT,"CPT",DA)) Q:DA<1  D  Q:$L(Y)
"RTN","HMPDJ04",177,0)
 . I +$G(^TMP("PXKENC",$J,VISIT,"CPT",DA,0))?1"992"2N S Y=+$G(^TMP("PXKENC",$J,VISIT,"CPT",DA,0))
"RTN","HMPDJ04",178,0)
 Q Y
"RTN","HMPDJ04",179,0)
 ;
"RTN","HMPDJ04",180,0)
POV(VISIT) ; -- return the primary Purpose of Visit as ICD^ProviderNarrative
"RTN","HMPDJ04",181,0)
 N DA,Y,X,X0,ICD S Y=""
"RTN","HMPDJ04",182,0)
 ;DE2818, ^AUPNVPOV( - ICR 3094
"RTN","HMPDJ04",183,0)
 S DA=0 F  S DA=$O(^AUPNVPOV("AD",VISIT,DA)) Q:DA<1  D  Q:$L(Y)
"RTN","HMPDJ04",184,0)
 . S X0=$G(^AUPNVPOV(DA,0)) Q:$P(X0,U,12)'="P"
"RTN","HMPDJ04",185,0)
 . S X=+$P(X0,U,4),ICD=$$ICD^HMPDVSIT(+X0)
"RTN","HMPDJ04",186,0)
 . S Y=ICD_U_$$EXTERNAL^DILFD(9000010.07,.04,,X)
"RTN","HMPDJ04",187,0)
 Q Y
"RTN","HMPDJ04",188,0)
 ;
"RTN","HMPDJ04",189,0)
PROV(ARR,I,IEN,ROLE,PRIM) ; -- add providers
"RTN","HMPDJ04",190,0)
 S @ARR@("providers",I,"providerUid")=$$SETUID^HMPUTILS("user",,+IEN)
"RTN","HMPDJ04",191,0)
 S @ARR@("providers",I,"providerName")=$$GET1^DIQ(200,(+IEN)_",",.01)  ;DE2818
"RTN","HMPDJ04",192,0)
 S @ARR@("providers",I,"role")=ROLE
"RTN","HMPDJ04",193,0)
 S:$G(PRIM) @ARR@("providers",I,"primary")="true"
"RTN","HMPDJ04",194,0)
 Q
"RTN","HMPDJ04",195,0)
 ;
"RTN","HMPDJ04",196,0)
NAME(IEN) ; -- Return a string 'name' for the visit
"RTN","HMPDJ04",197,0)
 N Y,X0,LOC,DATE
"RTN","HMPDJ04",198,0)
 S X0=$G(^AUPNVSIT(+$G(IEN),0)),Y=""  ;DE2818, ICR 2028
"RTN","HMPDJ04",199,0)
 S DATE=+X0,LOC=+$P(X0,U,22) S:LOC LOC=$$GET1^DIQ(44,LOC_",",.01)_" "  ;DE2818
"RTN","HMPDJ04",200,0)
 S Y=LOC_$$FMTE^XLFDT(DATE,"1D") ;Mon DD, YYYY
"RTN","HMPDJ04",201,0)
 Q Y
"RTN","HMPDJ04",202,0)
 ;
"RTN","HMPDJ04",203,0)
FAC(IEN)  ; -- Return Facility for the visit
"RTN","HMPDJ04",204,0)
 Q:'+$G(IEN) ""
"RTN","HMPDJ04",205,0)
 N FAC S FAC=+$$GET1^DIQ(9000010,IEN_",",.06,"I")
"RTN","HMPDJ04",206,0)
 Q:FAC $$STA^XUAF4(FAC)_U_$P($$NS^XUAF4(FAC),U)
"RTN","HMPDJ04",207,0)
 S FAC=+$$GET1^DIQ(9000010,IEN_",",.22,"I")
"RTN","HMPDJ04",208,0)
 Q $$FAC^HMPD(FAC)
"RTN","HMPDJ04",209,0)
 ;
"RTN","HMPDJ04",210,0)
STCODE(IEN)  ;  -- Return stop code information for the visit Q:'+$G(IEN) ""
"RTN","HMPDJ04",211,0)
 Q:'+$G(IEN) ""
"RTN","HMPDJ04",212,0)
 N STCODE,LIEN S STCODE=+$$GET1^DIQ(9000010,IEN_",",.08,"I")
"RTN","HMPDJ04",213,0)
 Q:STCODE $$AMIS^HMPDVSIT(STCODE)
"RTN","HMPDJ04",214,0)
 S LIEN=+$$GET1^DIQ(9000010,IEN_",",.22,"I")
"RTN","HMPDJ04",215,0)
 I LIEN S STCODE=+$$GET1^DIQ(44,LIEN_",",8,"I")
"RTN","HMPDJ04",216,0)
 Q:STCODE $$AMIS^HMPDVSIT(STCODE)
"RTN","HMPDJ04",217,0)
 Q ""
"RTN","HMPDJ04",218,0)
 ;
"RTN","HMPDJ04",219,0)
STOPCODE(X,Y)  ;  -- Return stop code info for JSON
"RTN","HMPDJ04",220,0)
 S @Y@("stopCodeUid")="urn:va:stop-code:"_$P(X,U)
"RTN","HMPDJ04",221,0)
 S @Y@("stopCodeName")=$P(X,U,2)
"RTN","HMPDJ04",222,0)
 Q
"RTN","HMPDJ04",223,0)
 ;
"RTN","HMPDJ04A")
0^41^B76733122
"RTN","HMPDJ04A",1,0)
HMPDJ04A ;ASMR/MKB,CPC,MBS - Admissions,PTF;July 20, 2017 10:53:17
"RTN","HMPDJ04A",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,4**;Sep 01, 2011;Build 13
"RTN","HMPDJ04A",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ04A",4,0)
 ;
"RTN","HMPDJ04A",5,0)
 ; External References          DBIA#
"RTN","HMPDJ04A",6,0)
 ; -------------------          -----
"RTN","HMPDJ04A",7,0)
 ; ^AUPNVSIT                     2028
"RTN","HMPDJ04A",8,0)
 ; ^DGPM                         1865
"RTN","HMPDJ04A",9,0)
 ; ^DIC(42                      10039
"RTN","HMPDJ04A",10,0)
 ; ^DPT                         10035
"RTN","HMPDJ04A",11,0)
 ; ^SC                          10040
"RTN","HMPDJ04A",12,0)
 ; ^VA(200                      10060
"RTN","HMPDJ04A",13,0)
 ; DGPTFAPI                      3157
"RTN","HMPDJ04A",14,0)
 ; DIC                           2051
"RTN","HMPDJ04A",15,0)
 ; DILFD                         2055
"RTN","HMPDJ04A",16,0)
 ; DIQ                           2056
"RTN","HMPDJ04A",17,0)
 ; ICDCODE                       3990
"RTN","HMPDJ04A",18,0)
 ; ICPTCOD                       1995
"RTN","HMPDJ04A",19,0)
 ; VADPT                        10061
"RTN","HMPDJ04A",20,0)
 ; XUAF4                         2171
"RTN","HMPDJ04A",21,0)
 ;
"RTN","HMPDJ04A",22,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ04A",23,0)
 ;
"RTN","HMPDJ04A",24,0)
 ; US18852       -  CPC  - Add discharge section
"RTN","HMPDJ04A",25,0)
 Q
"RTN","HMPDJ04A",26,0)
 ;
"RTN","HMPDJ04A",27,0)
DISCHARG(ID,DATE) ; --discharge notification ;US18852
"RTN","HMPDJ04A",28,0)
 N DISCHARG,VST,X0,X15,X,FAC,LOC,CATG,AMIS,INPT,DA,PS
"RTN","HMPDJ04A",29,0)
 D ADM(ID,"",1)
"RTN","HMPDJ04A",30,0)
 S DISCHARG("localId")=ID,DISCHARG("uid")=$$SETUID^HMPUTILS("discharge",DFN,ID)
"RTN","HMPDJ04A",31,0)
 S X=$$GET1^DIQ(2,DFN_",",.351,"I") S:X DISCHARG("deceased")="true"  ;(#.351) Date of death
"RTN","HMPDJ04A",32,0)
 D ADD^HMPDJ("DISCHARG","discharge")
"RTN","HMPDJ04A",33,0)
 Q
"RTN","HMPDJ04A",34,0)
ADM(ID,DATE,NOPOST) ; -- admission [from VSIT1]
"RTN","HMPDJ04A",35,0)
 N ADM,VADMVT,VAIP,VAERR,MVT,SPEC,HLOC,FAC,ICD,I,PRDX,SCNDX,CREDSTOP
"RTN","HMPDJ04A",36,0)
 S ID=$G(ID),DATE=+$G(DATE) Q:ID=""  ;Q:DATE<1
"RTN","HMPDJ04A",37,0)
 I ID S VAIP("D")=DATE,VST=+ID
"RTN","HMPDJ04A",38,0)
 I ID?1"H"1.N S VAIP("E")=+$E(ID,2,99),VST=0
"RTN","HMPDJ04A",39,0)
 D IN5^VADPT Q:'$G(VAIP(1))  ;deleted
"RTN","HMPDJ04A",40,0)
 S VADMVT=+$G(VAIP(13)),ID="H"_VADMVT
"RTN","HMPDJ04A",41,0)
 S ADM("localId")=ID,ADM("uid")=$$SETUID^HMPUTILS("visit",DFN,ID)
"RTN","HMPDJ04A",42,0)
 S:'DATE DATE=+$G(VAIP(13,1)) S:'VST VST=$$VISIT(DFN,DATE)
"RTN","HMPDJ04A",43,0)
 S (ADM("dateTime"),ADM("stay","arrivalDateTime"))=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ04A",44,0)
 S:$L($P(VAIP(6),U,2)) ADM("roomBed")=$P(VAIP(6),U,2)
"RTN","HMPDJ04A",45,0)
 ;DE2818, (#.105) CURRENT ADMISSION, changed ^DPT to FileMan, ICR 10035
"RTN","HMPDJ04A",46,0)
 S MVT=13,I=0 I VADMVT=$$GET1^DIQ(2,DFN_",",.105,"I") D  ;if current admission,
"RTN","HMPDJ04A",47,0)
 . S ADM("current")="true",MVT=14  ; use last movement info
"RTN","HMPDJ04A",48,0)
 . S X=$$GET1^DIQ(2,DFN_",",.101,"I") S:$L(X) ADM("roomBed")=X  ;(#.101) ROOM-BED, DE2818
"RTN","HMPDJ04A",49,0)
 . K HMPADMIT  ;kill flag from HMPDJ0
"RTN","HMPDJ04A",50,0)
 S SPEC=$G(VAIP(MVT,6)),ADM("specialty")=$P(SPEC,U,2)
"RTN","HMPDJ04A",51,0)
 S X=$$SERV^HMPDVSIT(+SPEC),ADM("service")=X
"RTN","HMPDJ04A",52,0)
 ;DE2818, changed from ^DIC(42) to FileMan, ICR 10039
"RTN","HMPDJ04A",53,0)
 S HLOC=+$$GET1^DIQ(42,+$G(VAIP(MVT,4))_",",44,"I"),FAC=$$FAC^HMPD(+HLOC) I HLOC D
"RTN","HMPDJ04A",54,0)
 . S ADM("locationUid")=$$SETUID^HMPUTILS("location",,+HLOC)
"RTN","HMPDJ04A",55,0)
 . ;DE2818 begin, changed ^SC to FileMan, ICR 10040
"RTN","HMPDJ04A",56,0)
 . S X=$$GET1^DIQ(44,HLOC_",",1) S:X]"" ADM("shortLocationName")=X  ;(#1) ABBREVIATION
"RTN","HMPDJ04A",57,0)
 . S ADM("locationName")=$$GET1^DIQ(44,HLOC_",",.01)  ;(#.01) NAME
"RTN","HMPDJ04A",58,0)
 . S X=$$AMIS^HMPDVSIT($$GET1^DIQ(44,HLOC_",",8,"I"))  ;(#8) STOP CODE NUMBER
"RTN","HMPDJ04A",59,0)
 . ;DE2818, end
"RTN","HMPDJ04A",60,0)
 . S:$L($G(X)) ADM("stopCodeUid")="urn:va:stop-code:"_$P(X,U),ADM("stopCodeName")=$P(X,U,2)
"RTN","HMPDJ04A",61,0)
 . S CREDSTOP=$$GET1^DIQ(44,HLOC_",",2503,"I")
"RTN","HMPDJ04A",62,0)
 . S:CREDSTOP CREDSTOP=$$AMIS^HMPDVSIT(CREDSTOP),ADM("creditStopCodeUid")="urn:va:stop-code:"_$P(CREDSTOP,U),ADM("creditStopCodeName")=$P(CREDSTOP,U,2)
"RTN","HMPDJ04A",63,0)
 . S ADM("summary")="${"_ADM("service")_"}:"_ADM("locationName")
"RTN","HMPDJ04A",64,0)
 D FACILITY^HMPUTILS(FAC,"ADM")
"RTN","HMPDJ04A",65,0)
 S ADM("categoryCode")="urn:va:encounter-category:AD",ADM("categoryName")="Admission"
"RTN","HMPDJ04A",66,0)
 S ADM("patientClassCode")="urn:va:patient-class:IMP",ADM("patientClassName")="Inpatient"
"RTN","HMPDJ04A",67,0)
 I $G(VAIP(17)) S ADM("stay","dischargeDateTime")=$$JSONDT^HMPUTILS(+$G(VAIP(17,1)))
"RTN","HMPDJ04A",68,0)
 I $G(VAIP(18)) S I=I+1 D PROV("ADM",I,+VAIP(18),"A")         ;attending
"RTN","HMPDJ04A",69,0)
 I $G(VAIP(MVT,5)) S I=I+1 D PROV("ADM",I,+VAIP(MVT,5),"P",1) ;primary
"RTN","HMPDJ04A",70,0)
 S ICD=$$POV^HMPDJ04(VST)
"RTN","HMPDJ04A",71,0)
 S PRDX=$$PTF^HMPDVSIT(DFN,VAIP(12),.SCNDX) ;PTF>ICD
"RTN","HMPDJ04A",72,0)
 I $P(PRDX,U)'="" S ADM("primaryDiagnosisCode")=$P(PRDX,U),ADM("primaryDiagnosis")=$P(PRDX,U,2)
"RTN","HMPDJ04A",73,0)
 I $O(SCNDX(0)) D
"RTN","HMPDJ04A",74,0)
 . N SDI
"RTN","HMPDJ04A",75,0)
 . S SDI=0 F  S SDI=$O(SCNDX(SDI)) Q:'SDI  S ADM("secondaryDiagnoses",SDI,"description")=$P(SCNDX(SDI),U,2),ADM("secondaryDiagnoses",SDI,"code")=$P(SCNDX(SDI),U)
"RTN","HMPDJ04A",76,0)
 S:'ICD ICD=PRDX
"RTN","HMPDJ04A",77,0)
 I $L(ICD)<2 S ADM("reasonName")=$G(VAIP(MVT,7))
"RTN","HMPDJ04A",78,0)
 E  S ADM("reasonUid")=$$SETNCS^HMPUTILS("icd",ICD),ADM("reasonName")=$P(ICD,U,2)
"RTN","HMPDJ04A",79,0)
 S X=$$CPT^HMPDJ04(VST),ADM("typeName")=$S(X:$P($$CPT^ICPTCOD(X),U,3),1:$$CATG^HMPDVSIT("H"))
"RTN","HMPDJ04A",80,0)
 D MVT(VADMVT)   ;sub-movements
"RTN","HMPDJ04A",81,0)
 ; TIU(VST,.ADM) ;notes/summary
"RTN","HMPDJ04A",82,0)
 ; Next 2 lines added for visits whose IDs start with an "H".  JD - 1/26/15
"RTN","HMPDJ04A",83,0)
 S ADM("lastUpdateTime")=$$EN^HMPSTMP("adm") ;RHL 20150102
"RTN","HMPDJ04A",84,0)
 S ADM("stampTime")=ADM("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ04A",85,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ04A",86,0)
 I $G(NOPOST) M DISCHARG=ADM Q  ;US18852
"RTN","HMPDJ04A",87,0)
 I $G(HMPMETA) D ADD^HMPMETA("visit",ADM("uid"),ADM("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ04A",88,0)
 D ADD^HMPDJ("ADM","visit")
"RTN","HMPDJ04A",89,0)
 Q
"RTN","HMPDJ04A",90,0)
 ;
"RTN","HMPDJ04A",91,0)
TIU(VISIT,ARR) ; -- add notes to ARR("document")
"RTN","HMPDJ04A",92,0)
 N X,Y,I,HMPX,LT,NT,DA,CNT,HMPY
"RTN","HMPDJ04A",93,0)
 D FIND^DIC(8925,,.01,"QX",+$G(VISIT),,"V",,,"HMPX")
"RTN","HMPDJ04A",94,0)
 S Y="",(I,CNT)=0
"RTN","HMPDJ04A",95,0)
 F  S I=$O(HMPX("DILIST",1,I)) Q:I<1  D
"RTN","HMPDJ04A",96,0)
 . S LT=$G(HMPX("DILIST","ID",I,.01)) Q:$P(LT," ")="Addendum"
"RTN","HMPDJ04A",97,0)
 . S DA=$G(HMPX("DILIST",2,I))
"RTN","HMPDJ04A",98,0)
 . S NT=$$GET1^DIQ(8925,+DA_",",".01:1501")
"RTN","HMPDJ04A",99,0)
 . S CNT=CNT+1,ARR("documents",CNT,"uid")=$$SETUID^HMPUTILS("document",DFN,+DA)
"RTN","HMPDJ04A",100,0)
 . S ARR("documents",CNT,"localTitle")=LT
"RTN","HMPDJ04A",101,0)
 . S:$L(NT) ARR("documents",CNT,"nationalTitle")=NT
"RTN","HMPDJ04A",102,0)
 Q
"RTN","HMPDJ04A",103,0)
 ;
"RTN","HMPDJ04A",104,0)
PROV(ARR,I,IEN,ROLE,PRIM) ; -- add providers
"RTN","HMPDJ04A",105,0)
 S @ARR@("providers",I,"providerUid")=$$SETUID^HMPUTILS("user",,+IEN)
"RTN","HMPDJ04A",106,0)
 S @ARR@("providers",I,"providerName")=$$GET1^DIQ(200,IEN_",",.01)  ;DE2818, changed ^VA(200) to FileMan ICR 10060
"RTN","HMPDJ04A",107,0)
 S @ARR@("providers",I,"role")=ROLE
"RTN","HMPDJ04A",108,0)
 S:$G(PRIM) @ARR@("providers",I,"primary")="true"
"RTN","HMPDJ04A",109,0)
 Q
"RTN","HMPDJ04A",110,0)
 ;
"RTN","HMPDJ04A",111,0)
MVT(CA) ; -- add movements to ADM("movement",i,"attribute")
"RTN","HMPDJ04A",112,0)
 N DATE,DA,CNT,X S (DATE,CNT)=0
"RTN","HMPDJ04A",113,0)
 ;DE2818, ^DGPM( - ICR 1865
"RTN","HMPDJ04A",114,0)
 F  S DATE=$O(^DGPM("APCA",DFN,CA,DATE)) Q:DATE<1  S DA=+$O(^(DATE,0)) I DA'=CA D
"RTN","HMPDJ04A",115,0)
 . S X0=$G(^DGPM(DA,0)),CNT=CNT+1
"RTN","HMPDJ04A",116,0)
 . S ADM("movements",CNT,"localId")=DA
"RTN","HMPDJ04A",117,0)
 . S ADM("movements",CNT,"dateTime")=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ04A",118,0)
 . S ADM("movements",CNT,"movementType")=$$EXTERNAL^DILFD(405,.02,,$P(X0,U,2))
"RTN","HMPDJ04A",119,0)
 . S ADM("movements",CNT,"movementSubType")=$$EXTERNAL^DILFD(405,.04,,$P(X0,U,4)) ;US18852
"RTN","HMPDJ04A",120,0)
 . S X=+$P(X0,U,5) I X D  ;US18852
"RTN","HMPDJ04A",121,0)
 ..  S ADM("movements",CNT,"transferFacilityName")=$$EXTERNAL^DILFD(405,.05,,X)
"RTN","HMPDJ04A",122,0)
 ..  s ADM("movements",CNT,"transferFacilityCode")=X
"RTN","HMPDJ04A",123,0)
 . S X=+$P(X0,U,19) I X D
"RTN","HMPDJ04A",124,0)
 .. S ADM("movements",CNT,"providerUid")=$$SETUID^HMPUTILS("user",,X)
"RTN","HMPDJ04A",125,0)
 .. S ADM("movements",CNT,"providerName")=$$GET1^DIQ(200,X_",",.01)  ;DE2818, changed ^VA(200) to FileMan ICR 10060
"RTN","HMPDJ04A",126,0)
 . S X=+$P(X0,U,9)
"RTN","HMPDJ04A",127,0)
 . S:X ADM("movements",CNT,"specialty")=$$EXTERNAL^DILFD(405,.09,,X)
"RTN","HMPDJ04A",128,0)
 . ;DE2818, changed ^DIC(42) to FileMan, ICR 10039
"RTN","HMPDJ04A",129,0)
 . S HLOC=+$$GET1^DIQ(42,+$P(X0,U,6)_",",44,"I"),FAC=$$FAC^HMPD(HLOC) I HLOC D
"RTN","HMPDJ04A",130,0)
 .. S ADM("movements",CNT,"locationUid")=$$SETUID^HMPUTILS("location",,HLOC)
"RTN","HMPDJ04A",131,0)
 .. ;DE2818, changed ^SC to FileMan, ICR 10040
"RTN","HMPDJ04A",132,0)
 .. S ADM("movements",CNT,"locationName")=$$GET1^DIQ(44,HLOC_",",.01)  ;(#.01) NAME
"RTN","HMPDJ04A",133,0)
 Q
"RTN","HMPDJ04A",134,0)
 ;
"RTN","HMPDJ04A",135,0)
PTFA(HMPLID) ; -- find ID in ^PXRMINDX(45) and call PTF1 if successful
"RTN","HMPDJ04A",136,0)
 ;Purpose - Build ^TMP("HMPPX") from ^PXRMINDX(45,HMPISYS,"PNI",DFN)
"RTN","HMPDJ04A",137,0)
 ;
"RTN","HMPDJ04A",138,0)
 ;Called by - PTF^HMPDJ0 (if HMPID is set)
"RTN","HMPDJ04A",139,0)
 ;
"RTN","HMPDJ04A",140,0)
 ;Assumptions -
"RTN","HMPDJ04A",141,0)
 ;1. ID is being passed and DFN variable exists
"RTN","HMPDJ04A",142,0)
 ;2. ^TMP("HMPPX") does not already exist
"RTN","HMPDJ04A",143,0)
 ;
"RTN","HMPDJ04A",144,0)
 ;              
"RTN","HMPDJ04A",145,0)
 ;Modification History -
"RTN","HMPDJ04A",146,0)
 ;US5630 (TW)  1. HMPISYS can be either "ICD" (ICD-9) or "10D" (ICD-10)
"RTN","HMPDJ04A",147,0)
 ;             2. Namespaced variables and enhanced newing
"RTN","HMPDJ04A",148,0)
 ; 
"RTN","HMPDJ04A",149,0)
 N HMPLEN,HMPTYP,HMPID,HMPISYS,HMPTYP,HMPDX,HMPDT,HMPITEM,HMPRDT,HMPX
"RTN","HMPDJ04A",150,0)
 S HMPLEN=$L(HMPLID,";"),HMPTYP=$P(HMPLID,";",HMPLEN),HMPID=$P(HMPLID,";",1,HMPLEN-1)
"RTN","HMPDJ04A",151,0)
 ; DE2818, ^PXRMINDX - ICR 4290
"RTN","HMPDJ04A",152,0)
 ;Get ICD System from ^PXRMINDX Xref and loop for remaining subscripts
"RTN","HMPDJ04A",153,0)
 S HMPISYS="" F  S HMPISYS=$O(^PXRMINDX(45,HMPISYS)) Q:HMPISYS=""  D
"RTN","HMPDJ04A",154,0)
 . I '$D(^PXRMINDX(45,HMPISYS,"PNI",+$G(DFN),HMPTYP)) Q
"RTN","HMPDJ04A",155,0)
 . S HMPDX="" F  S HMPDX=$O(^PXRMINDX(45,HMPISYS,"PNI",+$G(DFN),HMPTYP,HMPDX)) Q:HMPDX=""  D
"RTN","HMPDJ04A",156,0)
 .. S HMPDT=0  F  S HMPDT=$O(^PXRMINDX(45,HMPISYS,"PNI",+$G(DFN),HMPTYP,HMPDX,HMPDT)) Q:HMPDT=""  D
"RTN","HMPDJ04A",157,0)
 ... S HMPITEM=""  F  S HMPITEM=$O(^PXRMINDX(45,HMPISYS,"PNI",+$G(DFN),HMPTYP,HMPDX,HMPDT,HMPITEM)) Q:HMPITEM=""  D
"RTN","HMPDJ04A",158,0)
 .... I HMPITEM'[HMPID Q
"RTN","HMPDJ04A",159,0)
 .... S HMPRDT=9999999-HMPDT
"RTN","HMPDJ04A",160,0)
 .... S HMPX=HMPDX_U_HMPDT_U_HMPISYS
"RTN","HMPDJ04A",161,0)
 .... S ^TMP("HMPPX",$J,HMPRDT,HMPLID)=HMPX
"RTN","HMPDJ04A",162,0)
 Q:'$D(^TMP("HMPPX",$J))
"RTN","HMPDJ04A",163,0)
 D PTF1
"RTN","HMPDJ04A",164,0)
 K ^TMP("HMPPX",$J)
"RTN","HMPDJ04A",165,0)
 Q
"RTN","HMPDJ04A",166,0)
 ;
"RTN","HMPDJ04A",167,0)
PTF1 ; Set PTF data into PTF array
"RTN","HMPDJ04A",168,0)
 ;Purpose - Get data from ^TMP("HMPPX"), lookup addl PTF, set into PTF array and ^TMP
"RTN","HMPDJ04A",169,0)
 ;
"RTN","HMPDJ04A",170,0)
 ;Called by - PTFA^HMPDJ04A if HMPID is set, otherwise PTF^HMPDJ0
"RTN","HMPDJ04A",171,0)
 ;
"RTN","HMPDJ04A",172,0)
 ;Assumptions -
"RTN","HMPDJ04A",173,0)
 ;1. HMPLID (local ID) is being passed and DFN,HMPRDT variables exist
"RTN","HMPDJ04A",174,0)
 ;2. ^TMP("HMPPX",$J,HMPRDT,ID)=DxCode^[Discharge]Date exists
"RTN","HMPDJ04A",175,0)
 ;
"RTN","HMPDJ04A",176,0)
 ;Modification History -
"RTN","HMPDJ04A",177,0)
 ;US5630 (TW)- HMPISYS can be either "ICD9" or "10D" (ICD-10)
"RTN","HMPDJ04A",178,0)
 ;
"RTN","HMPDJ04A",179,0)
 N HMPTMP,PTF,HMPP,HMPTYP,HMPDIS,VAIN,HMPADM,VAINDT,HMPLOC,HMPFAC,HMPX,HMPISYS
"RTN","HMPDJ04A",180,0)
 S HMPTMP=$G(^TMP("HMPPX",$J,HMPRDT,HMPLID))
"RTN","HMPDJ04A",181,0)
 S PTF("localId")=HMPLID
"RTN","HMPDJ04A",182,0)
 S PTF("uid")=$$SETUID^HMPUTILS("ptf",DFN,HMPLID)
"RTN","HMPDJ04A",183,0)
 S HMPP=$L(HMPLID,";")
"RTN","HMPDJ04A",184,0)
 S HMPTYP=$P(HMPLID,";",HMPP)
"RTN","HMPDJ04A",185,0)
 I HMPTYP="DXLS" S PTF("principalDx")="true"  ; Is this the principal dx?
"RTN","HMPDJ04A",186,0)
 I $P(HMPTYP," ")="M" Q  ; Quit if movement dx
"RTN","HMPDJ04A",187,0)
 S HMPDIS=$P(HMPTMP,U,2)
"RTN","HMPDJ04A",188,0)
 I HMPDIS S VAINDT=HMPDIS-.0001
"RTN","HMPDJ04A",189,0)
 D INP^VADPT  ; Get inpatient VAIN array
"RTN","HMPDJ04A",190,0)
 I '$G(VAIN(1)) Q  ; Quit if not inpatient
"RTN","HMPDJ04A",191,0)
 ;US5630 - TW - Extract Calculated DRG for PTF
"RTN","HMPDJ04A",192,0)
 S PTF("drg")=$$GET1^DIQ(45,+HMPLID_",",9,"")
"RTN","HMPDJ04A",193,0)
 S PTF("admissionUid")=$$SETUID^HMPUTILS("visit",DFN,"H"_VAIN(1))
"RTN","HMPDJ04A",194,0)
 S HMPADM=+$G(VAIN(7))  ; Admission date
"RTN","HMPDJ04A",195,0)
 ;DE2818, changed from ^DIC(42) to FileMan, ICR 10039
"RTN","HMPDJ04A",196,0)
 S HMPLOC=+$$GET1^DIQ(42,+$G(VAIN(4))_",",44,"I")  ; Get location
"RTN","HMPDJ04A",197,0)
 S:HMPADM PTF("arrivalDateTime")=$$JSONDT^HMPUTILS(HMPADM)
"RTN","HMPDJ04A",198,0)
 S:HMPDIS PTF("dischargeDateTime")=$$JSONDT^HMPUTILS(HMPDIS)
"RTN","HMPDJ04A",199,0)
 S HMPFAC=$$FAC^HMPD(HMPLOC) D:HMPFAC FACILITY^HMPUTILS(HMPFAC,"PTF")
"RTN","HMPDJ04A",200,0)
 S PTF("lastUpdateTime")=$$EN^HMPSTMP("ptf") ;RHL 20150102
"RTN","HMPDJ04A",201,0)
 S PTF("stampTime")=PTF("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ04A",202,0)
 ;US5630 - TW - Check for ICD Coding System
"RTN","HMPDJ04A",203,0)
 S HMPDX=$P(HMPTMP,U)
"RTN","HMPDJ04A",204,0)
 S HMPISYS=$P(HMPTMP,U,3)
"RTN","HMPDJ04A",205,0)
 S HMPISYS=$S(HMPISYS="ICD":1,"ICP":2,"10D":30,"10P":31,1:1)  ; Identify ICD coding system for correct lookup
"RTN","HMPDJ04A",206,0)
 S HMPX=$$ICDDX^ICDEX(HMPDX,"",HMPISYS)
"RTN","HMPDJ04A",207,0)
 S PTF("icdCode")=$$SETNCS^HMPUTILS("icd",$P(HMPX,U,2))
"RTN","HMPDJ04A",208,0)
 S PTF("icdName")=$P(HMPX,U,4)
"RTN","HMPDJ04A",209,0)
  ;US6734 - pre-compile metastamp
"RTN","HMPDJ04A",210,0)
 I $G(HMPMETA) D ADD^HMPMETA("ptf",PTF("uid"),PTF("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ04A",211,0)
 D ADD^HMPDJ("PTF","ptf")
"RTN","HMPDJ04A",212,0)
 Q
"RTN","HMPDJ04A",213,0)
 ;
"RTN","HMPDJ04A",214,0)
VISIT(DFN,DATE) ; -- Return visit# for admission
"RTN","HMPDJ04A",215,0)
 N X,Y
"RTN","HMPDJ04A",216,0)
 S X=9999999-$P(DATE,".")_"."_$P(DATE,".",2)
"RTN","HMPDJ04A",217,0)
 S Y=+$O(^AUPNVSIT("AAH",DFN,X,0))  ;DE2818, ICR 2028
"RTN","HMPDJ04A",218,0)
 Q Y
"RTN","HMPDJ05")
0^39^B100445962
"RTN","HMPDJ05",1,0)
HMPDJ05 ;SLC/MKB,ASMR/RRB,CPC,AFS/BL,hrubovcak,CPC - Medications by order;Jul 18, 2016 15:12:10
"RTN","HMPDJ05",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,4**;Sep 01, 2011;Build 13
"RTN","HMPDJ05",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ05",4,0)
 ;
"RTN","HMPDJ05",5,0)
 ; External References: see HMPDJ05V for DBIA list
"RTN","HMPDJ05",6,0)
 ; ^OR(100) references - ICR 5771
"RTN","HMPDJ05",7,0)
 ;
"RTN","HMPDJ05",8,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ05",9,0)
 Q
"RTN","HMPDJ05",10,0)
 ;
"RTN","HMPDJ05",11,0)
PS1(ID) ; -- med order
"RTN","HMPDJ05",12,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ05",13,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ05",14,0)
 S ERRMSG="A problem occurred converting order "_ID_" for the medication domain"
"RTN","HMPDJ05",15,0)
 N ORPK,TYPE S ID=+$G(ID)
"RTN","HMPDJ05",16,0)
 S ORPK=$$PKGID^ORX8(ID),TYPE=$E(ORPK,$L(ORPK)) S:TYPE=+TYPE TYPE="R"
"RTN","HMPDJ05",17,0)
 ;
"RTN","HMPDJ05",18,0)
 N ORUPCHUK,ORVP,ORPCL,ORDUZ,ORODT,ORSTRT,ORSTOP,ORL,ORTO,ORSTS,ORNP,ORPV,ORTX
"RTN","HMPDJ05",19,0)
 N MED,CLS,OI,X,LOC,FAC,DRUG,DA,CNT,HMPESP
"RTN","HMPDJ05",20,0)
 S X=$S(ORPK:$E(ORPK,$L(ORPK)),1:"Z") S:X=+X X="R" ;last char = PS file
"RTN","HMPDJ05",21,0)
 S CLS=$S("RSN"[X:"O","UV"[X:"I",1:$$GET1^DIQ(100,ID_",",10,"I"))
"RTN","HMPDJ05",22,0)
 S MED("uid")=$$SETUID^HMPUTILS("med",DFN,ID)
"RTN","HMPDJ05",23,0)
 S MED("originatingPackage")=$$GET1^DIQ(100,ID_",",12,"E") ;DE5718
"RTN","HMPDJ05",24,0)
 S MED("orders",1,"orderUid")=$$SETUID^HMPUTILS("order",DFN,ID)
"RTN","HMPDJ05",25,0)
 D KIN(ID) ;DE5462 add parent/child structure
"RTN","HMPDJ05",26,0)
 S X=$$GET1^DIQ(100,ID_",",9,"I") S:X MED("orders",1,"predecessor")=$$SETUID^HMPUTILS("med",DFN,+X)
"RTN","HMPDJ05",27,0)
 S X=$$GET1^DIQ(100,ID_",",9.1,"I") S:X MED("orders",1,"successor")=$$SETUID^HMPUTILS("med",DFN,+X)
"RTN","HMPDJ05",28,0)
 S:ORPK MED("localId")=ORPK_";"_CLS
"RTN","HMPDJ05",29,0)
 D EN^ORX8(ID) S X="" F  S X=$O(ORUPCHUK(X)) Q:X=""  S:$D(ORUPCHUK(X))#2 @X=ORUPCHUK(X)
"RTN","HMPDJ05",30,0)
 S:$G(ORODT) MED("orders",1,"ordered")=$$JSONDT^HMPUTILS(ORODT)
"RTN","HMPDJ05",31,0)
 S:$G(ORNP) MED("orders",1,"providerUid")=$$SETUID^HMPUTILS("user",,+ORNP),MED("orders",1,"providerName")=$P(ORNP,U,2)
"RTN","HMPDJ05",32,0)
 S LOC=+$G(ORL),FAC=$$FAC^HMPD(LOC) I LOC D
"RTN","HMPDJ05",33,0)
 . S MED("orders",1,"locationUid")=$$SETUID^HMPUTILS("location",,LOC)
"RTN","HMPDJ05",34,0)
 . S MED("orders",1,"locationName")=$$GET1^DIQ(44,LOC_",",.01)  ;DE2818, ICR 10040
"RTN","HMPDJ05",35,0)
 D FACILITY^HMPUTILS(FAC,"MED")
"RTN","HMPDJ05",36,0)
 S:$G(ORSTRT) MED("overallStart")=$$JSONDT^HMPUTILS(ORSTRT)
"RTN","HMPDJ05",37,0)
 S:$G(ORSTOP) (MED("stopped"),MED("overallStop"))=$$JSONDT^HMPUTILS(ORSTOP)
"RTN","HMPDJ05",38,0)
 S MED("vaStatus")=$P($G(ORSTS),U,2)
"RTN","HMPDJ05",39,0)
 S MED("medStatusName")=$$STATUS^HMPDPSOR(+$G(ORSTS))
"RTN","HMPDJ05",40,0)
 S MED("medStatus")=$$MEDSTAT^HMPDJ05V(MED("medStatusName"))
"RTN","HMPDJ05",41,0)
 I CLS="I" D
"RTN","HMPDJ05",42,0)
 . S:$$GET1^DIQ(44,LOC_",",2802,"I") MED("IMO")="true"  ;DE2818, ICR 10040, (#2802) ADMINISTER INPATIENT MEDS? [25S]
"RTN","HMPDJ05",43,0)
 . S X=$$GET1^DIQ(100,ID_",",36) S:X MED("parent")=X  ;DE2818, ICR 5771, (#36) PARENT
"RTN","HMPDJ05",44,0)
 I ORPK D OEL^PSOORRL(DFN,ORPK_";"_CLS)
"RTN","HMPDJ05",45,0)
 S X=$S(ORPK["N":"N",1:CLS),MED("vaType")=X,MED("medType")=$$TYPE^HMPDJ05V(X)
"RTN","HMPDJ05",46,0)
 I CLS="O" S MED("type")=$S(ORPK["N":"OTC",1:"Prescription")
"RTN","HMPDJ05",47,0)
 S X=$G(HMPESP("COMMENT",1)) S:$L(X) MED("comment")=X
"RTN","HMPDJ05",48,0)
 I $$ISIV^HMPDJ05V G IV1^HMPDJ05V
"RTN","HMPDJ05",49,0)
 ;
"RTN","HMPDJ05",50,0)
A ; - Get order responses
"RTN","HMPDJ05",51,0)
 S OI=$$OI^ORX8(ID) I OI D
"RTN","HMPDJ05",52,0)
 . S X=$P(OI,U,2) S:$E(X,$L(X))=" " X=$E(X,1,$L(X)-1)
"RTN","HMPDJ05",53,0)
 . S MED("name")=X
"RTN","HMPDJ05",54,0)
 . D ZERO^PSS50P7(+$P(OI,U,3),,,"PSOI")
"RTN","HMPDJ05",55,0)
 . S MED("productFormName")=$P($G(^TMP($J,"PSOI",+$P(OI,U,3),.02)),U,2)
"RTN","HMPDJ05",56,0)
 . S:+$G(^TMP($J,"PSOI",+$P(OI,U,3),.09)) MED("supply")="true"
"RTN","HMPDJ05",57,0)
 D RESP^HMPDPSOR(ID,.HMPESP) ;order responses
"RTN","HMPDJ05",58,0)
 S DRUG=+$G(^TMP("PS",$J,"DD",1,0)) S:'DRUG DRUG=+$G(HMPESP("DRUG",1))
"RTN","HMPDJ05",59,0)
 S MED("sig")=$S(CLS="I":"Give: ",1:"")_$G(HMPESP("SIG",1)) ;ORTX(2)
"RTN","HMPDJ05",60,0)
 I CLS="O",'$L($G(HMPESP("SIG",1))),'$D(HMPESP("INSTR")) S MED("sig")=$G(HMPESP("COMMENT",1)) ;old Rx
"RTN","HMPDJ05",61,0)
 ;
"RTN","HMPDJ05",62,0)
B ; - Get dosages
"RTN","HMPDJ05",63,0)
 ;DE2818 begin, ^OR(100) references - ICR 5771
"RTN","HMPDJ05",64,0)
 I '$O(^OR(100,ID,2,0)) D  ;single dose or OP
"RTN","HMPDJ05",65,0)
 . N HMPY,START,STOP,DUR,CONJ,MIN
"RTN","HMPDJ05",66,0)
 . S START=$G(ORSTRT),STOP=$G(ORSTOP),MIN=0
"RTN","HMPDJ05",67,0)
 . S CNT=0 F  S CNT=$O(HMPESP("INSTR",CNT)) Q:CNT<1  D
"RTN","HMPDJ05",68,0)
 .. K HMPY D DOSE(.HMPY,CNT) M MED("dosages",CNT)=HMPY
"RTN","HMPDJ05",69,0)
 .. ;determine start & stop per dose
"RTN","HMPDJ05",70,0)
 .. S MED("dosages",CNT,"relativeStart")=MIN
"RTN","HMPDJ05",71,0)
 .. S DUR=$G(HMPY("complexDuration")),CONJ=$G(HMPY("complexConjunction"))
"RTN","HMPDJ05",72,0)
 .. S STOP=$S(DUR:$$STOP(START,DUR),1:STOP)
"RTN","HMPDJ05",73,0)
 .. S:START MED("dosages",CNT,"start")=$$JSONDT^HMPUTILS(START)
"RTN","HMPDJ05",74,0)
 .. S:STOP MED("dosages",CNT,"stop")=$$JSONDT^HMPUTILS(STOP)
"RTN","HMPDJ05",75,0)
 .. S X=$$RELTIME(START,STOP,DUR,MIN),MED("dosages",CNT,"relativeStop")=$S($E(X)=".":0_X,1:X)
"RTN","HMPDJ05",76,0)
 .. I $E(CONJ)="T",DUR S START=STOP,MIN=X
"RTN","HMPDJ05",77,0)
 I $O(^OR(100,ID,2,0)) D
"RTN","HMPDJ05",78,0)
 . N DD,CONJ,HMPY,MIN
"RTN","HMPDJ05",79,0)
 . M CONJ=HMPESP("CONJ"),DUR=HMPESP("DAYS") S MIN=0
"RTN","HMPDJ05",80,0)
 . S (DA,CNT)=0 F  S DA=$O(^OR(100,ID,2,DA)) Q:DA<1  D  ;child orders
"RTN","HMPDJ05",81,0)
 .. K HMPESP,HMPY D RESP^HMPDPSOR(DA,.HMPESP),DOSE(.HMPY,1)
"RTN","HMPDJ05",82,0)
 .. S CNT=CNT+1 M MED("dosages",CNT)=HMPY
"RTN","HMPDJ05",83,0)
 .. S MED("dosages",CNT,"relativeStart")=MIN
"RTN","HMPDJ05",84,0)
 .. S MED("dosages",CNT,"complexConjunction")=$G(CONJ(CNT))
"RTN","HMPDJ05",85,0)
 .. S MED("dosages",CNT,"complexDuration")=$G(DUR(CNT))
"RTN","HMPDJ05",86,0)
 .. S MED("dosages",CNT,"relatedOrder")=DA
"RTN","HMPDJ05",87,0)
 .. S X=$P($G(^OR(100,DA,0)),U,8,9)
"RTN","HMPDJ05",88,0)
 .. S:$P(X,U) MED("dosages",CNT,"start")=$$JSONDT^HMPUTILS($P(X,U))
"RTN","HMPDJ05",89,0)
 .. S:$P(X,U,2) MED("dosages",CNT,"stop")=$$JSONDT^HMPUTILS($P(X,U,2))
"RTN","HMPDJ05",90,0)
 .. I $P(X,U,2)>$G(ORSTOP) S ORSTOP=$P(X,U,2) ;get last stop time
"RTN","HMPDJ05",91,0)
 .. S X=$$RELTIME($P(X,U),$P(X,U,2),$G(DUR(CNT)),MIN)
"RTN","HMPDJ05",92,0)
 .. S MED("dosages",CNT,"relativeStop")=$S($E(X)=".":0_X,1:X) S:$G(CONJ(CNT))="T" MIN=X
"RTN","HMPDJ05",93,0)
 .. S:'DRUG DD=+$G(HMPESP("DRUG",1)),DD(DD,DA)="" ;dispense drug(s)
"RTN","HMPDJ05",94,0)
 .. ; get ^TMP("PS",$J) from 1st child, if Inpt parent:
"RTN","HMPDJ05",95,0)
 .. I '$D(^TMP("PS",$J)) S ORPK=$$PKGID^ORX8(DA) D OEL^PSOORRL(DFN,ORPK_";"_CLS)
"RTN","HMPDJ05",96,0)
 . S MED("stopped")=$$JSONDT^HMPUTILS($G(ORSTOP)) ;reset from last child order
"RTN","HMPDJ05",97,0)
 . S DD=$O(DD(0)) I DD,'$O(DD(DD)) S DRUG=DD Q    ;1 drug for order
"RTN","HMPDJ05",98,0)
 . S (DD,CNT)=0 F  S DD=$O(DD(DD)) Q:DD<1  S DA=0 F  S DA=$O(DD(DD,DA)) Q:DA<1  S CNT=CNT+1 D NDF(DD,CNT,DA)
"RTN","HMPDJ05",99,0)
 ;
"RTN","HMPDJ05",100,0)
 ;DE2818 end
"RTN","HMPDJ05",101,0)
C ; - Get OP data
"RTN","HMPDJ05",102,0)
 I CLS="O",ORPK'["N" D
"RTN","HMPDJ05",103,0)
 . S MED("orders",1,"quantityOrdered")=$G(HMPESP("QTY",1))
"RTN","HMPDJ05",104,0)
 . S MED("orders",1,"daysSupply")=$G(HMPESP("SUPPLY",1))
"RTN","HMPDJ05",105,0)
 . S MED("orders",1,"vaRouting")=$G(HMPESP("PICKUP",1))
"RTN","HMPDJ05",106,0)
 . S MED("orders",1,"fillsAllowed")=$G(HMPESP("REFILLS",1))
"RTN","HMPDJ05",107,0)
 . S MED("patientInstruction")=$G(HMPESP("PI",1))
"RTN","HMPDJ05",108,0)
 . Q:ORPK["P"!(ORPK["S")  ;pending
"RTN","HMPDJ05",109,0)
 . N HMP,RX0,RX1,FILL,RFD,MW,REL
"RTN","HMPDJ05",110,0)
 . K ^TMP("PSOR",$J) D EN^PSOORDER(DFN,+ORPK)
"RTN","HMPDJ05",111,0)
 . S RX0=$G(^TMP("PSOR",$J,+ORPK,0)),RX1=$G(^(1)),MED("orders",1,"prescriptionId")=$P(RX0,U,5)
"RTN","HMPDJ05",112,0)
 . I '$G(HMPESP("QTY",1)) S MED("orders",1,"quantityOrdered")=$P(RX0,U,6)
"RTN","HMPDJ05",113,0)
 . I '$G(HMPESP("SUPPLY",1)) S MED("orders",1,"daysSupply")=$P(RX0,U,7)
"RTN","HMPDJ05",114,0)
 . S MED("orders",1,"fillsRemaining")=$P(RX0,U,9),MED("lastFilled")=$$JSONDT^HMPUTILS($P(RX0,U,3))
"RTN","HMPDJ05",115,0)
 . S I=$P(RX0,U,2) I I S FILL(I)=I_"^^^"_$P(RX0,U,6,7)_"^^^"_$P(RX0,U,13)_"^^"_$P(RX1,U,6) ;original fill
"RTN","HMPDJ05",116,0)
 . S I=0 F  S I=$O(^TMP("PSOR",$J,+ORPK,"REF",I)) Q:I<1  S X=$G(^(I,0)),FILL(+X)=X
"RTN","HMPDJ05",117,0)
 . S I=0 F  S I=$O(^TMP("PSOR",$J,+ORPK,"RPAR",I)) Q:I<1  S X=$G(^(I,0)),$P(X,U,14)=1,FILL(+X)=X
"RTN","HMPDJ05",118,0)
 . S (I,RFD)=0 F  S RFD=$O(FILL(RFD)) Q:RFD<1  S X=$G(FILL(RFD)) D  ;sort 1st
"RTN","HMPDJ05",119,0)
 .. S I=I+1,MW=$P($P(X,U,10),";"),REL=$P($P(X,U,8),".")
"RTN","HMPDJ05",120,0)
 .. S MED("fills",I,"dispenseDate")=$$JSONDT^HMPUTILS($P(RFD,"."))
"RTN","HMPDJ05",121,0)
 .. S MED("fills",I,"releaseDate")=$$JSONDT^HMPUTILS(REL)
"RTN","HMPDJ05",122,0)
 .. S MED("fills",I,"routing")=MW
"RTN","HMPDJ05",123,0)
 .. S MED("fills",I,"quantityDispensed")=$P(X,U,4)
"RTN","HMPDJ05",124,0)
 .. S MED("fills",I,"daysSupplyDispensed")=$P(X,U,5)
"RTN","HMPDJ05",125,0)
 .. S:$P(X,U,14) MED("fills",I,"partial")=1 ;"true"
"RTN","HMPDJ05",126,0)
 . S X=$S($P(RX0,U,11):$P(RX0,U,11),$P(RX0,U,10):$P(RX0,U,10),1:0)
"RTN","HMPDJ05",127,0)
 . S:X MED("orders",1,"fillCost")=X
"RTN","HMPDJ05",128,0)
 . S X=$$GET1^PSODI(52,+ORPK_",",26,"I") S:X MED("overallStop")=$$JSONDT^HMPUTILS($P(X,U,2)) ;1^expirationDate
"RTN","HMPDJ05",129,0)
 . S X=$$GET1^PSODI(52,+ORPK_",",38.3,"I") S:X MED("prescriptionFinished")=$$JSONDT^HMPUTILS($P(X,U,2)) ;DE5723 1^date prescription finished
"RTN","HMPDJ05",130,0)
 I CLS="I" D
"RTN","HMPDJ05",131,0)
 . N MEDLOC
"RTN","HMPDJ05",132,0)
 . S X=$$GET1^DIQ(55.06,+ORPK_","_DFN_",",25,"I")
"RTN","HMPDJ05",133,0)
 . S:X MED("overallStop")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ05",134,0)
 . ;DE8371;BL remove the RET array to alleviate the <STORE> error. MEDLOC is returned as ^TMP value
"RTN","HMPDJ05",135,0)
 . S MEDLOC=""
"RTN","HMPDJ05",136,0)
 . D:$$PROD^XUPROD BCMA^HMPDJ05V(.MEDLOC,DFN,ORPK)  ;DE7678, get BCMA data only in production
"RTN","HMPDJ05",137,0)
 . Q:MEDLOC=""
"RTN","HMPDJ05",138,0)
 . M MED=@MEDLOC  ;DE8371;BL convert to med array.
"RTN","HMPDJ05",139,0)
 . K @MEDLOC,MEDLOC
"RTN","HMPDJ05",140,0)
 ;
"RTN","HMPDJ05",141,0)
PSQ ; finish
"RTN","HMPDJ05",142,0)
 D:DRUG NDF(+DRUG)
"RTN","HMPDJ05",143,0)
 S MED("qualifiedName")=$G(MED("name"))
"RTN","HMPDJ05",144,0)
 S X=+$P($G(^TMP("PS",$J,"RXN",0)),U,5)
"RTN","HMPDJ05",145,0)
 S:X MED("orders",1,"pharmacistUid")=$$SETUID^HMPUTILS("user",,X),MED("orders",1,"pharmacistName")=$$GET1^DIQ(200,X_",",.01)  ;DE2818, ICR 10035
"RTN","HMPDJ05",146,0)
 K ^TMP("PS",$J),^TMP($J,"PSOI"),^TMP("PSOR",$J)
"RTN","HMPDJ05",147,0)
 S MED("lastUpdateTime")=$$EN^HMPSTMP("med") ;RHL 20150102
"RTN","HMPDJ05",148,0)
 S MED("stampTime")=MED("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ05",149,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ05",150,0)
 I $G(HMPMETA) D ADD^HMPMETA("med",MED("uid"),MED("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ05",151,0)
 D ADD^HMPDJ("MED","med")
"RTN","HMPDJ05",152,0)
 Q
"RTN","HMPDJ05",153,0)
 ;
"RTN","HMPDJ05",154,0)
KIN(IFN) ; DE5462 - Add parents/children (kin) to order
"RTN","HMPDJ05",155,0)
 N HMPNOJS,HMPORKIN,I
"RTN","HMPDJ05",156,0)
 S HMPNOJS=1 D RELATED^HMPORRPC(.HMPORKIN,IFN)
"RTN","HMPDJ05",157,0)
 S:$D(@HMPORKIN@("parent")) MED("orders",1,"parentOrderUid")=$$SETUID^HMPUTILS("order",DFN,+@HMPORKIN@("parent"))
"RTN","HMPDJ05",158,0)
 S I="" F  S I=$O(@HMPORKIN@("children",I)) Q:I=""  D
"RTN","HMPDJ05",159,0)
 . S MED("orders",1,"childrenOrderUids",I)=$$SETUID^HMPUTILS("order",DFN,+@HMPORKIN@("children",I))
"RTN","HMPDJ05",160,0)
 Q
"RTN","HMPDJ05",161,0)
DOSE(Y,N) ; -- return dosage data from HMPESP(ID,N) to Y("name")
"RTN","HMPDJ05",162,0)
 N X,DOSE,DUR,CONJ S N=+$G(N,1) K Y
"RTN","HMPDJ05",163,0)
 S Y("instructions")=$G(HMPESP("INSTR",N))
"RTN","HMPDJ05",164,0)
 S DOSE=$G(HMPESP("DOSE",N)),X=$P(DOSE,"&",1,2)
"RTN","HMPDJ05",165,0)
 S:$L(X)>1 Y("dose")=$P(X,"&"),Y("units")=$P(X,"&",2)
"RTN","HMPDJ05",166,0)
 S X=$P(DOSE,"&",3,4) S:X Y("amount")=$P(X,"&"),Y("noun")=$P(X,"&",2)
"RTN","HMPDJ05",167,0)
 ; Y("dose")=$S($L(X)>2:$TR(X,"&"," "),1:$P(X,"&"))
"RTN","HMPDJ05",168,0)
 S X=+$G(HMPESP("ROUTE",N)) D ALL^PSS51P2(X,,,,"HMPTE")
"RTN","HMPDJ05",169,0)
 S Y("routeName")=$G(^TMP($J,"HMPTE",X,1))
"RTN","HMPDJ05",170,0)
 S X=$G(HMPESP("SCHEDULE",N)) I $L(X) S Y("scheduleName")=X D SCH^HMPDJ05V(X)
"RTN","HMPDJ05",171,0)
 S X=$G(HMPESP("ADMIN",N)) S:$L(X) Y("adminTimes")=X
"RTN","HMPDJ05",172,0)
 S X=$G(HMPESP("DAYS",N)) S:$L(X) Y("complexDuration")=X,DUR=X
"RTN","HMPDJ05",173,0)
 S X=$G(HMPESP("CONJ",N)) S:$L(X) Y("complexConjunction")=X,CONJ=X
"RTN","HMPDJ05",174,0)
 I $L($G(CONJ)),'$L($G(DUR)) D  ;look ahead to find duration
"RTN","HMPDJ05",175,0)
 . N I,D S I=$O(HMPESP("DAYS",N)),D=$S(I:$G(HMPESP("DAYS",I)),1:"")
"RTN","HMPDJ05",176,0)
 . S:$L(D) Y("complexDuration")=D
"RTN","HMPDJ05",177,0)
 K ^TMP($J,"HMPTE")
"RTN","HMPDJ05",178,0)
 Q
"RTN","HMPDJ05",179,0)
 ;
"RTN","HMPDJ05",180,0)
STOP(BEG,X) ; -- Return date after adding X to BEG
"RTN","HMPDJ05",181,0)
 N D,H,M,UNT,Y
"RTN","HMPDJ05",182,0)
 S Y=BEG,(D,H,M)=0,UNT=$P(X,+X,2),X=+X
"RTN","HMPDJ05",183,0)
 S UNT=$S($E(UNT)=" ":$E(UNT,2),1:$E(UNT)) I UNT="" S UNT="D"
"RTN","HMPDJ05",184,0)
 S:UNT="L" D=30*X
"RTN","HMPDJ05",185,0)
 S:UNT="W" D=7*X
"RTN","HMPDJ05",186,0)
 S:UNT="D" D=X
"RTN","HMPDJ05",187,0)
 S:UNT="H" H=X
"RTN","HMPDJ05",188,0)
 S:UNT="M" M=X
"RTN","HMPDJ05",189,0)
 S Y=$$FMADD^XLFDT(BEG,D,H,M)
"RTN","HMPDJ05",190,0)
 Q Y
"RTN","HMPDJ05",191,0)
 ;
"RTN","HMPDJ05",192,0)
NDF(DRUG,VPI,ORD) ; -- Set NDF data for dispense DRUG ien
"RTN","HMPDJ05",193,0)
 ; code ^ name ^ vuid [^ role ^ concentration ^ order]
"RTN","HMPDJ05",194,0)
 N LEN,HMPX,STR,VUID,X,I
"RTN","HMPDJ05",195,0)
 S DRUG=+$G(DRUG) Q:'DRUG
"RTN","HMPDJ05",196,0)
 D EN^PSSDI(50,,50,"901;902",DRUG,"HMPX")
"RTN","HMPDJ05",197,0)
 S STR=$S($G(HMPX(50,DRUG,901)):$G(HMPX(50,DRUG,901))_" "_$G(HMPX(50,DRUG,902)),1:"")
"RTN","HMPDJ05",198,0)
 D NDF^PSS50(DRUG,,,,,"NDF") S VPI=+$G(VPI,1)
"RTN","HMPDJ05",199,0)
 ;
"RTN","HMPDJ05",200,0)
 S MED("products",VPI,"ingredientRole")="urn:sct:410942007" ;Drug
"RTN","HMPDJ05",201,0)
 S:$G(ORD) MED("products",VPI,"relatedOrder")=ORD
"RTN","HMPDJ05",202,0)
 S:$G(STR) MED("products",VPI,"strength")=STR
"RTN","HMPDJ05",203,0)
 S X=$G(MED("name")) S:$L(X) MED("products",VPI,"ingredientName")=X
"RTN","HMPDJ05",204,0)
 ;
"RTN","HMPDJ05",205,0)
 S X=$G(^TMP($J,"NDF",DRUG,20)) ;VA Generic
"RTN","HMPDJ05",206,0)
 S MED("products",VPI,"ingredientCode")="urn:va:vuid:"_$$VUID^HMPD(+X,50.6)
"RTN","HMPDJ05",207,0)
 S MED("products",VPI,"ingredientCodeName")=$P(X,U,2)
"RTN","HMPDJ05",208,0)
 ;
"RTN","HMPDJ05",209,0)
 S X=$G(^TMP($J,"NDF",DRUG,22)) ;VA Product
"RTN","HMPDJ05",210,0)
 S MED("products",VPI,"suppliedCode")="urn:va:vuid:"_$$VUID^HMPD(+X,50.68)
"RTN","HMPDJ05",211,0)
 S MED("products",VPI,"suppliedName")=$P(X,U,2)
"RTN","HMPDJ05",212,0)
 ;
"RTN","HMPDJ05",213,0)
 S X=$G(^TMP($J,"NDF",DRUG,25)) ;VA Drug Class
"RTN","HMPDJ05",214,0)
 S MED("products",VPI,"drugClassCode")="urn:vadc:"_$P(X,U,2)
"RTN","HMPDJ05",215,0)
 S MED("products",VPI,"drugClassName")=$P(X,U,3)
"RTN","HMPDJ05",216,0)
 ;
"RTN","HMPDJ05",217,0)
 K ^TMP($J,"NDF")
"RTN","HMPDJ05",218,0)
 Q
"RTN","HMPDJ05",219,0)
 ;
"RTN","HMPDJ05",220,0)
RELTIME(START,STOP,DUR,MIN) ; -- Return #min for dose
"RTN","HMPDJ05",221,0)
 N Y S Y=0
"RTN","HMPDJ05",222,0)
 I START>0,STOP>0 S Y=$$FMDIFF^XLFDT(STOP,START,2)\60 I 1
"RTN","HMPDJ05",223,0)
 E  I DUR S Y=$$TOMIN(DUR) I 1
"RTN","HMPDJ05",224,0)
 E  S Y=$G(HMPESP("SUPPLY",1))*1440
"RTN","HMPDJ05",225,0)
 S Y=$S(Y:Y+MIN,1:MIN)
"RTN","HMPDJ05",226,0)
 Q Y
"RTN","HMPDJ05",227,0)
 ;
"RTN","HMPDJ05",228,0)
TOMIN(DUR) ;
"RTN","HMPDJ05",229,0)
 N RESULT,TIME,UNIT
"RTN","HMPDJ05",230,0)
 S UNIT=$$UP^XLFSTR($E($P(DUR," ",2)))
"RTN","HMPDJ05",231,0)
 I UNIT="" Q 0
"RTN","HMPDJ05",232,0)
 S TIME=$P(DUR," ")
"RTN","HMPDJ05",233,0)
 S RESULT=$S(UNIT="M":TIME,UNIT="H":TIME*60,UNIT="D":TIME*1440,UNIT="W":TIME*10080,UNIT="L":TIME*43200,1:0)
"RTN","HMPDJ05",234,0)
 Q RESULT
"RTN","HMPDJ05V")
0^28^B75151382
"RTN","HMPDJ05V",1,0)
HMPDJ05V ;SLC/MKB,ASMR/RRB,AFS/PB,BL,hrubovcak - IV/Infusions;Nov 09, 2015 15:40:35
"RTN","HMPDJ05V",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**4**;Sep 01, 2011;Build 13
"RTN","HMPDJ05V",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ05V",4,0)
 ;
"RTN","HMPDJ05V",5,0)
 ; External References          DBIA#
"RTN","HMPDJ05V",6,0)
 ; -------------------          -----
"RTN","HMPDJ05V",7,0)
 ; ^OR(100                       5771
"RTN","HMPDJ05V",8,0)
 ; ^ORD(100.98                    873
"RTN","HMPDJ05V",9,0)
 ; ^ORD(101.43                   2843
"RTN","HMPDJ05V",10,0)
 ; ^PSB(53.79                    5909
"RTN","HMPDJ05V",11,0)
 ; ^SC                          10040
"RTN","HMPDJ05V",12,0)
 ; ^VA(200                      10060
"RTN","HMPDJ05V",13,0)
 ; DIQ                           2056
"RTN","HMPDJ05V",14,0)
 ; ORQ1,^TMP("ORR"               3154
"RTN","HMPDJ05V",15,0)
 ; ORX8                     2467,3071
"RTN","HMPDJ05V",16,0)
 ; PSODI                         4858
"RTN","HMPDJ05V",17,0)
 ; PSOORDER,^TMP("PSOR"          1878
"RTN","HMPDJ05V",18,0)
 ; PSOORRL,^TMP("PS"             2400
"RTN","HMPDJ05V",19,0)
 ; PSS50                         4533
"RTN","HMPDJ05V",20,0)
 ; PSS50P7                       4662
"RTN","HMPDJ05V",21,0)
 ; PSS51P1                       4546
"RTN","HMPDJ05V",22,0)
 ; PSS51P2                       4548
"RTN","HMPDJ05V",23,0)
 ; PSS52P6                       4549
"RTN","HMPDJ05V",24,0)
 ; PSS52P7                       4550
"RTN","HMPDJ05V",25,0)
 ; PSSDI                         4551
"RTN","HMPDJ05V",26,0)
 ; XLFDT                        10103
"RTN","HMPDJ05V",27,0)
 ; XLFSTR                       10104
"RTN","HMPDJ05V",28,0)
 ;
"RTN","HMPDJ05V",29,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ05V",30,0)
 Q
"RTN","HMPDJ05V",31,0)
 ;
"RTN","HMPDJ05V",32,0)
ISIV() ; -- Return 1 or 0, if order is for IV/infusion
"RTN","HMPDJ05V",33,0)
 I ORPK["V" Q 1
"RTN","HMPDJ05V",34,0)
 I $P($G(ORTO),U,2)?1"IV".E Q 1
"RTN","HMPDJ05V",35,0)
 I +$G(ORPCL)=130 Q 1
"RTN","HMPDJ05V",36,0)
 I $G(^TMP("PS",$J,"B",0)) Q 1
"RTN","HMPDJ05V",37,0)
 Q 0
"RTN","HMPDJ05V",38,0)
 ;
"RTN","HMPDJ05V",39,0)
IV1 ; -- IV fluid, Infusion order [continued from HMPDJ05]
"RTN","HMPDJ05V",40,0)
 ; [Also expects ORPK, OEL^PSOORRL data]
"RTN","HMPDJ05V",41,0)
 N PS,PS0,X,X0,RTE,I,ADD,BASE
"RTN","HMPDJ05V",42,0)
 S MED("vaType")="V",MED("medType")="urn:sct:105903003"
"RTN","HMPDJ05V",43,0)
 S (ADD,BASE)=""
"RTN","HMPDJ05V",44,0)
 I ORPK,$D(^TMP("PS",$J)) D  G IVQ
"RTN","HMPDJ05V",45,0)
 . M PS=^TMP("PS",$J) S PS0=$G(PS(0)),MED("name")=$P(PS0,U)
"RTN","HMPDJ05V",46,0)
 . S X=$G(PS("MDR",1,0)) S:$L(X) MED("dosages",1,"routeName")=X
"RTN","HMPDJ05V",47,0)
 . S X=$P($G(PS("SCH",1,0)),U) I $L(X) D
"RTN","HMPDJ05V",48,0)
 .. S MED("dosages",1,"scheduleName")=X
"RTN","HMPDJ05V",49,0)
 .. N Y D SCH(X)
"RTN","HMPDJ05V",50,0)
 .. M MED("dosages",1)=Y
"RTN","HMPDJ05V",51,0)
 . S X=$G(PS("ADM",1,0)) S:$L(X) MED("dosages",1,"adminTimes")=X
"RTN","HMPDJ05V",52,0)
 . S X=$P(PS0,U,2) I X["INFUSE OVER" S MED("dosages",1,"duration")=X
"RTN","HMPDJ05V",53,0)
 . E  S MED("dosages",1,"ivRate")=X
"RTN","HMPDJ05V",54,0)
 . S X=$G(PS("IVLIM",0)) S:$L(X) MED("dosages",1,"restriction")=$$IVLIM(X)
"RTN","HMPDJ05V",55,0)
 . S X=+$P($G(PS("RXN",0)),U,5)
"RTN","HMPDJ05V",56,0)
 . S:X MED("orders",1,"pharmacistUid")=$$SETUID^HMPUTILS("user",,X),MED("orders",1,"pharmacistName")=$$GET1^DIQ(200,X_",",.01)  ;DE2818
"RTN","HMPDJ05V",57,0)
 . D IVP
"RTN","HMPDJ05V",58,0)
 ; no med in PS (pending or cancelled), so use Order values
"RTN","HMPDJ05V",59,0)
 S RTE=+$$VALUE^ORX8(ID,"ROUTE") I RTE D
"RTN","HMPDJ05V",60,0)
 . D ALL^PSS51P2(RTE,,,,"HMPTE")
"RTN","HMPDJ05V",61,0)
 . S MED("dosages",1,"routeName")=$G(^TMP($J,"HMPTE",RTE,1))
"RTN","HMPDJ05V",62,0)
 S X=$$VALUE^ORX8(ID,"SCHEDULE") I $L(X) D
"RTN","HMPDJ05V",63,0)
 . S MED("dosages",1,"scheduleName")=X
"RTN","HMPDJ05V",64,0)
 . N Y D SCH(X)
"RTN","HMPDJ05V",65,0)
 . M MED("dosages",1)=Y
"RTN","HMPDJ05V",66,0)
 S X=$$VALUE^ORX8(ID,"ADMIN") S:$L(X) MED("dosages",1,"adminTimes")=X
"RTN","HMPDJ05V",67,0)
 S X=$$VALUE^ORX8(ID,"RATE")
"RTN","HMPDJ05V",68,0)
 I X["INFUSE OVER" S MED("dosages",1,"duration")=X
"RTN","HMPDJ05V",69,0)
 E  S MED("dosages",1,"ivRate")=X
"RTN","HMPDJ05V",70,0)
 ;DE2818, ^OR(100) references - ICR 5771
"RTN","HMPDJ05V",71,0)
 S I=0 F  S I=$O(^OR(100,ID,.1,I)) Q:I<1  S X=+$G(^(I,0)) D
"RTN","HMPDJ05V",72,0)
 . S X0=$$GET1^DIQ(101.43,X_",",.01),MED("name")=$P(X0,U)  ;DE2818, ICR 2843
"RTN","HMPDJ05V",73,0)
 . S MED("products",I,"ingredientName")=$P(X0,U)
"RTN","HMPDJ05V",74,0)
 S X=$$VALUE^ORX8(ID,"DAYS") I $L(X) D  S MED("dosages",1,"restriction")=X
"RTN","HMPDJ05V",75,0)
 . I X?1.A1.N S X=$$IVLIM(X) Q
"RTN","HMPDJ05V",76,0)
 . ; CPRS format = "for a total of 3 doses" or "with total volume 100ml"
"RTN","HMPDJ05V",77,0)
 . F I=1:1:$L(X) I $E(X,I)=+$E(X,I) S X=$E(X,I,$L(X)) Q
"RTN","HMPDJ05V",78,0)
IVQ ; done
"RTN","HMPDJ05V",79,0)
 K ^TMP("PS",$J),^TMP($J,"HMPTE")
"RTN","HMPDJ05V",80,0)
 S MED("qualifiedName")=ADD_$S($L(ADD)&$L(BASE):" in ",1:"")_BASE
"RTN","HMPDJ05V",81,0)
 S MED("lastUpdateTime")=$$EN^HMPSTMP("med") ;RHL 20150102
"RTN","HMPDJ05V",82,0)
 S MED("stampTime")=MED("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ05V",83,0)
 D BCMA(.MED,DFN,ORPK)
"RTN","HMPDJ05V",84,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ05V",85,0)
 I $G(HMPMETA) D ADD^HMPMETA("med",MED("uid"),MED("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ05V",86,0)
 D ADD^HMPDJ("MED","med")
"RTN","HMPDJ05V",87,0)
 Q
"RTN","HMPDJ05V",88,0)
 ;
"RTN","HMPDJ05V",89,0)
IVP ; -- add IV products
"RTN","HMPDJ05V",90,0)
 ; [expects PS("A") & PS("B") data arrays from IV1]
"RTN","HMPDJ05V",91,0)
 N VPI,N,NAME,IEN,DRUG,OI,X S N=0
"RTN","HMPDJ05V",92,0)
 ; IV Additives
"RTN","HMPDJ05V",93,0)
 S VPI=0 F  S VPI=$O(PS("A",VPI)) Q:VPI<1  D
"RTN","HMPDJ05V",94,0)
 . K ^TMP($J,"HMPPSIV") S NAME=$P($G(PS("A",VPI,0)),U)
"RTN","HMPDJ05V",95,0)
 . D ZERO^PSS52P6("",NAME,"","HMPPSIV")
"RTN","HMPDJ05V",96,0)
 . S IEN=$O(^TMP($J,"HMPPSIV",0)),DRUG=+$G(^(IEN,1)) Q:IEN<1
"RTN","HMPDJ05V",97,0)
 . S OI=$G(^TMP($J,"HMPPSIV",IEN,15)) S:OI NAME=$$NAME(+OI)
"RTN","HMPDJ05V",98,0)
 . S N=N+1 D:DRUG NDF(DRUG,N,"A",NAME)
"RTN","HMPDJ05V",99,0)
 . S MED("products",N,"strength")=$P($G(PS("A",VPI,0)),U,2)
"RTN","HMPDJ05V",100,0)
 ; IV Base Solutions
"RTN","HMPDJ05V",101,0)
 S VPI=0 F  S VPI=$O(PS("B",VPI)) Q:VPI<1  D
"RTN","HMPDJ05V",102,0)
 . K ^TMP($J,"HMPPSIV") S NAME=$P($G(PS("B",VPI,0)),U)
"RTN","HMPDJ05V",103,0)
 . D ZERO^PSS52P7("",NAME,"","HMPPSIV")
"RTN","HMPDJ05V",104,0)
 . S IEN=$O(^TMP($J,"HMPPSIV",0)),DRUG=+$G(^(IEN,1)) Q:IEN<1
"RTN","HMPDJ05V",105,0)
 . S OI=$G(^TMP($J,"HMPPSIV",IEN,9)) S:OI NAME=$$NAME(+OI)
"RTN","HMPDJ05V",106,0)
 . S N=N+1 D:DRUG NDF(DRUG,N,"B",NAME)
"RTN","HMPDJ05V",107,0)
 . S MED("products",N,"volume")=$P($G(PS("B",VPI,0)),U,2)
"RTN","HMPDJ05V",108,0)
 K ^TMP($J,"HMPPSIV")
"RTN","HMPDJ05V",109,0)
 Q 
"RTN","HMPDJ05V",110,0)
 ;
"RTN","HMPDJ05V",111,0)
NAME(PSOI) ; -- return name_form of PS orderable item
"RTN","HMPDJ05V",112,0)
 N Y,HMPX S PSOI=+$G(PSOI),Y=""
"RTN","HMPDJ05V",113,0)
 D EN^PSSDI(50.7,,50.7,".01;.02",PSOI,"HMPX")
"RTN","HMPDJ05V",114,0)
 S:$D(HMPX) Y=$G(HMPX(50.7,PSOI,.01))_" "_$G(HMPX(50.7,PSOI,.02))
"RTN","HMPDJ05V",115,0)
 Q Y
"RTN","HMPDJ05V",116,0)
 ;
"RTN","HMPDJ05V",117,0)
NDF(DRUG,VPI,ROLE,OI) ; -- Set NDF data for dispense DRUG ien
"RTN","HMPDJ05V",118,0)
 ; code ^ name ^ vuid ^ role ^ concentration
"RTN","HMPDJ05V",119,0)
 N HMPX,VUID,X,I,CONC,NM
"RTN","HMPDJ05V",120,0)
 S DRUG=+$G(DRUG) Q:'DRUG
"RTN","HMPDJ05V",121,0)
 D NDF^PSS50(DRUG,,,,,"NDF")
"RTN","HMPDJ05V",122,0)
 S CONC=$P($G(PS(ROLE,VPI,0)),U,2),NM=""
"RTN","HMPDJ05V",123,0)
 ;
"RTN","HMPDJ05V",124,0)
 S MED("products",VPI,"ingredientRole")=$$ROLE(ROLE)
"RTN","HMPDJ05V",125,0)
 S OI=$G(OI) S:$L(OI) MED("products",VPI,"ingredientName")=OI,NM=OI
"RTN","HMPDJ05V",126,0)
 ; NM=X
"RTN","HMPDJ05V",127,0)
 ;
"RTN","HMPDJ05V",128,0)
 S X=$G(^TMP($J,"NDF",DRUG,20)) I X D  ;VA Generic
"RTN","HMPDJ05V",129,0)
 . S MED("products",VPI,"ingredientCode")="urn:va:vuid:"_$$VUID^HMPD(+X,50.6)
"RTN","HMPDJ05V",130,0)
 . S MED("products",VPI,"ingredientCodeName")=$P(X,U,2)
"RTN","HMPDJ05V",131,0)
 ;
"RTN","HMPDJ05V",132,0)
 S X=$G(^TMP($J,"NDF",DRUG,22)) I X D  ;VA Product
"RTN","HMPDJ05V",133,0)
 . S MED("products",VPI,"suppliedCode")="urn:va:vuid:"_$$VUID^HMPD(+X,50.68)
"RTN","HMPDJ05V",134,0)
 . S MED("products",VPI,"suppliedName")=$P(X,U,2)_" "_CONC
"RTN","HMPDJ05V",135,0)
 . S:NM="" NM=$P(X,U,2)
"RTN","HMPDJ05V",136,0)
 ;
"RTN","HMPDJ05V",137,0)
 S X=$G(^TMP($J,"NDF",DRUG,25)) I X D  ;VA Drug Class
"RTN","HMPDJ05V",138,0)
 . S MED("products",VPI,"drugClassCode")="urn:vadc:"_$P(X,U,2)
"RTN","HMPDJ05V",139,0)
 . S MED("products",VPI,"drugClassName")=$P(X,U,3)
"RTN","HMPDJ05V",140,0)
 . S:NM="" NM=$P(X,U,3)
"RTN","HMPDJ05V",141,0)
 ;
"RTN","HMPDJ05V",142,0)
 I $L(NM),ROLE="A" S ADD=ADD_$S($L(ADD):", ",1:"")_NM
"RTN","HMPDJ05V",143,0)
 I $L(NM),ROLE="B" S BASE=BASE_$S($L(BASE):", ",1:"")_NM
"RTN","HMPDJ05V",144,0)
 K ^TMP($J,"NDF",DRUG)
"RTN","HMPDJ05V",145,0)
 Q
"RTN","HMPDJ05V",146,0)
 ;
"RTN","HMPDJ05V",147,0)
IVLIM(X) ; -- Return expanded version of IV Limit X
"RTN","HMPDJ05V",148,0)
 I '$L($G(X)) Q ""
"RTN","HMPDJ05V",149,0)
 N Y,VAL,UNT,I
"RTN","HMPDJ05V",150,0)
 S Y="",X=$$UP^XLFSTR(X)
"RTN","HMPDJ05V",151,0)
 I X?1"DOSES".E S X="A"_$P(X,"DOSES",2)
"RTN","HMPDJ05V",152,0)
 S UNT=$E(X),VAL=0 F I=2:1:$L(X) I $E(X,I) S VAL=$E(X,I,$L(X)) Q
"RTN","HMPDJ05V",153,0)
 I UNT="A" S Y=+VAL_$S(+VAL>1:" doses",1:" dose")
"RTN","HMPDJ05V",154,0)
 I UNT="D" S Y=+VAL_$S(+VAL>1:" days",1:" day")
"RTN","HMPDJ05V",155,0)
 I UNT="H" S Y=+VAL_$S(+VAL>1:" hours",1:" hour")
"RTN","HMPDJ05V",156,0)
 I UNT="C" S Y=+VAL_" CC"
"RTN","HMPDJ05V",157,0)
 I UNT="M" S Y=+VAL_" ml"
"RTN","HMPDJ05V",158,0)
 I UNT="L" S Y=+VAL_" L"
"RTN","HMPDJ05V",159,0)
 Q Y
"RTN","HMPDJ05V",160,0)
 ;
"RTN","HMPDJ05V",161,0)
ROLE(X) ;
"RTN","HMPDJ05V",162,0)
 N RESULT,TXT,Y
"RTN","HMPDJ05V",163,0)
 S RESULT="",TXT="urn:sct:"
"RTN","HMPDJ05V",164,0)
 S RESULT=$S(X="A":TXT_"418804003",X="B":TXT_"418297009",1:TXT_"410942007")
"RTN","HMPDJ05V",165,0)
 Q RESULT
"RTN","HMPDJ05V",166,0)
 ;
"RTN","HMPDJ05V",167,0)
MEDSTAT(X) ;
"RTN","HMPDJ05V",168,0)
 N Y S Y="urn:sct:"
"RTN","HMPDJ05V",169,0)
 S Y=Y_$S(X="active":"55561003",X="historical":"392521001","hold":"421139008",1:"73425007")
"RTN","HMPDJ05V",170,0)
 Q Y
"RTN","HMPDJ05V",171,0)
 ;
"RTN","HMPDJ05V",172,0)
TYPE(VA) ;
"RTN","HMPDJ05V",173,0)
 N RESULT,TXT,Y
"RTN","HMPDJ05V",174,0)
 S RESULT="",TXT="urn:sct:"
"RTN","HMPDJ05V",175,0)
 S RESULT=$S(VA="N":TXT_"329505003",VA="O":TXT_"73639000",1:TXT_"105903003")
"RTN","HMPDJ05V",176,0)
 Q RESULT
"RTN","HMPDJ05V",177,0)
 ;
"RTN","HMPDJ05V",178,0)
SCH(NAME) ; -- Return other schedule info
"RTN","HMPDJ05V",179,0)
 N I K ^TMP($J,"HMPS")
"RTN","HMPDJ05V",180,0)
 I NAME?.E1" PRN" S NAME=$P(NAME," PRN") Q:NAME=""  ;strip off PRN for search
"RTN","HMPDJ05V",181,0)
 D ZERO^PSS51P1("",NAME,"PSJ",,"HMPS")
"RTN","HMPDJ05V",182,0)
 S I=+$O(^TMP($J,"HMPS","B",NAME,0)) Q:'I
"RTN","HMPDJ05V",183,0)
 S Y("scheduleFreq")=+$G(^TMP($J,"HMPS",I,2))
"RTN","HMPDJ05V",184,0)
 S Y("scheduleType")=$P($G(^TMP($J,"HMPS",I,5)),U,2)
"RTN","HMPDJ05V",185,0)
 K ^TMP($J,"HMPS")
"RTN","HMPDJ05V",186,0)
 Q
"RTN","HMPDJ05V",187,0)
 ;
"RTN","HMPDJ05V",188,0)
BCMA(RET,DFN,ORPK) ; -- administration times
"RTN","HMPDJ05V",189,0)
 Q:'$$PROD^XUPROD  ; DE7678, get BCMA data only in production
"RTN","HMPDJ05V",190,0)
 Q:$G(DFN)<1  Q:$G(ORPK)<1
"RTN","HMPDJ05V",191,0)
 N LAST,ADT,DA,CNT,X,Y,N,NODE,X0,DRUG,HMPDT
"RTN","HMPDJ05V",192,0)
 K ^TMP("HMPMED",$J)  ;DE8371;BL Kill off ^TMP node
"RTN","HMPDJ05V",193,0)
 ;DE2818 begin, ^PSB(53.79) references - ICR 5909
"RTN","HMPDJ05V",194,0)
 S LAST=$P($O(^PSB(53.79,"AORDX",DFN,ORPK,9999999),-1),".")
"RTN","HMPDJ05V",195,0)
 S ADT=$$FMADD^XLFDT(LAST,-90) ;return most recent 90 days
"RTN","HMPDJ05V",196,0)
 S CNT=0 F  S ADT=$O(^PSB(53.79,"AORDX",DFN,ORPK,ADT)) Q:ADT<1  D
"RTN","HMPDJ05V",197,0)
 . S DA=0 F  S DA=+$O(^PSB(53.79,"AORDX",DFN,ORPK,ADT,DA)) Q:DA<1  D
"RTN","HMPDJ05V",198,0)
 .. S X=$$GET1^DIQ(53.79,DA_",",.09) Q:X="REMOVED"  ;status
"RTN","HMPDJ05V",199,0)
 .. S Y("status")=X,Y("dateTime")=$$JSONDT^HMPUTILS(ADT)
"RTN","HMPDJ05V",200,0)
 .. S X=+$P($G(^PSB(53.79,DA,0)),U,7) I X D
"RTN","HMPDJ05V",201,0)
 ... S Y("administeredByUid")=$$SETUID^HMPUTILS("user",,X)
"RTN","HMPDJ05V",202,0)
 ... S Y("administeredByName")=$$GET1^DIQ(200,X_",",.01)  ;DE2818
"RTN","HMPDJ05V",203,0)
 .. S X=$P($G(^PSB(53.79,DA,.1)),U,6) S:$L(X) Y("injectionSite")=X
"RTN","HMPDJ05V",204,0)
 .. S X=$G(^PSB(53.79,DA,.2)) ;PRN
"RTN","HMPDJ05V",205,0)
 .. S:$L($P(X,U,1)) Y("prnReason")=$P(X,U)
"RTN","HMPDJ05V",206,0)
 .. S:$L($P(X,U,2)) Y("prnEffectiveness")=$P(X,U,2)
"RTN","HMPDJ05V",207,0)
 .. ; comments
"RTN","HMPDJ05V",208,0)
 .. S N=0 F  S N=$O(^PSB(53.79,DA,.3,N)) Q:N<1  S X=$G(^(N,0)) D
"RTN","HMPDJ05V",209,0)
 ... S Y("comment",N,"text")=$P(X,U)
"RTN","HMPDJ05V",210,0)
 ... S:$P(X,U,3) Y("comment",N,"dateTime")=$$JSONDT^HMPUTILS($P(X,U,3))
"RTN","HMPDJ05V",211,0)
 ... S X=+$P(X,U,2) Q:X<1
"RTN","HMPDJ05V",212,0)
 ... S Y("comment",N,"enteredByUid")=$$SETUID^HMPUTILS("user",,X)
"RTN","HMPDJ05V",213,0)
 ... S Y("comment",N,"enteredByName")=$$GET1^DIQ(200,X_",",.01)  ;DE2818
"RTN","HMPDJ05V",214,0)
 .. ; drugs administered
"RTN","HMPDJ05V",215,0)
 .. F NODE=.5,.6,.7 S N=0 F  S N=$O(^PSB(53.79,DA,NODE,N)) Q:N<1  S X0=$G(^(N,0)) D
"RTN","HMPDJ05V",216,0)
 ... S X=$P(X0,U,2)
"RTN","HMPDJ05V",217,0)
 ... I NODE=.5 S X=$G(DRUG(+X0)) S:X="" X=$$EXTERNAL^DILFD(53.795,.01,,+X0),DRUG(+X0)=X
"RTN","HMPDJ05V",218,0)
 ... S:$L(X) Y("medication",N,"name")=X
"RTN","HMPDJ05V",219,0)
 ... S X=$P(X0,U,3) S:$L(X) Y("medication",N,"amount")=X
"RTN","HMPDJ05V",220,0)
 ... S X=$P(X0,U,4) S:$L(X) Y("medication",N,"units")=X
"RTN","HMPDJ05V",221,0)
 .. ;BL;de8371; MED array and RET array causing store errors move to ^TMP
"RTN","HMPDJ05V",222,0)
 .. S CNT=CNT+1 M ^TMP("HMPMED",$J,"administrations",CNT)=Y
"RTN","HMPDJ05V",223,0)
 ;DE2818 end, ^PSB(53.79) references - ICR 5909
"RTN","HMPDJ05V",224,0)
 ; get next scheduled administration time
"RTN","HMPDJ05V",225,0)
 D:"VU"[$E($RE(ORPK)) ADMIN^PSBVPR(.HMPDT,DFN,ORPK) ; <<<< 12.3 - DE7891 - PB only get last admin time if IV or UD
"RTN","HMPDJ05V",226,0)
 ;DE8371;BL ensure all RET entires are stored in ^TMP return file location in RET
"RTN","HMPDJ05V",227,0)
 S:$G(HMPDT) ^TMP("HMPMED",$J,"nextAdminTime")=HMPDT
"RTN","HMPDJ05V",228,0)
 S RET="^TMP(""HMPMED"","_$J_")"
"RTN","HMPDJ05V",229,0)
 Q
"RTN","HMPDJ1")
0^45^B18444617
"RTN","HMPDJ1",1,0)
HMPDJ1 ;SLC/MKB,ASMR/RRB,CK,CPC - HMP Patient Object RPCs;May 15, 2016 14:15
"RTN","HMPDJ1",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,4**;May 15, 2016;Build 13
"RTN","HMPDJ1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ1",4,0)
 ;
"RTN","HMPDJ1",5,0)
 Q
"RTN","HMPDJ1",6,0)
 ;
"RTN","HMPDJ1",7,0)
PUT(HMP,PAT,TYPE,JSON) ; -- Save/update JSON OBJECT in ^HMP(800000.1), return UID if successful
"RTN","HMPDJ1",8,0)
 ; RPC = HMP PUT PATIENT DATA
"RTN","HMPDJ1",9,0)
 ;
"RTN","HMPDJ1",10,0)
 N ARRAY,CNT,ERR,HMPERR,UID,DA,X,I,DFN,HMPSYS
"RTN","HMPDJ1",11,0)
 ;M JSON=INPUT(0)
"RTN","HMPDJ1",12,0)
 D DECODE^HMPJSON("JSON","ARRAY","HMPERR")
"RTN","HMPDJ1",13,0)
 ;N XCNT S XCNT=$O(^XTMP("AGPARRAY",""),-1),XCNT=XCNT+1
"RTN","HMPDJ1",14,0)
 ;M ^XTMP("AGPARRAY",XCNT,"DATA")=ARRAY
"RTN","HMPDJ1",15,0)
 ;S ^XTMP("AGPARRAY",XCNT,"TYPE")=TYPE
"RTN","HMPDJ1",16,0)
 ;M ^XTMP("AGPARRAY")=ARRAY
"RTN","HMPDJ1",17,0)
 I $D(HMPERR) D  Q  ;S X=$G(ERR(1)) K ERR S ERR=X G PTQ
"RTN","HMPDJ1",18,0)
 . K ARRAY N HMPTMP,HMPTXT
"RTN","HMPDJ1",19,0)
 . S HMPTXT(1)="Problem decoding json input."
"RTN","HMPDJ1",20,0)
 . D SETERROR^HMPUTILS(.HMPTMP,.HMPERR,.HMPTXT,.JSON)
"RTN","HMPDJ1",21,0)
 . K HMPERR D ENCODE^HMPJSON("HMPTMP","ARRAY","HMPERR")
"RTN","HMPDJ1",22,0)
 . S HMP(.5)="{"_$$APIVERS^HMPDJFS()_",""error"":{"
"RTN","HMPDJ1",23,0)
 . M HMP(1)=ARRAY
"RTN","HMPDJ1",24,0)
 . S HMP(2)="}}"
"RTN","HMPDJ1",25,0)
 ;
"RTN","HMPDJ1",26,0)
 S UID=$G(ARRAY("uid")),HMPSYS=$$SYS^HMPUTILS
"RTN","HMPDJ1",27,0)
 I $L(UID) S DA=+$O(^HMP(800000.1,"B",UID,0)) I DA<1 S ERR=$$ERR(3,UID) G PTQ
"RTN","HMPDJ1",28,0)
 I '$L(UID) D  G:$D(ERR) PTQ Q:$D(HMPERR)
"RTN","HMPDJ1",29,0)
 . D NEW Q:$D(ERR)
"RTN","HMPDJ1",30,0)
 . S ARRAY("uid")=UID K JSON
"RTN","HMPDJ1",31,0)
 . D ENCODE^HMPJSON("ARRAY","JSON","HMPERR")
"RTN","HMPDJ1",32,0)
 . I $D(HMPERR) D  Q  ;S X=$G(ERR(1)) K ERR S ERR=X Q
"RTN","HMPDJ1",33,0)
 .. K JSON N HMPTMP,HMPTXT
"RTN","HMPDJ1",34,0)
 .. S HMPTXT(1)="Problem encoding json output."
"RTN","HMPDJ1",35,0)
 .. D SETERROR^HMPUTILS(.HMPTMP,.HMPERR,.HMPTXT,.ARRAY)
"RTN","HMPDJ1",36,0)
 .. K HMPERR D ENCODE^HMPJSON("HMPTMP","JSON","HMPERR")
"RTN","HMPDJ1",37,0)
 .. S HMP(.5)="{"_$$APIVERS^HMPDJFS()_",""error"":{"
"RTN","HMPDJ1",38,0)
 .. M HMP(1)=JSON
"RTN","HMPDJ1",39,0)
 .. S HMP(2)="}}"
"RTN","HMPDJ1",40,0)
 ;
"RTN","HMPDJ1",41,0)
 K ^HMP(800000.1,DA,1) S ^(1,0)="^800000.101^^",CNT=0
"RTN","HMPDJ1",42,0)
 S I="" F  S I=$O(JSON(I)) Q:I=""  S CNT=CNT+1,^HMP(800000.1,DA,1,CNT,0)=JSON(I)
"RTN","HMPDJ1",43,0)
 S:$G(CNT) ^HMP(800000.1,DA,1,0)="^800000.101^"_CNT_U_CNT
"RTN","HMPDJ1",44,0)
 ;
"RTN","HMPDJ1",45,0)
PTQ ; add item count and terminating characters
"RTN","HMPDJ1",46,0)
 I $D(ERR) S HMP="{"_$$APIVERS^HMPDJFS()_",""error"":{""message"":"""_ERR_"""},""success"":false}" Q
"RTN","HMPDJ1",47,0)
 S HMP="{"_$$APIVERS^HMPDJFS()_",""data"":{""updated"":"_""""_$$HL7NOW_""""_",""uid"":"""_UID_"""},""success"":true}"
"RTN","HMPDJ1",48,0)
 S DFN=+$P(UID,":",5)
"RTN","HMPDJ1",49,0)
 D POST^HMPEVNT(DFN,TYPE,DA) ;UID)
"RTN","HMPDJ1",50,0)
 Q
"RTN","HMPDJ1",51,0)
 ;
"RTN","HMPDJ1",52,0)
NEW ; -- create new entry in ^HMP(800000.1) from PAT,TYPE,HMPSYS
"RTN","HMPDJ1",53,0)
 ;  Return UID & DA, or ERR
"RTN","HMPDJ1",54,0)
 N DFN,ICN
"RTN","HMPDJ1",55,0)
 S DFN=+$G(PAT),ICN="",TYPE=$G(TYPE)
"RTN","HMPDJ1",56,0)
 I 'DFN,DFN[";" S ICN=+$P($G(DFN),";",2),DFN=+$G(DFN)
"RTN","HMPDJ1",57,0)
 I 'DFN,ICN S DFN=+$$GETDFN^MPIF001(ICN)
"RTN","HMPDJ1",58,0)
 I 'DFN!'$L($G(^DPT(DFN,0))) S ERR=$$ERR(1,DFN) Q  ; IA 10035, DE2818
"RTN","HMPDJ1",59,0)
 I TYPE="" S ERR=$$ERR(2,"null") Q
"RTN","HMPDJ1",60,0)
 ;
"RTN","HMPDJ1",61,0)
 S DA=$$NEXTIFN I DA<1 S ERR=$$ERR(4) Q
"RTN","HMPDJ1",62,0)
 S UID="urn:va:"_TYPE_":"_HMPSYS_":"_DFN_":"_DA
"RTN","HMPDJ1",63,0)
 S ^HMP(800000.1,DA,0)=UID_U_DFN_U_TYPE
"RTN","HMPDJ1",64,0)
 S ^HMP(800000.1,"B",UID,DA)=""
"RTN","HMPDJ1",65,0)
 S ^HMP(800000.1,"C",DFN,TYPE,DA)=""
"RTN","HMPDJ1",66,0)
 Q
"RTN","HMPDJ1",67,0)
 ;
"RTN","HMPDJ1",68,0)
NEXTIFN() ; -- Returns next available IFN
"RTN","HMPDJ1",69,0)
 N I,HDR,TOTAL,DA
"RTN","HMPDJ1",70,0)
 L +^HMP(800000.1,0):$S($G(DILOCKTM)>0:DILOCKTM,1:5)
"RTN","HMPDJ1",71,0)
 I '$T Q "^"
"RTN","HMPDJ1",72,0)
 S HDR=$G(^HMP(800000.1,0)),TOTAL=+$P(HDR,U,4),I=$O(^HMP(800000.1,"?"),-1)
"RTN","HMPDJ1",73,0)
 F I=(I+1):1 Q:'$D(^HMP(800000.1,I,0))
"RTN","HMPDJ1",74,0)
 S DA=I,$P(HDR,U,3,4)=DA_U_(TOTAL+1) S ^HMP(800000.1,0)=HDR
"RTN","HMPDJ1",75,0)
 L -^HMP(800000.1,0)
"RTN","HMPDJ1",76,0)
 Q DA
"RTN","HMPDJ1",77,0)
 ;
"RTN","HMPDJ1",78,0)
ERR(X,VAL) ; -- return error message
"RTN","HMPDJ1",79,0)
 N MSG  S MSG="Error"
"RTN","HMPDJ1",80,0)
 I X=1  S MSG="Patient with dfn '"_$G(VAL)_"' not found"
"RTN","HMPDJ1",81,0)
 I X=2  S MSG="Domain type '"_$G(VAL)_"' not recognized"
"RTN","HMPDJ1",82,0)
 I X=3  S MSG="UID '"_$G(VAL)_"' not found"
"RTN","HMPDJ1",83,0)
 I X=4  S MSG="Unable to create new object"
"RTN","HMPDJ1",84,0)
 I X=99 S MSG="Unknown request"
"RTN","HMPDJ1",85,0)
 Q MSG
"RTN","HMPDJ1",86,0)
 ;
"RTN","HMPDJ1",87,0)
HL7NOW() ; -- Return current time in HL7 format
"RTN","HMPDJ1",88,0)
 Q $$FMTHL7^HMPSTMP($$NOW^XLFDT)  ; DE5016
"RTN","HMPDJ1",89,0)
 ;
"RTN","HMPDJ1",90,0)
CONV ; -- convert uid format
"RTN","HMPDJ1",91,0)
 N DA,X0,UID,HMPSYS,DFN,COLL,NEW,I,JSON,HMPY,ERR,CNT
"RTN","HMPDJ1",92,0)
 S HMPSYS=$$SYS^HMPUTILS
"RTN","HMPDJ1",93,0)
 S DA=0 F  S DA=$O(^HMP(800000.1,DA)) Q:DA<1  D
"RTN","HMPDJ1",94,0)
 . S X0=$G(^HMP(800000.1,DA,0)),UID=$P(X0,U)
"RTN","HMPDJ1",95,0)
 . K ^HMP(800000.1,"B",UID,DA),JSON
"RTN","HMPDJ1",96,0)
 . S DFN=$P(X0,"^",2),COLL=$P(X0,"^",3)
"RTN","HMPDJ1",97,0)
 . S NEW="urn:va:"_COLL_":"_HMPSYS_":"_DFN_":"_DA
"RTN","HMPDJ1",98,0)
 . S $P(^HMP(800000.1,DA,0),U)=NEW,^HMP(800000.1,"B",NEW,DA)=""
"RTN","HMPDJ1",99,0)
 . ;decode JSON object, reset uid
"RTN","HMPDJ1",100,0)
 . S I=0 F  S I=$O(^HMP(800000.1,DA,1,I)) Q:I<1  S JSON(I)=$G(^(I,0))
"RTN","HMPDJ1",101,0)
 . Q:'$D(JSON)  K HMPY,ERR
"RTN","HMPDJ1",102,0)
 . D DECODE^HMPJSON("JSON","HMPY","ERR") I $D(ERR) W !,DA Q
"RTN","HMPDJ1",103,0)
 . S HMPY("uid")=NEW K JSON
"RTN","HMPDJ1",104,0)
 . D ENCODE^HMPJSON("HMPY","JSON","ERR") I $D(ERR) W !,DA Q
"RTN","HMPDJ1",105,0)
 . K ^HMP(800000.1,DA,1) S ^(1,0)="^800000.101^^",CNT=0
"RTN","HMPDJ1",106,0)
 . S I="" F  S I=$O(JSON(I)) Q:I=""  S CNT=CNT+1,^HMP(800000.1,DA,1,CNT,0)=JSON(I)
"RTN","HMPDJ1",107,0)
 . S:$G(CNT) ^HMP(800000.1,DA,1,0)="^800000.101^"_CNT_U_CNT
"RTN","HMPDJ1",108,0)
 Q
"RTN","HMPDJ2")
0^46^B21349653
"RTN","HMPDJ2",1,0)
HMPDJ2 ;SLC/MKB,ASMR/RRB,CK,CPC - HMP Object RPCs;May 15, 2016 14:15
"RTN","HMPDJ2",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,4**;May 15, 2016;Build 13
"RTN","HMPDJ2",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ2",4,0)
 ;
"RTN","HMPDJ2",5,0)
 Q
"RTN","HMPDJ2",6,0)
 ;
"RTN","HMPDJ2",7,0)
GET(HMP,FILTER) ; -- Return search results as JSON in @HMP@(n)
"RTN","HMPDJ2",8,0)
 ; RPC = HMP GET OBJECT
"RTN","HMPDJ2",9,0)
 N TYPE,HMPMAX,HMPI,HMPID,HMPERR,IEN
"RTN","HMPDJ2",10,0)
 S HMP=$NA(^TMP("HMP",$J)),HMPI=0 K @HMP
"RTN","HMPDJ2",11,0)
 ;
"RTN","HMPDJ2",12,0)
 ; parse & validate input parameters
"RTN","HMPDJ2",13,0)
 S TYPE=$G(FILTER("collection")),TYPE=$$LOW^XLFSTR(TYPE)
"RTN","HMPDJ2",14,0)
 S HMPMAX=+$G(FILTER("max"),9999) ;??
"RTN","HMPDJ2",15,0)
 S HMPID=$G(FILTER("id"))
"RTN","HMPDJ2",16,0)
 ;
"RTN","HMPDJ2",17,0)
 ;set error trap
"RTN","HMPDJ2",18,0)
 N $ES,$ET,ERRARRY,ERRDOM,ERRPAT,ERRMSG
"RTN","HMPDJ2",19,0)
 ;S $ET="D ERRHDLR^HMPDERRH G ERRQ^HMPDJ0"
"RTN","HMPDJ2",20,0)
 S ERRDOM="hmp",ERRMSG=$G(TYPE)
"RTN","HMPDJ2",21,0)
 K ^TMP($J,"HMP ERROR")
"RTN","HMPDJ2",22,0)
 ;
"RTN","HMPDJ2",23,0)
 ; extract data
"RTN","HMPDJ2",24,0)
 I $L(HMPID) D  G GQ
"RTN","HMPDJ2",25,0)
 . S IEN=+HMPID I 'IEN S IEN=+$O(^HMP(800000.11,"B",HMPID,0)) ;IEN or UID
"RTN","HMPDJ2",26,0)
 . D:IEN HMP1^HMPDJ02(800000.11,IEN)
"RTN","HMPDJ2",27,0)
 I TYPE="" S HMPERR="Missing or invalid collection type" G GQ
"RTN","HMPDJ2",28,0)
 S IEN=0 F  S IEN=$O(^HMP(800000.11,"C",TYPE,IEN)) Q:IEN<1  D HMP1^HMPDJ02(800000.11,IEN)
"RTN","HMPDJ2",29,0)
 ;
"RTN","HMPDJ2",30,0)
GQ ;build return JSON
"RTN","HMPDJ2",31,0)
 D GTQ^HMPDJ
"RTN","HMPDJ2",32,0)
 Q
"RTN","HMPDJ2",33,0)
 ;
"RTN","HMPDJ2",34,0)
DEL(HMP,HMPID) ; -- Delete object HMPID from ^HMP(800000.11)
"RTN","HMPDJ2",35,0)
 ; RPC = HMP DELETE OBJECT
"RTN","HMPDJ2",36,0)
 ;
"RTN","HMPDJ2",37,0)
 N ACTION,ERR,UID,DA,DIK,TYPE
"RTN","HMPDJ2",38,0)
 S UID=$G(HMPID) I '$L(UID) S ERR=$$ERR(3,"null") G PTQ
"RTN","HMPDJ2",39,0)
 S DA=+$O(^HMP(800000.11,"B",UID,0)) I DA<1 S ERR=$$ERR(3,UID) G PTQ
"RTN","HMPDJ2",40,0)
 S DIK="^HMP(800000.11," D ^DIK
"RTN","HMPDJ2",41,0)
 S ACTION="@",TYPE=$P(UID,":",3)
"RTN","HMPDJ2",42,0)
 G PTQ
"RTN","HMPDJ2",43,0)
 Q
"RTN","HMPDJ2",44,0)
 ;
"RTN","HMPDJ2",45,0)
PUT(HMP,TYPE,JSON) ; -- Save/update JSON OBJECT in ^HMP(800000.11), return UID if successful
"RTN","HMPDJ2",46,0)
 ; RPC = HMP PUT OBJECT
"RTN","HMPDJ2",47,0)
 ;
"RTN","HMPDJ2",48,0)
 N ACTION,ARRAY,CNT,ERR,HMPERR,UID,DA,X,I,HMPSYS
"RTN","HMPDJ2",49,0)
 D DECODE^HMPJSON("JSON","ARRAY","HMPERR")
"RTN","HMPDJ2",50,0)
 ;N XCNT S XCNT=$O(^XTMP("AGPARRAY",""),-1),XCNT=XCNT+1
"RTN","HMPDJ2",51,0)
 ;M ^XTMP("AGPARRAY",XCNT,"DATA")=ARRAY
"RTN","HMPDJ2",52,0)
 ;S ^XTMP("AGPARRAY",XCNT,"TYPE")=TYPE
"RTN","HMPDJ2",53,0)
 I $D(HMPERR) D  Q  ;S X=$G(ERR(1)) K ERR S ERR=X G PTQ
"RTN","HMPDJ2",54,0)
 . K ARRAY N HMPTMP,HMPTXT
"RTN","HMPDJ2",55,0)
 . S HMPTXT(1)="Problem decoding json input."
"RTN","HMPDJ2",56,0)
 . D SETERROR^HMPUTILS(.HMPTMP,.HMPERR,.HMPTXT,.JSON)
"RTN","HMPDJ2",57,0)
 . K HMPERR D ENCODE^HMPJSON("HMPTMP","ARRAY","HMPERR")
"RTN","HMPDJ2",58,0)
 . S HMP(.5)="{"_$$APIVERS^HMPDJFS()_",""error"":{"
"RTN","HMPDJ2",59,0)
 . M HMP(1)=ARRAY
"RTN","HMPDJ2",60,0)
 . S HMP(2)="}}"
"RTN","HMPDJ2",61,0)
 ;
"RTN","HMPDJ2",62,0)
 S UID=$G(ARRAY("uid")),HMPSYS=$$SYS^HMPUTILS
"RTN","HMPDJ2",63,0)
 I $L(UID) S DA=+$O(^HMP(800000.11,"B",UID,0)) I DA<1 S ERR=$$ERR(3,UID) G PTQ
"RTN","HMPDJ2",64,0)
 ;I $L(UID) S DA=+$O(^HMP(800000.11,"B",UID,0)) I DA<1 D NEW1(UID)
"RTN","HMPDJ2",65,0)
 I '$L(UID) D  G:$D(ERR) PTQ Q:$D(HMPERR)
"RTN","HMPDJ2",66,0)
 . D NEW Q:$D(ERR)
"RTN","HMPDJ2",67,0)
 . S ARRAY("uid")=UID K JSON
"RTN","HMPDJ2",68,0)
 . D ENCODE^HMPJSON("ARRAY","JSON","HMPERR")
"RTN","HMPDJ2",69,0)
 . I $D(HMPERR) D  Q  ;S X=$G(ERR(1)) K ERR S ERR=X Q
"RTN","HMPDJ2",70,0)
 .. K JSON N HMPTMP,HMPTXT
"RTN","HMPDJ2",71,0)
 .. S HMPTXT(1)="Problem encoding json output."
"RTN","HMPDJ2",72,0)
 .. D SETERROR^HMPUTILS(.HMPTMP,.HMPERR,.HMPTXT,.ARRAY)
"RTN","HMPDJ2",73,0)
 .. K HMPERR D ENCODE^HMPJSON("HMPTMP","JSON","HMPERR")
"RTN","HMPDJ2",74,0)
 .. S HMP(.5)="{"_$$APIVERS^HMPDJFS()_",""error"":{"
"RTN","HMPDJ2",75,0)
 .. M HMP(1)=JSON
"RTN","HMPDJ2",76,0)
 .. S HMP(2)="}}"
"RTN","HMPDJ2",77,0)
 ;
"RTN","HMPDJ2",78,0)
 K ^HMP(800000.11,DA,1) S ^(1,0)="^800000.111^^",CNT=0
"RTN","HMPDJ2",79,0)
 S I="" F  S I=$O(JSON(I)) Q:I=""  S CNT=CNT+1,^HMP(800000.11,DA,1,CNT,0)=JSON(I)
"RTN","HMPDJ2",80,0)
 S:$G(CNT) ^HMP(800000.11,DA,1,0)="^800000.111^"_CNT_U_CNT
"RTN","HMPDJ2",81,0)
 ;
"RTN","HMPDJ2",82,0)
PTQ ; add item count and terminating characters
"RTN","HMPDJ2",83,0)
 I $D(ERR) S HMP="{"_$$APIVERS^HMPDJFS()_",""error"":{""message"":"""_ERR_"""},""success"":false}" Q
"RTN","HMPDJ2",84,0)
 S HMP="{"_$$APIVERS^HMPDJFS()_",""data"":{""updated"":"_""""_$$HL7NOW_""""_",""uid"":"""_UID_"""},""success"":true}"
"RTN","HMPDJ2",85,0)
 D POSTX^HMPEVNT(TYPE,DA,$G(ACTION)) ;UID)
"RTN","HMPDJ2",86,0)
 Q
"RTN","HMPDJ2",87,0)
 ;
"RTN","HMPDJ2",88,0)
NEW1(UID) ; -- create new entry in ^HMP(800000.11) from PAT,TYPE,HMPSYS
"RTN","HMPDJ2",89,0)
 ;  Return UID & DA, or ERR
"RTN","HMPDJ2",90,0)
 S TYPE=$G(TYPE)
"RTN","HMPDJ2",91,0)
 I TYPE="" S ERR=$$ERR(2,"null") Q
"RTN","HMPDJ2",92,0)
 ;
"RTN","HMPDJ2",93,0)
 S DA=$$NEXTIFN I DA<1 S ERR=$$ERR(4) Q
"RTN","HMPDJ2",94,0)
 S UID="urn:va:"_TYPE_":"_HMPSYS_":"_DA
"RTN","HMPDJ2",95,0)
 S ^HMP(800000.11,DA,0)=UID_U_U_TYPE
"RTN","HMPDJ2",96,0)
 S ^HMP(800000.11,"B",UID,DA)=""
"RTN","HMPDJ2",97,0)
 S ^HMP(800000.11,"C",TYPE,DA)=""
"RTN","HMPDJ2",98,0)
 Q
"RTN","HMPDJ2",99,0)
 ;
"RTN","HMPDJ2",100,0)
NEW ; -- create new entry in ^HMP(800000.11) from PAT,TYPE,HMPSYS
"RTN","HMPDJ2",101,0)
 ;  Return UID & DA, or ERR
"RTN","HMPDJ2",102,0)
 S TYPE=$G(TYPE)
"RTN","HMPDJ2",103,0)
 I TYPE="" S ERR=$$ERR(2,"null") Q
"RTN","HMPDJ2",104,0)
 ;
"RTN","HMPDJ2",105,0)
 S DA=$$NEXTIFN I DA<1 S ERR=$$ERR(4) Q
"RTN","HMPDJ2",106,0)
 S UID="urn:va:"_TYPE_":"_HMPSYS_":"_DA
"RTN","HMPDJ2",107,0)
 S ^HMP(800000.11,DA,0)=UID_U_U_TYPE
"RTN","HMPDJ2",108,0)
 S ^HMP(800000.11,"B",UID,DA)=""
"RTN","HMPDJ2",109,0)
 S ^HMP(800000.11,"C",TYPE,DA)=""
"RTN","HMPDJ2",110,0)
 Q
"RTN","HMPDJ2",111,0)
 ;
"RTN","HMPDJ2",112,0)
NEXTIFN() ; -- Returns next available IFN
"RTN","HMPDJ2",113,0)
 N I,HDR,TOTAL,DA
"RTN","HMPDJ2",114,0)
 L +^HMP(800000.11,0):$S($G(DILOCKTM)>0:DILOCKTM,1:5)
"RTN","HMPDJ2",115,0)
 I '$T Q "^"
"RTN","HMPDJ2",116,0)
 S HDR=$G(^HMP(800000.11,0)),TOTAL=+$P(HDR,U,4),I=$O(^HMP(800000.11,"?"),-1)
"RTN","HMPDJ2",117,0)
 F I=(I+1):1 Q:'$D(^HMP(800000.11,I,0))
"RTN","HMPDJ2",118,0)
 S DA=I,$P(HDR,U,3,4)=DA_U_(TOTAL+1) S ^HMP(800000.11,0)=HDR
"RTN","HMPDJ2",119,0)
 L -^HMP(800000.11,0)
"RTN","HMPDJ2",120,0)
 Q DA
"RTN","HMPDJ2",121,0)
 ;
"RTN","HMPDJ2",122,0)
ERR(X,VAL) ; -- return error message
"RTN","HMPDJ2",123,0)
 N MSG  S MSG="Error"
"RTN","HMPDJ2",124,0)
 I X=1  S MSG="Patient with dfn '"_$G(VAL)_"' not found"
"RTN","HMPDJ2",125,0)
 I X=2  S MSG="Domain type '"_$G(VAL)_"' not recognized"
"RTN","HMPDJ2",126,0)
 I X=3  S MSG="UID '"_$G(VAL)_"' not found"
"RTN","HMPDJ2",127,0)
 I X=4  S MSG="Unable to create new object"
"RTN","HMPDJ2",128,0)
 I X=99 S MSG="Unknown request"
"RTN","HMPDJ2",129,0)
 Q MSG
"RTN","HMPDJ2",130,0)
 ;
"RTN","HMPDJ2",131,0)
HL7NOW() ; -- Return current time in HL7 format
"RTN","HMPDJ2",132,0)
 Q $$FMTHL7^HMPSTMP($$NOW^XLFDT)  ; DE5016
"RTN","HMPDJ2",133,0)
 ;
"RTN","HMPDJFS")
0^22^B85758404
"RTN","HMPDJFS",1,0)
HMPDJFS ;SLC/KCM,ASMR/BL,JD,CK,CPC,AFS/PB,CPC -- Asynchronous Extracts and Freshness via stream;Sep 16, 2016 09:45:43
"RTN","HMPDJFS",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3,4**;May 15, 2016;Build 13
"RTN","HMPDJFS",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFS",4,0)
 ;
"RTN","HMPDJFS",5,0)
 ; JD - 1/14/15 - Removed "+" from "$$GETICN^MPIF001(DFN)" so that the
"RTN","HMPDJFS",6,0)
 ;                full value of icn (<icn>V<checksum>) could be captured. US4194.
"RTN","HMPDJFS",7,0)
 ; JD - 3/16/15 - Added checks to prevent restaging of data if the data has
"RTN","HMPDJFS",8,0)
 ;                already been staged.  US4304
"RTN","HMPDJFS",9,0)
 ; CPC - 3/4/16 - Prevent dual execution. DE3411
"RTN","HMPDJFS",10,0)
 ; CPC - 3/3/17 - Properly reset server. DE7613
"RTN","HMPDJFS",11,0)
 ; CPC - 5/31/17- Add ignore flag and posting for unsubscribed patient US18852
"RTN","HMPDJFS",12,0)
 ;
"RTN","HMPDJFS",13,0)
 ; PUT/POST   call $$TAG^ROUTINE(.args,.body)
"RTN","HMPDJFS",14,0)
 ; GET/DELETE call   TAG^ROUTINE(.response,.args)
"RTN","HMPDJFS",15,0)
 ;
"RTN","HMPDJFS",16,0)
 Q
"RTN","HMPDJFS",17,0)
 ;
"RTN","HMPDJFS",18,0)
API(HMPFRSP,ARGS) ;
"RTN","HMPDJFS",19,0)
 N HMPFERR,HMPFHMP,HMPFLOG,CNT,ACNT
"RTN","HMPDJFS",20,0)
 K ^TMP("HMPF",$J)
"RTN","HMPDJFS",21,0)
 S HMPFHMP=$TR($G(ARGS("server")),"~","=")
"RTN","HMPDJFS",22,0)
 S HMPFRSP=$NA(^TMP("HMPF",$J))
"RTN","HMPDJFS",23,0)
 S HMPFLOG=+$$GET^XPAR("ALL","HMP LOG LEVEL")
"RTN","HMPDJFS",24,0)
 I HMPFLOG D LOGREQ(HMPFHMP,.ARGS)
"RTN","HMPDJFS",25,0)
 S HMPSYS=$$SYS^HMPUTILS
"RTN","HMPDJFS",26,0)
 I '$L(HMPFHMP) D SETERR("Missing HMP Server ID") QUIT
"RTN","HMPDJFS",27,0)
 I '$O(^HMP(800000,"B",HMPFHMP,0)) D SETERR("HMP Server not registered") QUIT
"RTN","HMPDJFS",28,0)
 ;
"RTN","HMPDJFS",29,0)
 ; begin select case
"RTN","HMPDJFS",30,0)
 I ARGS("command")="putPtSubscription" D  G XAPI
"RTN","HMPDJFS",31,0)
 . N LOC
"RTN","HMPDJFS",32,0)
 . S LOC=$$PUTSUB^HMPDJFSP(.ARGS) ; Added ELSE for US4304
"RTN","HMPDJFS",33,0)
 . I $L(LOC) S ^TMP("HMPF",$J,1)="{"_$$APIVERS()_",""location"":"""_LOC_""""_$$PROGRESS_"}"
"RTN","HMPDJFS",34,0)
 I ARGS("command")="startOperationalDataExtract" D  G XAPI
"RTN","HMPDJFS",35,0)
 . N HMPX2,LOC
"RTN","HMPDJFS",36,0)
 . S ARGS("localId")="OPD"  ; use OPD to indicate "sync operational"
"RTN","HMPDJFS",37,0)
 . ; Next 2 lines added for US4304
"RTN","HMPDJFS",38,0)
 . S HMPX2="HMPFX~"_$G(HMPFHMP)_"~OPD"
"RTN","HMPDJFS",39,0)
 . D  ;DE5181 submit ODS only if not already run or running
"RTN","HMPDJFS",40,0)
 ..  N HMPUID
"RTN","HMPDJFS",41,0)
 ..  I $D(^XTMP(HMPX2)) S LOC="/hmp/subscription/operational data/" Q
"RTN","HMPDJFS",42,0)
 ..  S HMPUID=$O(^HMP(800000,"B",HMPFHMP,0))
"RTN","HMPDJFS",43,0)
 ..  I HMPUID,$P($G(^HMP(800000,HMPUID,0)),U,3)=2 S LOC="/hmp/subscription/operational data/" Q
"RTN","HMPDJFS",44,0)
 ..  S LOC=$$PUTSUB^HMPDJFSP(.ARGS)
"RTN","HMPDJFS",45,0)
 . I $L(LOC) S ^TMP("HMPF",$J,1)="{"_$$APIVERS()_",""location"":"""_LOC_"""}"
"RTN","HMPDJFS",46,0)
 I ARGS("command")="getPtUpdates" D  G XAPI
"RTN","HMPDJFS",47,0)
 . D GETSUB^HMPDJFSG(HMPFRSP,.ARGS)
"RTN","HMPDJFS",48,0)
 I ARGS("command")="resetAllSubscriptions" D  G XAPI
"RTN","HMPDJFS",49,0)
 . D RESETSVR(.ARGS)
"RTN","HMPDJFS",50,0)
 . S ^TMP("HMPF",$J,1)="{"_$$APIVERS()_",""removed"":""true""}"
"RTN","HMPDJFS",51,0)
 I ARGS("command")="checkHealth" D  G XAPI
"RTN","HMPDJFS",52,0)
 . D HLTHCHK^HMPDJFSM(.ARGS)
"RTN","HMPDJFS",53,0)
 I ARGS("command")="resourceSlots" D  G XAPI  ;DE8313 - PB - Aug 3 2017
"RTN","HMPDJFS",54,0)
 . ;provides a report of the slots in use for the HMP EXTRACT RESOURCE device
"RTN","HMPDJFS",55,0)
 . D RES^HMPDJFSM
"RTN","HMPDJFS",56,0)
 I ARGS("command")="clearResourceSlot" D  G XAPI  ;DE8313 - PB - Aug 3 2017
"RTN","HMPDJFS",57,0)
 . ; inputs ARGS("slotNumber") to be cleared, only one slot will be cleared with each call to this RPC
"RTN","HMPDJFS",58,0)
 . S SLOT=$G(ARGS("slotNumber"))
"RTN","HMPDJFS",59,0)
 . D CLEAR^HMPDJFSM(SLOT)
"RTN","HMPDJFS",60,0)
 . K SLOT
"RTN","HMPDJFS",61,0)
 ; else
"RTN","HMPDJFS",62,0)
 D SETERR("command not recognized")  ; should not get this far
"RTN","HMPDJFS",63,0)
 ;
"RTN","HMPDJFS",64,0)
XAPI ; end select case
"RTN","HMPDJFS",65,0)
 ;
"RTN","HMPDJFS",66,0)
 I HMPFLOG=2 D LOGRSP(HMPFHMP)
"RTN","HMPDJFS",67,0)
 Q
"RTN","HMPDJFS",68,0)
 ;
"RTN","HMPDJFS",69,0)
APIVERS() Q """apiVersion"":""1.04"""
"RTN","HMPDJFS",70,0)
 ;
"RTN","HMPDJFS",71,0)
LOGREQ(SRV,ARGS) ; Log the request
"RTN","HMPDJFS",72,0)
 I $D(^XTMP("HMPFLOG",0,"start")) D  Q:'$$GET^XPAR("ALL","HMP LOG LEVEL")
"RTN","HMPDJFS",73,0)
 . N ELAPSED S ELAPSED=$$HDIFF^XLFDT($H,^XTMP("HMPFLOG",0,"start"),2)
"RTN","HMPDJFS",74,0)
 . I ELAPSED>$$GET^XPAR("ALL","HMP LOG LIMIT") D PUT^XPAR("SYS","HMP LOG LEVEL",1,0)
"RTN","HMPDJFS",75,0)
 E  D
"RTN","HMPDJFS",76,0)
 . D NEWXTMP("HMPFLOG",1,"HMP Freshness Logging")
"RTN","HMPDJFS",77,0)
 . S ^XTMP("HMPFLOG",0,"start")=$H
"RTN","HMPDJFS",78,0)
 S ^XTMP("HMPFLOG",0,"total")=$G(^XTMP("HMPFLOG",0,"total"))+1
"RTN","HMPDJFS",79,0)
 S:'$L(SRV) SRV="unknown"
"RTN","HMPDJFS",80,0)
 N SEQ
"RTN","HMPDJFS",81,0)
 S SEQ=+$G(^XTMP("HMPFLOG",SRV))+1,^XTMP("HMPFLOG",SRV)=SEQ
"RTN","HMPDJFS",82,0)
 M ^XTMP("HMPFLOG",SRV,SEQ,"request")=ARGS
"RTN","HMPDJFS",83,0)
 S HMPFLOG("seq")=SEQ
"RTN","HMPDJFS",84,0)
 Q
"RTN","HMPDJFS",85,0)
LOGRSP(SRV) ; Log the response
"RTN","HMPDJFS",86,0)
 M ^XTMP("HMPFLOG",SRV,HMPFLOG("seq"),"response")=^TMP("HMPF",$J)
"RTN","HMPDJFS",87,0)
 Q
"RTN","HMPDJFS",88,0)
 ;
"RTN","HMPDJFS",89,0)
 ; delete a patient subscription
"RTN","HMPDJFS",90,0)
DELSUB(RSP,ARGS) ; cancel a subscription
"RTN","HMPDJFS",91,0)
 ; DELETE with: /hmp/subscription/{hmpSrvId}/patient/{pid}
"RTN","HMPDJFS",92,0)
 ; remove patient from HMP SUBSCRIPTION file
"RTN","HMPDJFS",93,0)
 ; remove ^XTMP(HMPX and ^XTMP(HMPH nodes
"RTN","HMPDJFS",94,0)
 ; look ahead (from lastId) and remove any nodes for the patient
"RTN","HMPDJFS",95,0)
 N DFN,HMPSRV,BATCH,HMPSRVID
"RTN","HMPDJFS",96,0)
 K ^TMP("HMPF",$J)
"RTN","HMPDJFS",97,0)
 ; DE6856, initialize HMPFRSP in case of error, use RSP here because of argument in DELSUB line tag, 15 Sept 2016
"RTN","HMPDJFS",98,0)
 S:$G(HMPFRSP)="" HMPFRSP="RSP"
"RTN","HMPDJFS",99,0)
 S DFN=$$DFN(ARGS("pid")) Q:$D(HMPFERR)
"RTN","HMPDJFS",100,0)
 S HMPSRV=ARGS("hmpSrvId")
"RTN","HMPDJFS",101,0)
 S BATCH="HMPFX~"_HMPSRV_"~"_DFN
"RTN","HMPDJFS",102,0)
 L +^XTMP("HMPFP",DFN,HMPSRV):20 E  D SETERR("unable to get lock") Q
"RTN","HMPDJFS",103,0)
 ; if extract still running, it should remove itself when it finishes
"RTN","HMPDJFS",104,0)
 K ^XTMP("HMPFX~"_HMPSRV_"~"_DFN) ; kill extract nodes
"RTN","HMPDJFS",105,0)
 K ^XTMP("HMPFH~"_HMPSRV_"~"_DFN) ; kill held freshness updates
"RTN","HMPDJFS",106,0)
 ; remove all nodes for this patient between "last" and "next"
"RTN","HMPDJFS",107,0)
 ; loop forward from "last" in ^XTMP("HMPFP",0,hmpSrv) and remove nodes for this DFN
"RTN","HMPDJFS",108,0)
 K ^XTMP("HMPFP",DFN,HMPSRV)      ; kill subscription
"RTN","HMPDJFS",109,0)
 D DELPT(DFN,HMPSRV)
"RTN","HMPDJFS",110,0)
 L -^XTMP("HMPFP",DFN,HMPSRV)
"RTN","HMPDJFS",111,0)
 S RSP="{"_$$APIVERS()_",""success"":""true""}" ; if successful
"RTN","HMPDJFS",112,0)
 Q
"RTN","HMPDJFS",113,0)
DELPT(DFN,SRV) ; delete patient DFN for server SRV
"RTN","HMPDJFS",114,0)
 N DIK,DA
"RTN","HMPDJFS",115,0)
 S DA(1)=$O(^HMP(800000,"B",SRV,"")) Q:'DA(1)
"RTN","HMPDJFS",116,0)
 S DA=DFN Q:'DA
"RTN","HMPDJFS",117,0)
 S DIK="^HMP(800000,"_DA(1)_",1,"
"RTN","HMPDJFS",118,0)
 D ^DIK
"RTN","HMPDJFS",119,0)
 Q
"RTN","HMPDJFS",120,0)
 ;
"RTN","HMPDJFS",121,0)
 ; --- post freshness updates (internal to VistA)
"RTN","HMPDJFS",122,0)
 ;
"RTN","HMPDJFS",123,0)
POST(DFN,TYPE,ID,ACT,SERVER,NODES,IGNORE) ; adds new freshness item, return DT-seq
"RTN","HMPDJFS",124,0)
 ; if initializing use: ^XTMP("HMPFH-hmpserverid-dfn",seq#)    -hold
"RTN","HMPDJFS",125,0)
 ;       otherwise use: ^XTMP("HMPFS-hmpserverid-date",seq#)   -stream
"RTN","HMPDJFS",126,0)
 ;
"RTN","HMPDJFS",127,0)
 ; loop through subscribing streams for this patient
"RTN","HMPDJFS",128,0)
 ; if patient is initialized for an hmp server send events directly to stream
"RTN","HMPDJFS",129,0)
 ; otherwise, events go to temporary holding area
"RTN","HMPDJFS",130,0)
 ; initial extracts always sent directly to stream
"RTN","HMPDJFS",131,0)
 N HMPSRV,INIT,STREAM,DATE,SEQ,CNT
"RTN","HMPDJFS",132,0)
 S DATE=$$DT^XLFDT
"RTN","HMPDJFS",133,0)
 S HMPSRV="" F  S HMPSRV=$O(^HMP(800000,"AITEM",DFN,HMPSRV)) Q:'$L(HMPSRV)  D
"RTN","HMPDJFS",134,0)
 . I SERVER'="",HMPSRV'=SERVER Q
"RTN","HMPDJFS",135,0)
 . I '$D(^HMP(800000,"AITEM",DFN,HMPSRV)) Q          ; patient not subscribed
"RTN","HMPDJFS",136,0)
 . S INIT=(^HMP(800000,"AITEM",DFN,HMPSRV)=2),CNT=1  ; 2 means patient initialized
"RTN","HMPDJFS",137,0)
 . D POST2
"RTN","HMPDJFS",138,0)
 I $G(SEQ)="",$G(IGNORE) S INIT=1,CNT=1,HMPSRV=$P($G(^HMP(800000,1,0)),U,1) Q:HMPSRV=""  D POST2 ;US18852 if ignore set and not subscribed then post to IEN=1
"RTN","HMPDJFS",139,0)
 Q
"RTN","HMPDJFS",140,0)
 ;
"RTN","HMPDJFS",141,0)
POST2 ;PER SERVER POST - split from POST US18852
"RTN","HMPDJFS",142,0)
 I $E(TYPE,1,4)="sync" S INIT=1                 ; sync* goes to main stream
"RTN","HMPDJFS",143,0)
 I TYPE="syncDomain" S CNT=+$P(ID,":",3) S:CNT<1 CNT=1 ; CNT must be >0
"RTN","HMPDJFS",144,0)
 S STREAM=$S(INIT:"HMPFS~",1:"HMPFH~")_HMPSRV_"~"_$S(INIT:DATE,1:DFN)
"RTN","HMPDJFS",145,0)
 I '$D(^XTMP(STREAM)) D NEWXTMP(STREAM,8,"HMP Freshness Stream")
"RTN","HMPDJFS",146,0)
 L +^XTMP(STREAM):5 E  S $EC=",Uno lock obtained," Q  ; throw error
"RTN","HMPDJFS",147,0)
 S SEQ=$G(^XTMP(STREAM,"last"),0)+CNT
"RTN","HMPDJFS",148,0)
 S ^XTMP(STREAM,SEQ)=DFN_U_TYPE_U_ID_U_$G(ACT)_U_$P($H,",",2)
"RTN","HMPDJFS",149,0)
 S ^XTMP(STREAM,"last")=SEQ
"RTN","HMPDJFS",150,0)
 L -^XTMP(STREAM)
"RTN","HMPDJFS",151,0)
 ; NODES(hmpserverid)=streamDate^sequence -- optionally returned
"RTN","HMPDJFS",152,0)
 S NODES($P(STREAM,"~",2))=$S(INIT:DATE,1:0)_U_SEQ
"RTN","HMPDJFS",153,0)
 Q
"RTN","HMPDJFS",154,0)
 ;
"RTN","HMPDJFS",155,0)
NEWXTMP(NODE,DAYS,DESC) ; Set a new node in ^XTMP
"RTN","HMPDJFS",156,0)
 K ^XTMP(NODE)
"RTN","HMPDJFS",157,0)
 S ^XTMP(NODE,0)=$$HTFM^XLFDT($H+DAYS)_U_$$HTFM^XLFDT(+$H)_U_DESC
"RTN","HMPDJFS",158,0)
 Q
"RTN","HMPDJFS",159,0)
PIDS(DFN) ; return string containing patient id's ready for JSON
"RTN","HMPDJFS",160,0)
 ; expects HMPFSYS, HMPFHMP
"RTN","HMPDJFS",161,0)
 Q:'DFN ""
"RTN","HMPDJFS",162,0)
 ;
"RTN","HMPDJFS",163,0)
 N X
"RTN","HMPDJFS",164,0)
 S X=",""pid"":"""_$$PID(DFN)_""""
"RTN","HMPDJFS",165,0)
 S X=X_",""systemId"":"""_HMPSYS_""""
"RTN","HMPDJFS",166,0)
 S X=X_",""localId"":"""_DFN_""""
"RTN","HMPDJFS",167,0)
 S X=X_",""icn"":"""_$$GETICN^MPIF001(DFN)_"""" ; US4194
"RTN","HMPDJFS",168,0)
 Q X
"RTN","HMPDJFS",169,0)
 ;
"RTN","HMPDJFS",170,0)
PID(DFN) ; return most likely PID (ICN or SYS;DFN)
"RTN","HMPDJFS",171,0)
 Q:'DFN ""
"RTN","HMPDJFS",172,0)
 I '$D(HMPSYS) S HMPSYS=$$SYS^HMPUTILS
"RTN","HMPDJFS",173,0)
 Q HMPSYS_";"_DFN            ; otherwise use SysId;DFN
"RTN","HMPDJFS",174,0)
 ;
"RTN","HMPDJFS",175,0)
DFN(PID) ; return the DFN given the PID (ICN or SYS;DFN)
"RTN","HMPDJFS",176,0)
 N DFN
"RTN","HMPDJFS",177,0)
 S PID=$TR(PID,":",";")
"RTN","HMPDJFS",178,0)
 I PID'[";" D  Q DFN  ; treat as ICN
"RTN","HMPDJFS",179,0)
 . S DFN=$$GETDFN^MPIF001(PID)
"RTN","HMPDJFS",180,0)
 . I DFN<0 D SETERR($P(DFN,"^",2))
"RTN","HMPDJFS",181,0)
 ; otherwise
"RTN","HMPDJFS",182,0)
 I $P(PID,";")'=$$SYS^HMPUTILS D SETERR("DFN unknown to this system") Q 0
"RTN","HMPDJFS",183,0)
 Q $P(PID,";",2)
"RTN","HMPDJFS",184,0)
 ;
"RTN","HMPDJFS",185,0)
PROGRESS(LASTITM) ; set the node in REF with progress properties
"RTN","HMPDJFS",186,0)
 ; expects HMPFHMP,HMPSYS
"RTN","HMPDJFS",187,0)
 N RSLT,HMPIEN,CNT,STS,TS,DFN,FIRST
"RTN","HMPDJFS",188,0)
 S HMPIEN=$O(^HMP(800000,"B",HMPFHMP,0)) Q:'HMPIEN ""
"RTN","HMPDJFS",189,0)
 S CNT=0,RSLT=""
"RTN","HMPDJFS",190,0)
 F STS=0,1 D  ; 0=uninitialized, 1=initializing
"RTN","HMPDJFS",191,0)
 . S FIRST=1
"RTN","HMPDJFS",192,0)
 . S RSLT=$S(STS=0:",""waitingPids"":[",1:RSLT_"],""processingPids"":[")
"RTN","HMPDJFS",193,0)
 . S TS=0 F  S TS=$O(^HMP(800000,HMPIEN,1,"AP",STS,TS)) Q:'TS  D  Q:CNT>99
"RTN","HMPDJFS",194,0)
 . . S DFN=0 F  S DFN=$O(^HMP(800000,HMPIEN,1,"AP",STS,TS,DFN)) Q:'DFN  D
"RTN","HMPDJFS",195,0)
 . . . S CNT=CNT+1
"RTN","HMPDJFS",196,0)
 . . . S RSLT=RSLT_$S(FIRST=1:"",1:",")_""""_HMPSYS_";"_DFN_""""
"RTN","HMPDJFS",197,0)
 . . . S FIRST=0
"RTN","HMPDJFS",198,0)
 S RSLT=RSLT_"]"
"RTN","HMPDJFS",199,0)
 ;
"RTN","HMPDJFS",200,0)
 N STRM,STRMDT,CURRDT
"RTN","HMPDJFS",201,0)
 I $G(LASTITM)="" S LASTITM=$P(^HMP(800000,HMPIEN,0),U,2)
"RTN","HMPDJFS",202,0)
 I $L(LASTITM,"-")<2 S LASTITM=$$DT^XLFDT_"-"_+LASTITM
"RTN","HMPDJFS",203,0)
 S STRMDT=$P(LASTITM,"-"),CURRDT=$$DT^XLFDT,SEQ=$P(LASTITM,"-",2)
"RTN","HMPDJFS",204,0)
 S CNT=0 F  D  Q:$$FMDIFF^XLFDT(STRMDT,CURRDT,1)'<0
"RTN","HMPDJFS",205,0)
 . S STRM="HMPFS~"_HMPFHMP_"~"_STRMDT
"RTN","HMPDJFS",206,0)
 . S CNT=CNT+$G(^XTMP(STRM,"last"))-SEQ
"RTN","HMPDJFS",207,0)
 . S STRMDT=$$FMADD^XLFDT(STRMDT,1),SEQ=0
"RTN","HMPDJFS",208,0)
 S RSLT=RSLT_",""remainingObjects"":"_CNT
"RTN","HMPDJFS",209,0)
 Q RSLT
"RTN","HMPDJFS",210,0)
 ;
"RTN","HMPDJFS",211,0)
 ; --- handle errors
"RTN","HMPDJFS",212,0)
 ;
"RTN","HMPDJFS",213,0)
SETERR(MSG) ; create error object in ^TMP("HMPFERR",$J) and set HMPFERR
"RTN","HMPDJFS",214,0)
 ;DE6856, following line is because we may be here before HMPFRSP is SET since it's an error, 15 Sept 2016
"RTN","HMPDJFS",215,0)
 S:$G(HMPFRSP)="" HMPFRSP=$NA(^TMP("HMPF",$J))
"RTN","HMPDJFS",216,0)
 ; TODO: escape MSG for JSON
"RTN","HMPDJFS",217,0)
 S @HMPFRSP@(1)="{"_$$APIVERS()_",""error"":{""message"":"""_MSG_"""}}"
"RTN","HMPDJFS",218,0)
 S ^TMP("HMPFERR",$J,$H)=MSG
"RTN","HMPDJFS",219,0)
 S HMPFERR=1
"RTN","HMPDJFS",220,0)
 Q
"RTN","HMPDJFS",221,0)
 ;
"RTN","HMPDJFS",222,0)
DEBUG(MSG) ;
"RTN","HMPDJFS",223,0)
 S ^TMP("HMPDEBUG",$J,0)=$G(^TMP("HMPDEBUG",$J,0),0)+1
"RTN","HMPDJFS",224,0)
 I $D(MSG)'=1 M ^TMP("HMPDEBUG",$J,^TMP("HMPDEBUG",$J,0))=MSG Q
"RTN","HMPDJFS",225,0)
 S ^TMP("HMPDEBUG",$J,^TMP("HMPDEBUG",$J,0))=MSG
"RTN","HMPDJFS",226,0)
 Q
"RTN","HMPDJFS",227,0)
RESETSVR(ARGS) ;
"RTN","HMPDJFS",228,0)
 N DA,DIE,DIK,DR,IEN,SRV,SRVIEN,X
"RTN","HMPDJFS",229,0)
 S SRV=$G(ARGS("server")) I SRV="" Q
"RTN","HMPDJFS",230,0)
 S DA=$O(^HMP(800000,"B",SRV,"")) I DA'>0 Q
"RTN","HMPDJFS",231,0)
 S SRVIEN=DA
"RTN","HMPDJFS",232,0)
 L +^HMP(800000,SRVIEN):5 E  S $EC=",Uno lock obtained," Q
"RTN","HMPDJFS",233,0)
 ;reset last update
"RTN","HMPDJFS",234,0)
 S DIE="^HMP(800000,",DR=".02///"_$$DT^XLFDT_"-0" D ^DIE
"RTN","HMPDJFS",235,0)
 ;delete operational data field
"RTN","HMPDJFS",236,0)
 S DIE="^HMP(800000,",DR=".03///@" D ^DIE
"RTN","HMPDJFS",237,0)
 S DA(1)=DA,DA=0
"RTN","HMPDJFS",238,0)
 ;delete patient multiple values
"RTN","HMPDJFS",239,0)
 S DIK="^HMP(800000,"_DA(1)_",1,"
"RTN","HMPDJFS",240,0)
 F  S DA=$O(^HMP(800000,DA(1),1,DA)) Q:DA'>0  D ^DIK
"RTN","HMPDJFS",241,0)
 ;kill server ^XTMP
"RTN","HMPDJFS",242,0)
 S X="HMPF" F  S X=$O(^XTMP(X)) Q:$E(X,1,4)'="HMPF"  D
"RTN","HMPDJFS",243,0)
 . I X[SRV K ^XTMP(X) I 1
"RTN","HMPDJFS",244,0)
 ;kill tidy node
"RTN","HMPDJFS",245,0)
 K ^XTMP("HMPFP","tidy",SRV)
"RTN","HMPDJFS",246,0)
 L -^HMP(800000,SRVIEN)
"RTN","HMPDJFS",247,0)
 Q
"RTN","HMPDJFS",248,0)
 ;
"RTN","HMPDJFS",249,0)
CLEARDOM(SVR,PAT) ;
"RTN","HMPDJFS",250,0)
 Q
"RTN","HMPDJFS",251,0)
 ;
"RTN","HMPDJFS",252,0)
CLEARPAT(SVR,PAT) ;
"RTN","HMPDJFS",253,0)
 I '$D(^XTMP("HMPFP",PAT,SVR)) Q
"RTN","HMPDJFS",254,0)
 ;do we need a check for patient initialized?
"RTN","HMPDJFS",255,0)
 K ^XTMP("HMPFP",PAT,SVR)
"RTN","HMPDJFS",256,0)
 Q
"RTN","HMPDJFS",257,0)
 ;
"RTN","HMPDJFS",258,0)
HMPSET(DA,NEW) ;
"RTN","HMPDJFS",259,0)
 N IEN,NAME
"RTN","HMPDJFS",260,0)
 S IEN=0 F  S IEN=$O(^HMP(800000,IEN)) Q:IEN'>0  D
"RTN","HMPDJFS",261,0)
 .S NAME=$P(^HMP(800000,IEN,0),U)
"RTN","HMPDJFS",262,0)
 .I $D(^HMP(800000,IEN,1,NEW(1)))>0 S ^HMP(800000,"AITEM",NEW(1),NAME)=NEW(2)
"RTN","HMPDJFS",263,0)
 Q
"RTN","HMPDJFS",264,0)
 ;
"RTN","HMPDJFS",265,0)
HMPKILL(DA,OLD) ;
"RTN","HMPDJFS",266,0)
 N NAME
"RTN","HMPDJFS",267,0)
 S NAME=$P($G(^HMP(800000,DA(1),0)),U) I NAME="" Q
"RTN","HMPDJFS",268,0)
 K ^HMP(800000,"AITEM",OLD(1),NAME)
"RTN","HMPDJFS",269,0)
 Q
"RTN","HMPDJFS",270,0)
 ;
"RTN","HMPDJFS",271,0)
HMPOSET(DA,NEW) ;
"RTN","HMPDJFS",272,0)
 N IEN,NAME
"RTN","HMPDJFS",273,0)
 S IEN=0 F  S IEN=$O(^HMP(800000,IEN)) Q:IEN'>0  D
"RTN","HMPDJFS",274,0)
 .S NAME=$P(^HMP(800000,IEN,0),U)
"RTN","HMPDJFS",275,0)
 .S ^HMP(800000,"AITEM","OPD",NAME)=NEW
"RTN","HMPDJFS",276,0)
 Q
"RTN","HMPDJFS",277,0)
 ;
"RTN","HMPDJFS",278,0)
HMPOKILL(DA) ;
"RTN","HMPDJFS",279,0)
 N NAME
"RTN","HMPDJFS",280,0)
 S NAME=$P($G(^HMP(800000,DA,0)),U) I NAME="" Q
"RTN","HMPDJFS",281,0)
 K ^HMP(800000,"AITEM","OPD",NAME)
"RTN","HMPDJFS",282,0)
 Q
"RTN","HMPDJFS",283,0)
KILL ; clear out all ^XTMP nodes
"RTN","HMPDJFS",284,0)
 N X
"RTN","HMPDJFS",285,0)
 S X="HMPF" F  S X=$O(^XTMP(X)) Q:$E(X,1,4)'="HMPF"  W !,X  K ^XTMP(X)
"RTN","HMPDJFS",286,0)
 Q
"RTN","HMPDJFS",287,0)
KILLSVR(SVR) ; clear out for specific machine
"RTN","HMPDJFS",288,0)
 N X
"RTN","HMPDJFS",289,0)
 S X="HMPF" F  S X=$O(^XTMP(X)) Q:$E(X,1,4)'="HMPF"  D
"RTN","HMPDJFS",290,0)
 . I X[SVR W !,X  K ^XTMP(X) I 1
"RTN","HMPDJFS",291,0)
 S X="" F  S X=$O(^XTMP("HMPFP",X)) Q:X=""  D
"RTN","HMPDJFS",292,0)
 . I $D(^XTMP("HMPFP",X,SVR)) K ^XTMP("HMPFP",X,SVR)
"RTN","HMPDJFS",293,0)
 Q
"RTN","HMPDJFS1")
0^36^B13653252
"RTN","HMPDJFS1",1,0)
HMPDJFS1 ;ASMR/CPC,hrubovcak,CPC - for Extract and Freshness Stream;Oct 15, 2015 18:39:51
"RTN","HMPDJFS1",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**4**;Sep 01, 2011;Build 13
"RTN","HMPDJFS1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFS1",4,0)
 ;
"RTN","HMPDJFS1",5,0)
 Q
"RTN","HMPDJFS1",6,0)
 ; continuation code for HMPDJFSP and HMPDJFSG
"RTN","HMPDJFS1",7,0)
 ;
"RTN","HMPDJFS1",8,0)
BACKDOM ; task patient domain to the background, called from HMPDJFSP
"RTN","HMPDJFS1",9,0)
 N ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE,ZTSK
"RTN","HMPDJFS1",10,0)
 S ZTRTN="DQBACKDM^HMPDJFS1",ZTIO="",ZTDTH=$H
"RTN","HMPDJFS1",11,0)
 S ZTSAVE("HMPBATCH")="",ZTSAVE("HMPFDFN")=""
"RTN","HMPDJFS1",12,0)
 S ZTSAVE("HMPFDOMI")="",ZTSAVE("ZTQUEUED")="",ZTSAVE("HMPMETA")="",ZTSAVE("HMPFDOM(")=""
"RTN","HMPDJFS1",13,0)
 S ZTSAVE("HMPFZTSK")=""
"RTN","HMPDJFS1",14,0)
 S ZTSAVE("HMPENVIR(")=""  ; environment information
"RTN","HMPDJFS1",15,0)
 S ZTSAVE("HMPSTMP")=""  ; Operational data stamptime US6734
"RTN","HMPDJFS1",16,0)
 S ZTDESC="Build HMP subdomains for a patient"
"RTN","HMPDJFS1",17,0)
 D ^%ZTLOAD
"RTN","HMPDJFS1",18,0)
 I $G(ZTSK) S ^XTMP(HMPBATCH,0,"task","b",ZTSK)="" Q
"RTN","HMPDJFS1",19,0)
 ; no task, log error
"RTN","HMPDJFS1",20,0)
 D SETERR^HMPDJFS("Task not created")
"RTN","HMPDJFS1",21,0)
 Q
"RTN","HMPDJFS1",22,0)
 ;
"RTN","HMPDJFS1",23,0)
DQBACKDM ; TaskMan entry point
"RTN","HMPDJFS1",24,0)
 ; patient's domain has been "chunked"
"RTN","HMPDJFS1",25,0)
 N HMPFBJ S HMPFBJ=1  ; flag, background job
"RTN","HMPDJFS1",26,0)
 D DOMPT^HMPDJFSP(HMPFDOM(HMPFDOMI))
"RTN","HMPDJFS1",27,0)
 K ^XTMP(HMPBATCH,0,"task","b",ZTSK)
"RTN","HMPDJFS1",28,0)
 Q
"RTN","HMPDJFS1",29,0)
 ;
"RTN","HMPDJFS1",30,0)
APIHDR(COUNT,LASTITM) ;return JSON
"RTN","HMPDJFS1",31,0)
 ;expects HMPFSYS
"RTN","HMPDJFS1",32,0)
 I $P($G(LASTITM),".",2)="99" S LASTITM=$P(LASTITM,".") ;make sure lastUpdate is correct;JD;BL;DE2280
"RTN","HMPDJFS1",33,0)
 I +$G(HMPRMODE),+$G(HMPALLTK) I LASTITM'=$P(^XTMP(HMPALLOQ,"current",HMPALLTK),U,3) D
"RTN","HMPDJFS1",34,0)
 . ;override allocation if last item doesn't match but not if no items returned otherwise it loops
"RTN","HMPDJFS1",35,0)
 . ;logic being that if no items are returned then we need to move the last update pointer anyway, as long as this is the reason we got here
"RTN","HMPDJFS1",36,0)
 . I 'COUNT,$G(HMPFIDX)'<$G(HMPALEND) Q  ;no data but sequence went past allocation end so leave last update to reset via allocation
"RTN","HMPDJFS1",37,0)
 . S $P(^XTMP(HMPALLOQ,"current",HMPALLTK),U,3)=LASTITM
"RTN","HMPDJFS1",38,0)
 . S $P(^XTMP(HMPALLOQ,"byRecord",$$PACKSIX^HMPDJFSR($P(^XTMP(HMPALLOQ,"current",HMPALLTK),U,2),1E10)),U,1)=LASTITM
"RTN","HMPDJFS1",39,0)
 N X
"RTN","HMPDJFS1",40,0)
 S X="{"_$$APIVERS^HMPDJFS()_",""params"":{""domain"":"""_$$KSP^XUPARAM("WHERE")_"""" ;update API version
"RTN","HMPDJFS1",41,0)
 S X=X_",""systemId"":"""_HMPFSYS_"""},""data"":{""updated"":"""_$$HL7NOW^HMPDJ_""""
"RTN","HMPDJFS1",42,0)
 S X=X_",""totalItems"":"_COUNT_",""lastUpdate"":"""_LASTITM_""""_$$PROGRESS^HMPDJFS(LASTITM)
"RTN","HMPDJFS1",43,0)
 I $G(HMPALLTK)'="" S X=X_",""allocationToken"":"""_HMPALLTK_""""
"RTN","HMPDJFS1",44,0)
 S X=X_",""items"":["
"RTN","HMPDJFS1",45,0)
 Q X
"RTN","HMPDJFS1",46,0)
 ;
"RTN","HMPDJFS1",47,0)
VERMATCH(HMPIEN,VERSION) ;true if middle tier HMP and VistA version match
"RTN","HMPDJFS1",48,0)
 ;versions match, queue any patients waiting for match
"RTN","HMPDJFS1",49,0)
 I $P($$GET^XPAR("PKG","HMP JSON SCHEMA"),".")=$P(VERSION,".") D  QUIT 1
"RTN","HMPDJFS1",50,0)
 . Q:'$G(^XTMP("HMPFS~"_HMPIEN,"waiting"))  ; no patients awaiting queuing
"RTN","HMPDJFS1",51,0)
 . S ^XTMP("HMPFS~"_HMPIEN,"waiting")=0
"RTN","HMPDJFS1",52,0)
 . N DOMAINS,BATCH,HMPNAME
"RTN","HMPDJFS1",53,0)
 . S HMPNAME=$P(^HMP(800000,HMPIEN,0),U)
"RTN","HMPDJFS1",54,0)
 . D PTDOMS^HMPDJFSD(.DOMAINS)
"RTN","HMPDJFS1",55,0)
 . S DFN=0 F  S DFN=$O(^XTMP("HMPFS~"_HMPIEN,"waiting",DFN)) Q:'DFN  D
"RTN","HMPDJFS1",56,0)
 .. Q:'$D(^HMP(800000,HMPIEN,1,DFN))  ; subscription cancelled while waiting *S68-JCH*
"RTN","HMPDJFS1",57,0)
 .. S BATCH="HMPFX~"_HMPNAME_"~"_DFN
"RTN","HMPDJFS1",58,0)
 .. D QUINIT^HMPDJFSQ(BATCH,DFN,.DOMAINS) ;DE7954
"RTN","HMPDJFS1",59,0)
 . K ^XTMP("HMPFS~"_HMPIEN)
"RTN","HMPDJFS1",60,0)
 ;otherwise, hold
"RTN","HMPDJFS1",61,0)
 D NEWXTMP^HMPDJFS("HMPFS~"_HMPIEN,8,"HMP Awaiting Version Match")
"RTN","HMPDJFS1",62,0)
 S ^XTMP("HMPFS~"_HMPIEN,"waiting")=1
"RTN","HMPDJFS1",63,0)
 Q 0
"RTN","HMPDJFSG")
0^23^B216706735
"RTN","HMPDJFSG",1,0)
HMPDJFSG ;SLC/KCM,ASMR/RRB,CPC,JD,ASF,CK,CPC -- GET for Extract and Freshness Stream;Aug 11, 2016 10:35:07
"RTN","HMPDJFSG",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3,4**;May 15, 2016;Build 13
"RTN","HMPDJFSG",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFSG",4,0)
 ;
"RTN","HMPDJFSG",5,0)
 ; US3907 - Allow for jobId and rootJobId to be retrieved from ^XTMP. JD 1/20/15
"RTN","HMPDJFSG",6,0)
 ; DE2818 - SQA findings. Newed ERRCNT in BLDSERR+2. RRB 10/24/2015
"RTN","HMPDJFSG",7,0)
 ; DE3869 - Remove the freshness stream entries with undefined DFNs. JD 3/4/16
"RTN","HMPDJFSG",8,0)
 ; US18104 - introduction of allocation mode CPC 1/24/17
"RTN","HMPDJFSG",9,0)
 ; US18005 - Add passthrough fields 2017-01-12 AFS/CPC
"RTN","HMPDJFSG",10,0)
 ;
"RTN","HMPDJFSG",11,0)
 Q
"RTN","HMPDJFSG",12,0)
 ; --- retrieve updates for an HMP server's subscriptions
"RTN","HMPDJFSG",13,0)
 ;
"RTN","HMPDJFSG",14,0)
GETSUB(HMPFRSP,ARGS) ; retrieve items from stream
"RTN","HMPDJFSG",15,0)
 ; GET from: /hmp/subscription/{hmpSrvId}/{last}?limit={limit}
"RTN","HMPDJFSG",16,0)
 ; ARGS("lastUpdate") : date-seq of last item retrieved (ex. 3131206-27) - DEPRECATED US18104
"RTN","HMPDJFSG",17,0)
 ; ARGS("max")  : maximum number of items to return (default 99999) *S68-JCH*
"RTN","HMPDJFSG",18,0)
 ; ARGS("maxSize"): approximate number bytes to return *S68-JCH*
"RTN","HMPDJFSG",19,0)
 ; ARGS("allocationSize") :requested size of allocation
"RTN","HMPDJFSG",20,0)
 ; ARGS("allocationToken") :returned token
"RTN","HMPDJFSG",21,0)
 ; ARGS("allocationStatus") :status of allocation
"RTN","HMPDJFSG",22,0)
 ;
"RTN","HMPDJFSG",23,0)
 ; HMPFSYS : the id (hash) of the VistA system
"RTN","HMPDJFSG",24,0)
 ; HMPFHMP : the name of the HMP server 
"RTN","HMPDJFSG",25,0)
 ; HMPFSEQ : final sequence (becomes next LASTSEQ)
"RTN","HMPDJFSG",26,0)
 ; HMPFIDX : index to iterate from LASTSEQ to final sequence
"RTN","HMPDJFSG",27,0)
 ; HMPFLAST: used to clean up extracts prior to this
"RTN","HMPDJFSG",28,0)
 ; HMPFSTRM: the freshness stream (HMPFS~hmpSrvId~fmDate) 
"RTN","HMPDJFSG",29,0)
 ;
"RTN","HMPDJFSG",30,0)
 K ^TMP("HMPF",$J)
"RTN","HMPDJFSG",31,0)
 N HMPFSYS,HMPFSTRM,HMPFLAST,HMPFDT,HMPFLIM,HMPFMAX,HMPFSIZE,HMPCLFLG
"RTN","HMPDJFSG",32,0)
 N HMPFSEQ,HMPFIDX,HMPFCNT,SNODE,STYPE,HMPFERR,HMPDEL,HMPERR,HMPSTGET,HMPLITEM ;*S68-JCH*,DE3502
"RTN","HMPDJFSG",33,0)
 N HMPALLSZ,HMPALLTK,HMPALLST,HMPRMODE,HMPALEND,HMPALLOQ
"RTN","HMPDJFSG",34,0)
 S HMPFRSP=$NA(^TMP("HMPF",$J))
"RTN","HMPDJFSG",35,0)
 ;Next line added US6734 - Make sure OPD metastamp data has been completed before fetching.
"RTN","HMPDJFSG",36,0)
 I '$$OPD^HMPMETA(HMPFHMP) S @HMPFRSP@(1)="{""warning"":""Staging is not complete yet!""}" Q
"RTN","HMPDJFSG",37,0)
 ;
"RTN","HMPDJFSG",38,0)
 S HMPFSYS=$$SYS^HMPUTILS
"RTN","HMPDJFSG",39,0)
 S HMPFHMP("ien")=$O(^HMP(800000,"B",HMPFHMP,0))
"RTN","HMPDJFSG",40,0)
 S HMPFDT=$P($G(ARGS("lastUpdate")),"-")
"RTN","HMPDJFSG",41,0)
 S HMPFSEQ=+$P($G(ARGS("lastUpdate")),"-",2)
"RTN","HMPDJFSG",42,0)
 S HMPSTGET=$G(ARGS("getStatus"))
"RTN","HMPDJFSG",43,0)
 S HMPLITEM="" ;DE3502 initialise tracking of last item type
"RTN","HMPDJFSG",44,0)
 S HMPALLOQ="HMPFA~"_HMPFHMP
"RTN","HMPDJFSG",45,0)
 S HMPRMODE=0 I HMPFDT="" S HMPRMODE=1 ;US18104 If in reservation mode last update not passed
"RTN","HMPDJFSG",46,0)
 I HMPFDT'="",$D(^XTMP(HMPALLOQ)) S @HMPFRSP@(.5)=$$APIHDR^HMPDJFS1(0,ARGS("lastUpdate"))_"],""error"":{""message"":""Last update not allowed in multiple mode""}"_"}}" Q  ;US18433
"RTN","HMPDJFSG",47,0)
 D SETLIMIT(.ARGS) ; set HMPFLIM, HMPFMAX, HMPFSIZE;*S68-PJH*
"RTN","HMPDJFSG",48,0)
 S HMPFLIM=$G(ARGS("max"),99999)
"RTN","HMPDJFSG",49,0)
 D INIT^HMPDJFSR ;set up reservation variables and update lastupdate
"RTN","HMPDJFSG",50,0)
 S HMPFSTRM="HMPFS~"_HMPFHMP_"~"_HMPFDT ; stream identifier
"RTN","HMPDJFSG",51,0)
 I HMPRMODE,HMPALLTK="" Q:$D(HMPERR)  D NOOP(HMPFLAST) Q
"RTN","HMPDJFSG",52,0)
 I '$D(^XTMP(HMPFSTRM,"job",$J)) S ^XTMP(HMPFSTRM,"job",$J,"start")=$H
"RTN","HMPDJFSG",53,0)
 S ^XTMP(HMPFSTRM,"job",$J)=$H ; record connection info
"RTN","HMPDJFSG",54,0)
 I '$$VERMATCH^HMPDJFS1(HMPFHMP("ien"),$G(ARGS("extractSchema"))) D NOOP(HMPFLAST) Q
"RTN","HMPDJFSG",55,0)
 S HMPFCNT=0,HMPFIDX=HMPFSEQ
"RTN","HMPDJFSG",56,0)
 ;Loops stream contents and move to the next stream on completion and continue but only if max conditions still unmet
"RTN","HMPDJFSG",57,0)
 ; check size constraint, check number of records constraint and in multi-poller mode (HMPRMODE) check end point for allocation
"RTN","HMPDJFSG",58,0)
 ; after moving to new stream finish if in multi-poller mode as allocation cannot cross streams
"RTN","HMPDJFSG",59,0)
 F  D  Q:HMPFSIZE'<HMPFMAX  Q:HMPFCNT'<HMPFLIM  Q:(HMPRMODE&(+$G(HMPALEND)&(HMPFIDX'<$G(HMPALEND))))  D NXTSTRM Q:HMPFSTRM=""  I HMPRMODE,+$G(HMPALEND) Q:(HMPFIDX=0)  ;*S68-JCH*
"RTN","HMPDJFSG",60,0)
 . F  S HMPFIDX=$O(^XTMP(HMPFSTRM,HMPFIDX)) Q:'HMPFIDX  D  Q:HMPFCNT'<HMPFLIM  I HMPRMODE,+$G(HMPALEND) Q:HMPFIDX'<HMPALEND
"RTN","HMPDJFSG",61,0)
 ..  S SNODE=^XTMP(HMPFSTRM,HMPFIDX),STYPE=$P(SNODE,U,2)
"RTN","HMPDJFSG",62,0)
 ..  K FILTER("freshnessDateTime")
"RTN","HMPDJFSG",63,0)
 ..  K ARGS("hmp-fst") I $P(SNODE,U,4)="@" S ARGS("hmp-fst")=$P(SNODE,U,5)
"RTN","HMPDJFSG",64,0)
 ..  S $P(^XTMP(HMPFSTRM,HMPFIDX),U,6)=$P($H,",",2) ;timestamp when sent
"RTN","HMPDJFSG",65,0)
 ..  I STYPE="syncNoop" Q  ;skip, patient was unsubscribed
"RTN","HMPDJFSG",66,0)
 ..  I STYPE="syncDomain" D DOMITMS Q  ;add multiple extract items
"RTN","HMPDJFSG",67,0)
 ..  S HMPFSEQ=HMPFIDX
"RTN","HMPDJFSG",68,0)
 ..  I STYPE="syncError" D SYNCERR(SNODE,.HMPERR) S HMPLITEM="SYNC" Q  ;US18180 treat errors as sync as they close object
"RTN","HMPDJFSG",69,0)
 ..  I STYPE="syncStart" D SYNCSTRT(SNODE) S HMPLITEM="SYNC" Q  ; begin initial extraction ;DE3502
"RTN","HMPDJFSG",70,0)
 ..  I STYPE="syncMeta" D SYNCMETA(SNODE) S HMPLITEM="SYNC" Q  ; US11019 - Build replacement syncstart ;DE3502
"RTN","HMPDJFSG",71,0)
 ..  I STYPE="syncDone" D SYNCDONE(SNODE) S HMPLITEM="SYNC" Q  ; end of initial extraction ;DE3502
"RTN","HMPDJFSG",72,0)
 ..  D FRESHITM(SNODE,.HMPDEL,.HMPERR) S:'$D(HMPERR) HMPLITEM="FRESH" ; otherwise, freshness item ;DE3502
"RTN","HMPDJFSG",73,0)
 Q:$G(HMPFERR)
"RTN","HMPDJFSG",74,0)
 D FINISH(.HMPDEL,.HMPERR)
"RTN","HMPDJFSG",75,0)
 ;Check if mail message is required -US8228
"RTN","HMPDJFSG",76,0)
 D CHECK^HMPUTILS(HMPFHMP) ;US8228
"RTN","HMPDJFSG",77,0)
 Q
"RTN","HMPDJFSG",78,0)
DOMITMS ;loop thru extract items, OFFSET is last sent
"RTN","HMPDJFSG",79,0)
 ;expects HMPFSTRM,HMPFIDX,HMPFHMP,HMPFSYS
"RTN","HMPDJFSG",80,0)
 ;changes HMPFSEQ,HMPFCNT,HMPFSIZE as each item added ;*S68-JCH*
"RTN","HMPDJFSG",81,0)
 N X,OFFSET,DFN,PIDS,DOMAIN,TASK,BATCH,COUNT,ITEMNUM,DOMSIZE,SECSIZE
"RTN","HMPDJFSG",82,0)
 S X=^XTMP(HMPFSTRM,HMPFIDX),DFN=$P(X,U),X=$P(X,U,3)
"RTN","HMPDJFSG",83,0)
 S PIDS=$S(DFN:$$PIDS^HMPDJFS(DFN),1:"")
"RTN","HMPDJFSG",84,0)
 S DOMAIN=$P(X,":") ;domain{#sectionNumber}
"RTN","HMPDJFSG",85,0)
 S TASK=$P(X,":",2) ;task number in ^XTMP
"RTN","HMPDJFSG",86,0)
 S COUNT=$P(X,":",3) ;count in this section
"RTN","HMPDJFSG",87,0)
 S DOMSIZE=$P(X,":",4) ;estimated total for the domain
"RTN","HMPDJFSG",88,0)
 S SECSIZE=$P(X,":",5) ;section size (for operational)
"RTN","HMPDJFSG",89,0)
 S BATCH="HMPFX~"_HMPFHMP_"~"_DFN ;extract node in ^XTMP
"RTN","HMPDJFSG",90,0)
 S OFFSET=COUNT-(HMPFIDX-HMPFSEQ)
"RTN","HMPDJFSG",91,0)
 F  S OFFSET=$O(^XTMP(BATCH,TASK,DOMAIN,OFFSET)) Q:'OFFSET  D  Q:HMPFCNT'<HMPFLIM  I HMPRMODE,+$G(HMPALEND) Q:HMPFSEQ'<HMPALEND
"RTN","HMPDJFSG",92,0)
 . S HMPFSEQ=HMPFSEQ+1 ;increment the sequence number in the stream
"RTN","HMPDJFSG",93,0)
 . S HMPFSIZE=$$INCITEM($P(DOMAIN,"#")) ;*S68-JCH*
"RTN","HMPDJFSG",94,0)
 . S ITEMNUM=OFFSET+($P(DOMAIN,"#",2)*SECSIZE)
"RTN","HMPDJFSG",95,0)
 . M ^TMP("HMPF",$J,HMPFCNT)=^XTMP(BATCH,TASK,DOMAIN,OFFSET)
"RTN","HMPDJFSG",96,0)
 . S ^TMP("HMPF",$J,HMPFCNT,.3)=$$WRAPPER(DOMAIN,PIDS,$S('COUNT:0,1:ITEMNUM),+DOMSIZE,1)  ;*S68-JCH*
"RTN","HMPDJFSG",97,0)
 . S HMPLITEM="SYNC",HMPCLFLG=0 ;DE3502
"RTN","HMPDJFSG",98,0)
 Q
"RTN","HMPDJFSG",99,0)
NXTSTRM ; Reset variables for next date in this HMP stream
"RTN","HMPDJFSG",100,0)
 ; from GETSUB expects HMPFSTRM,HMPFDT,HMPFIDX
"RTN","HMPDJFSG",101,0)
 ; HMPFSTRM set to "" if no next stream
"RTN","HMPDJFSG",102,0)
 ; HMPFIDX  set to 0 if next stream, or left as is
"RTN","HMPDJFSG",103,0)
 ; HMPFDT   set to last date actually used
"RTN","HMPDJFSG",104,0)
 N NEXTDT,DONE
"RTN","HMPDJFSG",105,0)
 S NEXTDT=HMPFDT,DONE=0
"RTN","HMPDJFSG",106,0)
 F  D  Q:DONE
"RTN","HMPDJFSG",107,0)
 . S NEXTDT=$$FMADD^XLFDT(NEXTDT,1)
"RTN","HMPDJFSG",108,0)
 . I NEXTDT>$$DT^XLFDT S HMPFSTRM="" S DONE=1 Q
"RTN","HMPDJFSG",109,0)
 . S $P(HMPFSTRM,"~",3)=NEXTDT
"RTN","HMPDJFSG",110,0)
 . I '+$O(^XTMP(HMPFSTRM,0)) Q  ; nothing here, try next date
"RTN","HMPDJFSG",111,0)
 . S HMPFDT=NEXTDT,HMPFIDX=0,HMPFSEQ=0,DONE=1
"RTN","HMPDJFSG",112,0)
 Q
"RTN","HMPDJFSG",113,0)
SETLIMIT(ARGS) ; sets HMPFLIM, HMPFMAX, HMPFSIZE variables *S68-JCH*
"RTN","HMPDJFSG",114,0)
 I $G(ARGS("maxSize")) D  Q
"RTN","HMPDJFSG",115,0)
 . S HMPFLIM="s"
"RTN","HMPDJFSG",116,0)
 . S HMPFMAX=ARGS("maxSize")
"RTN","HMPDJFSG",117,0)
 . D GETLST^XPAR(.HMPFSIZE,"PKG","HMP DOMAIN SIZES","I")
"RTN","HMPDJFSG",118,0)
 . S HMPFSIZE=0
"RTN","HMPDJFSG",119,0)
 ; otherwise
"RTN","HMPDJFSG",120,0)
 S HMPFLIM="c"
"RTN","HMPDJFSG",121,0)
 S HMPFMAX=$G(ARGS("max"),99999)
"RTN","HMPDJFSG",122,0)
 S HMPFSIZE=0
"RTN","HMPDJFSG",123,0)
 Q
"RTN","HMPDJFSG",124,0)
INCITEM(DOMAIN) ; increment counters as item added *S68-JCH*
"RTN","HMPDJFSG",125,0)
 S HMPFCNT=HMPFCNT+1
"RTN","HMPDJFSG",126,0)
 I HMPFLIM="s" Q HMPFSIZE+$G(HMPFSIZE(DOMAIN),1200)
"RTN","HMPDJFSG",127,0)
 I HMPFLIM="c" Q HMPFCNT
"RTN","HMPDJFSG",128,0)
 Q 0
"RTN","HMPDJFSG",129,0)
FINISH(HMPDEL,HMPERR) ;reset the FIRST object delimiter, add header and tail
"RTN","HMPDJFSG",130,0)
 ; expects HMPFCNT,HMPFDT,HMPFSEQ,HMPFHMP,HMPFLAST
"RTN","HMPDJFSG",131,0)
 N CLOSE,I,START,TEXT,UID,X,II
"RTN","HMPDJFSG",132,0)
 S X=$G(^TMP("HMPF",$J,1,.3))
"RTN","HMPDJFSG",133,0)
 I $E(X,1,2)="}," S X=$E(X,3,$L(X)),^TMP("HMPF",$J,1,.3)=X
"RTN","HMPDJFSG",134,0)
 S ^TMP("HMPF",$J,.5)=$$APIHDR^HMPDJFS1(HMPFCNT,HMPFDT_"-"_HMPFSEQ)
"RTN","HMPDJFSG",135,0)
 I $D(HMPERR) D
"RTN","HMPDJFSG",136,0)
 .S CLOSE=$S(HMPFCNT&($G(HMPLITEM)="SYNC"):"},",HMPFCNT:",",1:""),START=1 ;us18180 don't close if previous was freshness
"RTN","HMPDJFSG",137,0)
 .S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)=CLOSE_"{""error"":["
"RTN","HMPDJFSG",138,0)
 .S I=0 F  S I=$O(HMPERR(I)) Q:I'>0  D
"RTN","HMPDJFSG",139,0)
 ..S TEXT=HMPERR(I)
"RTN","HMPDJFSG",140,0)
 ..S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)=$S(START:"",1:",")_TEXT S START=0
"RTN","HMPDJFSG",141,0)
 .S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)="]}" ;US18180 close object
"RTN","HMPDJFSG",142,0)
 .S HMPCLFLG=1 ;US18180 Mark object as closed
"RTN","HMPDJFSG",143,0)
 ; operational sync item or patient
"RTN","HMPDJFSG",144,0)
 ; Check for closing flag & HMPFCNT and if it doesn't exist add a closing brace, always close array
"RTN","HMPDJFSG",145,0)
 S ^TMP("HMPF",$J,HMPFCNT+1)=$S(HMPFCNT&('$G(HMPCLFLG)):"}",1:"")_"]",HMPFCNT=HMPFCNT+1
"RTN","HMPDJFSG",146,0)
 I $G(HMPSTGET)="true" D  ; true if "getStatus" argument passed in
"RTN","HMPDJFSG",147,0)
 . S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)=",""syncStatii"":[",START=1
"RTN","HMPDJFSG",148,0)
 . S I=0 F  S I=$O(^HMP(800000,I)) Q:+I=0  D
"RTN","HMPDJFSG",149,0)
 .. I $P($G(^HMP(800000,I,0)),"^",1)=HMPFHMP D
"RTN","HMPDJFSG",150,0)
 ... S II=0 F  S II=$O(^HMP(800000,I,1,II)) Q:+II=0  D
"RTN","HMPDJFSG",151,0)
 .... S TEXT="{""pid"":"_II_",""status"":"_$P(^HMP(800000,I,1,II,0),"^",2)_"}"
"RTN","HMPDJFSG",152,0)
 .... S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)=$S(START:"",1:",")_TEXT S START=0
"RTN","HMPDJFSG",153,0)
 . S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)="]"
"RTN","HMPDJFSG",154,0)
 S ^TMP("HMPF",$J,HMPFCNT+1)="}}"
"RTN","HMPDJFSG",155,0)
 ; remove any ^XTMP nodes that have been successfully sent based on LAST
"RTN","HMPDJFSG",156,0)
 N DATE,SEQ,LASTDT,LASTSEQ,STRM,LSTRM,RSTRM
"RTN","HMPDJFSG",157,0)
 S LASTDT=+$P(HMPFLAST,"-"),LASTSEQ=+$P(HMPFLAST,"-",2)
"RTN","HMPDJFSG",158,0)
 S RSTRM="HMPFS~"_HMPFHMP_"~",LSTRM=$L(RSTRM),STRM=RSTRM
"RTN","HMPDJFSG",159,0)
 F  S STRM=$O(^XTMP(STRM)) Q:'$L(STRM)  Q:$E(STRM,1,LSTRM)'=RSTRM  D
"RTN","HMPDJFSG",160,0)
 . S DATE=$P(STRM,"~",3) Q:DATE>LASTDT
"RTN","HMPDJFSG",161,0)
 . S SEQ=0 F  S SEQ=$O(^XTMP(STRM,"tidy",SEQ)) Q:'SEQ  Q:(DATE=LASTDT)&(SEQ>LASTSEQ)  D TIDYX(STRM,SEQ)
"RTN","HMPDJFSG",162,0)
 Q
"RTN","HMPDJFSG",163,0)
TIDYX(STREAM,SEQ) ; clean up extracts after they have been retrieved
"RTN","HMPDJFSG",164,0)
 ; from FINISH ;DE6047 make resilient
"RTN","HMPDJFSG",165,0)
 N BATCH,DOMAIN,TASK
"RTN","HMPDJFSG",166,0)
 Q:$G(STREAM)=""  Q:$G(SEQ)=""
"RTN","HMPDJFSG",167,0)
 S BATCH=$G(^XTMP(STREAM,"tidy",SEQ,"batch"))
"RTN","HMPDJFSG",168,0)
 S DOMAIN=$G(^XTMP(STREAM,"tidy",SEQ,"domain"))
"RTN","HMPDJFSG",169,0)
 S TASK=$G(^XTMP(STREAM,"tidy",SEQ,"task"))
"RTN","HMPDJFSG",170,0)
 I BATCH=""!(DOMAIN="")!(TASK="") D
"RTN","HMPDJFSG",171,0)
 . N C,J,TXT
"RTN","HMPDJFSG",172,0)
 . S C=1,TXT(C)=" Freshness Stream: "_STREAM_", missing TIDY elements in SEQ: "_SEQ
"RTN","HMPDJFSG",173,0)
 . S C=C+1,TXT(C)=" "  ; blank line following word-processing text, $$NWNTRY^HMPLOG appends to end
"RTN","HMPDJFSG",174,0)
 . S J=$$NWNTRY^HMPLOG($$NOW^XLFDT,"M",.TXT)  ; log event as type "missing"
"RTN","HMPDJFSG",175,0)
 I BATCH'="" D
"RTN","HMPDJFSG",176,0)
 . I DOMAIN="<done>" I '$O(^XTMP(BATCH,0)) K ^XTMP(BATCH) Q  ;Prevent cleardown if another request already running DE7406
"RTN","HMPDJFSG",177,0)
 . I TASK'="",DOMAIN'="" K ^XTMP(BATCH,TASK,DOMAIN)
"RTN","HMPDJFSG",178,0)
 K ^XTMP(STREAM,"tidy",SEQ)
"RTN","HMPDJFSG",179,0)
 Q
"RTN","HMPDJFSG",180,0)
SYNCSTRT(SEQNODE) ;Build syncStart object with demograhics
"RTN","HMPDJFSG",181,0)
 ;expects HMPFSYS, HMPFHMP, HMPFCNT, HMPFSIZE *S68-JCH*
"RTN","HMPDJFSG",182,0)
 S HMPFSIZE=$$INCITEM("patient")  ;*S68-JCH*
"RTN","HMPDJFSG",183,0)
 N DFN,FILTER,DFN,WRAP
"RTN","HMPDJFSG",184,0)
 S DFN=$P($P(SEQNODE,U,3),"~",3) ; HMPFX~hmpSrvId~dfn
"RTN","HMPDJFSG",185,0)
 I DFN D
"RTN","HMPDJFSG",186,0)
 . N RSLT ;cpc 2015/10/01
"RTN","HMPDJFSG",187,0)
 . S FILTER("patientId")=DFN,FILTER("domain")="patient"
"RTN","HMPDJFSG",188,0)
 . D GET^HMPDJ(.RSLT,.FILTER)
"RTN","HMPDJFSG",189,0)
 . M ^TMP("HMPF",$J,HMPFCNT)=^TMP("HMP",$J,1)
"RTN","HMPDJFSG",190,0)
 S ^TMP("HMPF",$J,HMPFCNT,.3)=$$WRAPPER("syncStart",$$PIDS^HMPDJFS(DFN),$S(DFN:1,1:-1),$S(DFN:1,1:-1)) ; for OPD there is no object, so 4th argument is 0
"RTN","HMPDJFSG",191,0)
 Q
"RTN","HMPDJFSG",192,0)
SYNCDONE(SEQNODE) ; Build syncStatus object and stick in ^TMP
"RTN","HMPDJFSG",193,0)
 ;expects: HMPFSYS, HMPFCNT, HMPFHMP, HMPFSIZE  *S68-JCH*
"RTN","HMPDJFSG",194,0)
 N HMPBATCH,DFN,STS,STSJSON,X,ERR
"RTN","HMPDJFSG",195,0)
 S HMPBATCH=$P(SEQNODE,U,3) ; HMPFX~hmpSrvId~dfn
"RTN","HMPDJFSG",196,0)
 S DFN=$P(HMPBATCH,"~",3)
"RTN","HMPDJFSG",197,0)
 S STS("uid")="urn:va:syncStatus:"_HMPFSYS_":"_DFN
"RTN","HMPDJFSG",198,0)
 S STS("initialized")="true"
"RTN","HMPDJFSG",199,0)
 I DFN S STS("localId")=DFN
"RTN","HMPDJFSG",200,0)
 S X="" F  S X=$O(^XTMP(HMPBATCH,0,"count",X)) Q:'$L(X)  D
"RTN","HMPDJFSG",201,0)
 . S STS("domainTotals",X)=^XTMP(HMPBATCH,0,"count",X)
"RTN","HMPDJFSG",202,0)
 ;If resubscribing a patient, just send demographics
"RTN","HMPDJFSG",203,0)
 I DFN'="OPD",$D(^HMP(800000,"AITEM",DFN)) D
"RTN","HMPDJFSG",204,0)
 . N HMP99
"RTN","HMPDJFSG",205,0)
 . S HMP99=""
"RTN","HMPDJFSG",206,0)
 . F  S HMP99=$O(STS("domainTotals",HMP99)) Q:'HMP99  I HMP99'="patient" S STS("domainTotals",HMP99)=0 ;Reset all domain counts to zero except for demographics
"RTN","HMPDJFSG",207,0)
 D ENCODE^HMPJSON("STS","STSJSON","ERR")
"RTN","HMPDJFSG",208,0)
 I $D(ERR) S $EC=",UJSON encode error," Q
"RTN","HMPDJFSG",209,0)
 S HMPFSIZE=$$INCITEM("syncstatus") ; *S68-JCH*
"RTN","HMPDJFSG",210,0)
 M ^TMP("HMPF",$J,HMPFCNT)=STSJSON
"RTN","HMPDJFSG",211,0)
 S ^TMP("HMPF",$J,HMPFCNT,.3)=$$WRAPPER("syncStatus",$$PIDS^HMPDJFS(DFN),1,1)
"RTN","HMPDJFSG",212,0)
 Q
"RTN","HMPDJFSG",213,0)
SYNCMETA(SNODE) ;US11019 Build NEW syncStart object
"RTN","HMPDJFSG",214,0)
 ;expects HMPFSYS, HMPFHMP, HMPFCNT ;need to rebuild SNODE because WRAPPER expects it to fall in
"RTN","HMPDJFSG",215,0)
 N BATCH,DFN,WRAP,METADOM
"RTN","HMPDJFSG",216,0)
 S DFN=$P(SNODE,U,1)
"RTN","HMPDJFSG",217,0)
 S METADOM=$P(SNODE,U,3)
"RTN","HMPDJFSG",218,0)
 S BATCH="HMPFX~"_HMPFHMP_"~"_DFN
"RTN","HMPDJFSG",219,0)
 S $P(SNODE,U,3)=BATCH
"RTN","HMPDJFSG",220,0)
 S HMPFSIZE=$$INCITEM("syncmeta") ;need to increment count
"RTN","HMPDJFSG",221,0)
 S ^TMP("HMPF",$J,HMPFCNT,.3)=$$WRAPPER("syncStart"_"#"_METADOM,$$PIDS^HMPDJFS(DFN),$S(DFN:1,1:-1),$S(DFN:1,1:-1))
"RTN","HMPDJFSG",222,0)
 S ^TMP("HMPF",$J,HMPFCNT,1)="null" ;always null object with this record
"RTN","HMPDJFSG",223,0)
 S HMPCLFLG=0 ; DE3502
"RTN","HMPDJFSG",224,0)
 Q
"RTN","HMPDJFSG",225,0)
SYNCERR(SNODE,HMPERR) ;
"RTN","HMPDJFSG",226,0)
 N BATCH,CNT,DFN,NUM,OFFSET,PIDS,TASK,TOTAL,X
"RTN","HMPDJFSG",227,0)
 S DFN=$P(SNODE,U),X=$P(SNODE,U,3)
"RTN","HMPDJFSG",228,0)
 S PIDS=$$PIDS^HMPDJFS(DFN)
"RTN","HMPDJFSG",229,0)
 S TASK=$P(X,":",2),TOTAL=$P(X,":",4)
"RTN","HMPDJFSG",230,0)
 S BATCH="HMPFX~"_HMPFHMP_"~"_DFN ; extract node in ^XTMP
"RTN","HMPDJFSG",231,0)
 S CNT=$O(HMPERR(""),-1)
"RTN","HMPDJFSG",232,0)
 S NUM=0 F  S NUM=$O(^XTMP(BATCH,TASK,"error",NUM)) Q:NUM'>0  D
"RTN","HMPDJFSG",233,0)
 .S CNT=CNT+1 S HMPERR(CNT)=$G(^XTMP(BATCH,TASK,"error",NUM,1))
"RTN","HMPDJFSG",234,0)
 Q
"RTN","HMPDJFSG",235,0)
FRESHITM(SEQNODE,DELETE,ERROR) ;Get freshness item and stick in ^TMP
"RTN","HMPDJFSG",236,0)
 ; expects HMPFSYS, HMPFHMP
"RTN","HMPDJFSG",237,0)
 N ACT,DFN,DOMAIN,ECNT,FILTER,ID,RSLT,UID,HMP97,HMPI,WRAP,HMPPAT7,HMPPAT8
"RTN","HMPDJFSG",238,0)
 S FILTER("noHead")=1
"RTN","HMPDJFSG",239,0)
 S DFN=$P(SEQNODE,U),DOMAIN=$P(SEQNODE,U,2),ID=$P(SEQNODE,U,3),ACT=$P(SEQNODE,U,4)
"RTN","HMPDJFSG",240,0)
 ;Next 2 IFs added to prevent <UNDEF> in LKUP^HMPDJ00. JD - 3/4/16. DE3869
"RTN","HMPDJFSG",241,0)
 ;HMPFSTRM and HMPFIDX are defined in the GETSUB section above.
"RTN","HMPDJFSG",242,0)
 ;For "pt-select", which is an operational data domain, ID=patient IEN and DFN="OPD". For ptient domains ID=DFN
"RTN","HMPDJFSG",243,0)
 ;We want the checks to be for all patient domains and pt-select of the operational data domain
"RTN","HMPDJFSG",244,0)
 ;Kill the freshness stream entry with the bad patient IEN
"RTN","HMPDJFSG",245,0)
 I ACT'="@",DFN=+DFN,'$D(^DPT(DFN,0)) K ^XTMP(HMPFSTRM,HMPFIDX) Q  ;For patient domains
"RTN","HMPDJFSG",246,0)
 I ACT'="@",DOMAIN="pt-select",ID=+ID,'$D(^DPT(ID,0)) K ^XTMP(HMPFSTRM,HMPFIDX) Q
"RTN","HMPDJFSG",247,0)
 ;
"RTN","HMPDJFSG",248,0)
 ;Create a phantom "patient" if visit is the domain
"RTN","HMPDJFSG",249,0)
 I DOMAIN="visit" D
"RTN","HMPDJFSG",250,0)
 .S HMPPAT7=HMPFIDX_".99",HMPPAT8=^XTMP(HMPFSTRM,HMPFIDX),$P(HMPPAT8,U,2)="patient" ;BL;DE2280
"RTN","HMPDJFSG",251,0)
 .S ^XTMP(HMPFSTRM,HMPPAT7)=HMPPAT8
"RTN","HMPDJFSG",252,0)
 ;==JD END
"RTN","HMPDJFSG",253,0)
 D  ; DE3691, add date/time with seconds to FILTER parameters, Feb 29 2016 ;moved 2/9/2017 so always available
"RTN","HMPDJFSG",254,0)
 . N DAY,SECS,TM S SECS=$P($G(^XTMP(HMPFSTRM,HMPFIDX)),U,5),DAY=$P(HMPFSTRM,"~",3)
"RTN","HMPDJFSG",255,0)
 . Q:('DAY)!('$L(SECS))  ; must have date and seconds, could be zero seconds (midnight)
"RTN","HMPDJFSG",256,0)
 . S TM=$S(SECS:SECS#60/100+(SECS#3600\60)/100+(SECS\3600)/100,SECS=0:".000001",1:"")  ; if zero (midnight) push to 1 second after
"RTN","HMPDJFSG",257,0)
 . Q:'$L(TM)  ; couldn't compute time
"RTN","HMPDJFSG",258,0)
 . S FILTER("freshnessDateTime")=DAY+TM
"RTN","HMPDJFSG",259,0)
 I ACT'="@" D
"RTN","HMPDJFSG",260,0)
 . S FILTER("id")=ID
"RTN","HMPDJFSG",261,0)
 . S FILTER("domain")=DOMAIN
"RTN","HMPDJFSG",262,0)
 . I DFN="OPD" D GET^HMPEF(.RSLT,.FILTER)
"RTN","HMPDJFSG",263,0)
 . I +DFN>0 D
"RTN","HMPDJFSG",264,0)
 ..  S FILTER("patientId")=DFN
"RTN","HMPDJFSG",265,0)
 ..  D GET^HMPDJ(.RSLT,.FILTER)
"RTN","HMPDJFSG",266,0)
 I '$D(ACT) S ACT=$P(SEQNODE,U,4)  ;BL;DE7719 ACT becomes undefined
"RTN","HMPDJFSG",267,0)
 I ACT'="@",$L($G(^TMP("HMP",$J,"error")))>0 D BLDSERR(DFN,.ERROR)  Q
"RTN","HMPDJFSG",268,0)
 I '$D(^TMP("HMP",$J,1)) S ACT="@"
"RTN","HMPDJFSG",269,0)
 I ACT="@" D
"RTN","HMPDJFSG",270,0)
 . S UID=$$SETUID^HMPUTILS(DOMAIN,$S(+DFN>0:DFN,1:""),ID)
"RTN","HMPDJFSG",271,0)
 . S HMP97=UID
"RTN","HMPDJFSG",272,0)
 . K ^TMP("HMP",$J) S ^TMP("HMP",$J,1)="" ; Need to dummy this up or it will never get set later
"RTN","HMPDJFSG",273,0)
 ;Add syncstart, data and syncstatus to JSON for unsolicited updates - US4588 & US3682
"RTN","HMPDJFSG",274,0)
 I (DOMAIN="pt-select")!(DOMAIN="user")!(DOMAIN["asu-")!(DOMAIN="doc-def")!(DFN=+DFN) D  Q
"RTN","HMPDJFSG",275,0)
 .D ADHOC^HMPUTIL1(DOMAIN,.HMPFCNT,DFN)
"RTN","HMPDJFSG",276,0)
 .I $P(HMPFIDX,".",2)=99 K ^XTMP(HMPFSTRM,HMPFIDX) ;Remove the phantom "patient"; JD
"RTN","HMPDJFSG",277,0)
 .S HMPLITEM="FRESH" ;DE3502
"RTN","HMPDJFSG",278,0)
 ;
"RTN","HMPDJFSG",279,0)
 S WRAP=$$WRAPPER(DOMAIN,$$PIDS^HMPDJFS(DFN),1,1) ;N.B. this updates the .3 node on this HMPFCNT
"RTN","HMPDJFSG",280,0)
 F HMPI=1:1 Q:'$D(^TMP("HMP",$J,HMPI))  D
"RTN","HMPDJFSG",281,0)
 . S HMPFCNT=HMPFCNT+1
"RTN","HMPDJFSG",282,0)
 . M ^TMP("HMPF",$J,HMPFCNT)=^TMP("HMP",$J,HMPI)
"RTN","HMPDJFSG",283,0)
 . I HMPLITEM="SYNC" S HMPLITEM="FRESH" I WRAP="," S ^TMP("HMPF",$J,HMPFCNT,.3)="}," Q  ;DE3502 add closing
"RTN","HMPDJFSG",284,0)
 . S ^TMP("HMPF",$J,HMPFCNT,.3)=WRAP
"RTN","HMPDJFSG",285,0)
 Q
"RTN","HMPDJFSG",286,0)
BLDSERR(DFN,ERROR,ID,DOMAIN) ;Create syncError object in ERRJSON
"RTN","HMPDJFSG",287,0)
 ;expects: HMPBATCH, HMPFSYS, HMPFZTSK
"RTN","HMPDJFSG",288,0)
 N COUNT,ERRVAL,ERROBJ,ERR,ERRCNT,ERRMSG,SYNCERR
"RTN","HMPDJFSG",289,0)
 M ERRVAL=^TMP("HMP",$J,"error")
"RTN","HMPDJFSG",290,0)
 I $G(ERRVAL)="" Q
"RTN","HMPDJFSG",291,0)
 S ERRVAL="{"_ERRVAL_"}"
"RTN","HMPDJFSG",292,0)
 D DECODE^HMPJSON("ERRVAL","ERROBJ","ERR")
"RTN","HMPDJFSG",293,0)
 I $D(ERR) S $EC=",UJSON decode error,"
"RTN","HMPDJFSG",294,0)
 S ERRMSG=ERROBJ("error","message")
"RTN","HMPDJFSG",295,0)
 Q:'$L(ERRMSG)
"RTN","HMPDJFSG",296,0)
 S SYNCERR("uid")="urn:va:"_$S($G(DOMAIN)'="":DOMAIN,1:"syncError")_":"_HMPFSYS_":"_DFN_":"_$S($G(ID)'="":ID,1:"FRESHNESS") ;include proper id if available
"RTN","HMPDJFSG",297,0)
 S SYNCERR("collection")=$G(DOMAIN)
"RTN","HMPDJFSG",298,0)
 S SYNCERR("error")=ERRMSG
"RTN","HMPDJFSG",299,0)
 D ENCODE^HMPJSON("SYNCERR","ERRJSON","ERR") I $D(ERR) S $EC=",UJSON encode error," Q
"RTN","HMPDJFSG",300,0)
 S COUNT=$O(ERROR(""),-1)  ;*BEGIN*S68-JCH*
"RTN","HMPDJFSG",301,0)
 S ERRCNT=0 F  S ERRCNT=$O(ERRJSON(ERRCNT)) Q:ERRCNT'>0  D
"RTN","HMPDJFSG",302,0)
 . S COUNT=COUNT+1 M ERROR(COUNT)=ERRJSON(ERRCNT)  ;*END*S68-JCH*
"RTN","HMPDJFSG",303,0)
 Q
"RTN","HMPDJFSG",304,0)
WRAPPER(DOMAIN,PIDS,OFFSET,DOMSIZE,FROMXTR) ;return JSON wrapper for each item *S68-JCH*
"RTN","HMPDJFSG",305,0)
 ;add object tag if extract total not zero or total passed as -1
"RTN","HMPDJFSG",306,0)
 ;seq and total tags only added if non-zero
"RTN","HMPDJFSG",307,0)
 ;DOMAIN = "syncStart"_"#"_METADOM if this is being called from syncMeta
"RTN","HMPDJFSG",308,0)
 N X,Y,FIRST,THISBTCH,HMPSVERS ;US11019
"RTN","HMPDJFSG",309,0)
 ;Ensure that X exists
"RTN","HMPDJFSG",310,0)
 S X=""
"RTN","HMPDJFSG",311,0)
 S THISBTCH=$P(SNODE,U,3) ;US18005
"RTN","HMPDJFSG",312,0)
 S HMPSVERS=$G(^XTMP(THISBTCH,"HMPSVERS")) ;US11019 If HMPSVERS=0 then running in previous mode
"RTN","HMPDJFSG",313,0)
 ;S HMPSTMP=$G(^XTMP(THISBTCH,"HMPSTMP")) ;PJH - THIS USED ONLY FOR OPD COMPILE IN PRIOR VERSION - NEEDS REMOVING US6734
"RTN","HMPDJFSG",314,0)
 ;This was working for operational data, not patient data
"RTN","HMPDJFSG",315,0)
 ;DFN will be OPD if this is operational data
"RTN","HMPDJFSG",316,0)
 I DFN="OPD" D
"RTN","HMPDJFSG",317,0)
 . S:$P($G(DOMAIN),"#")'="syncStart" X="},{""collection"":"""_$P(DOMAIN,"#")_""""_PIDS ;US11019
"RTN","HMPDJFSG",318,0)
 E  S X="},{""collection"":"""_$P(DOMAIN,"#")_""""_PIDS  ; If ONLY patient data exists
"RTN","HMPDJFSG",319,0)
 I HMPLITEM="FRESH" I $E(X)="}" S X=$E(X,2,$L(X)) ; DE3502 - remove closing when coming from Fresh
"RTN","HMPDJFSG",320,0)
 ;
"RTN","HMPDJFSG",321,0)
 I $P(DOMAIN,"#")'="syncStart" S THISBTCH="HMPFX~"_HMPFHMP_"~"_DFN
"RTN","HMPDJFSG",322,0)
 I THISBTCH'="",$O(^XTMP(THISBTCH,"refInfo",""))'="" D  ;US18005
"RTN","HMPDJFSG",323,0)
 . N ZDOMAIN
"RTN","HMPDJFSG",324,0)
 . S ZDOMAIN=$S($P(DOMAIN,"#")="syncStart":$P(DOMAIN,"#",2),1:$P(DOMAIN,"#"))
"RTN","HMPDJFSG",325,0)
 . S FIRST=1
"RTN","HMPDJFSG",326,0)
 . S X=X_",""referenceInfo"":{"
"RTN","HMPDJFSG",327,0)
 . S Y="" F  S Y=$O(^XTMP(THISBTCH,"refInfo",Y)) Q:Y=""  S:'FIRST X=X_"," S FIRST=0 S X=X_""""_Y_""":"""_^(Y)_""""
"RTN","HMPDJFSG",328,0)
 . S Y=$S(ZDOMAIN="":$G(^XTMP(THISBTCH,"JOBID")),1:$G(^XTMP(THISBTCH,"JOBID",ZDOMAIN)))
"RTN","HMPDJFSG",329,0)
 . I Y'="" S:'FIRST X=X_"," S X=X_"""jobId"":"""_Y_""""
"RTN","HMPDJFSG",330,0)
 . S X=X_"}"
"RTN","HMPDJFSG",331,0)
 I '($P(DOMAIN,"#")="syncStart"&(DFN="OPD")) S X=X_",""unsolicitedUpdate"":"_$S($G(FILTER("freshnessDateTime")):"true",1:"false") ;US18245
"RTN","HMPDJFSG",332,0)
 I $P(DOMAIN,"#")="syncStart" D  Q X  ;DE7827 generate metastamp even if no entry
"RTN","HMPDJFSG",333,0)
 .;--- Start US3907 ---
"RTN","HMPDJFSG",334,0)
 .;Pass JobId and RootJobId back in the response if we were given them
"RTN","HMPDJFSG",335,0)
 .;This bridges the gap between Job status and Sync Status (since VistA will be giving the syncStatus)
"RTN","HMPDJFSG",336,0)
 .;US11019 use domain specific Job id
"RTN","HMPDJFSG",337,0)
 .S Y=$S($P(DOMAIN,"#",2)="":$G(^XTMP(THISBTCH,"JOBID")),1:$G(^XTMP(THISBTCH,"JOBID",$P(DOMAIN,"#",2)))) ;US11019
"RTN","HMPDJFSG",338,0)
 .I Y]"" S X=X_",""jobId"":"""_Y_""""
"RTN","HMPDJFSG",339,0)
 .S Y=$G(^XTMP(THISBTCH,"ROOTJOBID"))
"RTN","HMPDJFSG",340,0)
 .I Y]"" S X=X_",""rootJobId"":"""_Y_""""
"RTN","HMPDJFSG",341,0)
 .;--- End US3907 ---
"RTN","HMPDJFSG",342,0)
 .I DFN'="OPD" D METAPT^HMPMETA(SNODE,$P(DOMAIN,"#",2)) Q  ;US11019 extra para ;Collect Patient metastamp data from XTMP - US6734 - DE7827 piece 2 will have domain or be null
"RTN","HMPDJFSG",343,0)
 .D METAOP^HMPMETA(SNODE) ; Collect OPD metastamp data from XTMP - US6734
"RTN","HMPDJFSG",344,0)
 ;
"RTN","HMPDJFSG",345,0)
 S X=X_","
"RTN","HMPDJFSG",346,0)
 ;if batched by extract  *S68-JCH*
"RTN","HMPDJFSG",347,0)
 I $G(OFFSET)>-1 S X=X_"""seq"":"_OFFSET_","
"RTN","HMPDJFSG",348,0)
 I $G(DOMSIZE)>-1 S X=X_"""total"":"_DOMSIZE_","
"RTN","HMPDJFSG",349,0)
 I $G(OFFSET)>-1 S X=X_"""object"":"
"RTN","HMPDJFSG",350,0)
 Q X
"RTN","HMPDJFSG",351,0)
NOOP(LASTITM) ;No-op, don't return any items
"RTN","HMPDJFSG",352,0)
 S ^TMP("HMPF",$J,.5)=$$APIHDR^HMPDJFS1(0,LASTITM)_"]}}"
"RTN","HMPDJFSG",353,0)
 Q
"RTN","HMPDJFSM")
0^21^B126535134
"RTN","HMPDJFSM",1,0)
HMPDJFSM ;SLC/KCM,ASMR/BL,CK,CPC,AFS/PB - PROTOCOLS & API's FOR MONITORING ;Sep 23, 2016 10:44:23
"RTN","HMPDJFSM",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3,4**;Sep 01, 2011;Build 13
"RTN","HMPDJFSM",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFSM",4,0)
 ;
"RTN","HMPDJFSM",5,0)
 Q  ; no entry at top
"RTN","HMPDJFSM",6,0)
 ;DE4611, routine cleanup to bring it up to eHMP standards, 22 September 2016
"RTN","HMPDJFSM",7,0)
 ;
"RTN","HMPDJFSM",8,0)
 ;subroutines that support API^HMPDJFS
"RTN","HMPDJFSM",9,0)
 ; HLTHCHK: check health of VistA Server subscription
"RTN","HMPDJFSM",10,0)
 ; $$HLTHINFO = domain progress (Health Info) in JSON
"RTN","HMPDJFSM",11,0)
 ; $$HLTHHDR = domain-progress (Health Header) header in JSON
"RTN","HMPDJFSM",12,0)
 ;
"RTN","HMPDJFSM",13,0)
 ;subroutines that support SRV^HMPEQ & EVTS^HMPEQ
"RTN","HMPDJFSM",14,0)
 ; $$LSTREAM = latest stream for this server
"RTN","HMPDJFSM",15,0)
 ; $$WAIT = # seconds the batch has been waiting
"RTN","HMPDJFSM",16,0)
 ; $$LOBJ = last domain>count retrieved for this batch
"RTN","HMPDJFSM",17,0)
 ;
"RTN","HMPDJFSM",18,0)
 ;subroutines that support protocol menu HMPM EVT QUE MGR MENU
"RTN","HMPDJFSM",19,0)
 ; $$GETSRV = protocol HMPM EVT QUE CHANGE SERVER [Change Server]
"RTN","HMPDJFSM",20,0)
 ; EMERSTOP: protocol HMPM EVT QUE EMERGENCY STOP [not distributed]
"RTN","HMPDJFSM",21,0)
 ; RSTRTFR: protocol HMPM EVT QUE RESTART FRESHNESS [not distributed]
"RTN","HMPDJFSM",22,0)
 ; SETFRUP: set flag for freshness updates
"RTN","HMPDJFSM",23,0)
 ; CHGFTYP: change the freshness update flag for domain
"RTN","HMPDJFSM",24,0)
 ; STOPFTYP: stop freshness updates for domain
"RTN","HMPDJFSM",25,0)
 ; STRTFTYP: resume freshness updates for domain
"RTN","HMPDJFSM",26,0)
 ; $$GETFTYP = select & return domain from list
"RTN","HMPDJFSM",27,0)
 ; SHOWFTYP: show freshness domains
"RTN","HMPDJFSM",28,0)
 ; EVNTYPS: protocol HMPM EVT QUE CHANGE DOMAIN [Change Domain]
"RTN","HMPDJFSM",29,0)
 ;
"RTN","HMPDJFSM",30,0)
ADDPT(PAT) ; Add patient to server
"RTN","HMPDJFSM",31,0)
 N ARGS,RESULT,SRV,Y
"RTN","HMPDJFSM",32,0)
 I '$G(PAT) S PAT=$$GETPAT() Q:'PAT
"RTN","HMPDJFSM",33,0)
 S SRV=$$GETSRV() Q:SRV'>0
"RTN","HMPDJFSM",34,0)
 I $G(^HMP(800000,"AITEM",PAT,SRV))>0 W !,"Patient "_PAT_" already synched."
"RTN","HMPDJFSM",35,0)
 ;
"RTN","HMPDJFSM",36,0)
 S ARGS("command")="putPtSubscription"
"RTN","HMPDJFSM",37,0)
 S ARGS("server")=$P(^HMP(800000,SRV,0),"^")
"RTN","HMPDJFSM",38,0)
 S ARGS("localId")=PAT
"RTN","HMPDJFSM",39,0)
 D API^HMPDJFS(.RESULT,.ARGS)
"RTN","HMPDJFSM",40,0)
 ;IA10035, DE2818
"RTN","HMPDJFSM",41,0)
 S Y=$S(^TMP("HMPF",$J,1)["location":$P($G(^DPT(PAT,0)),"^")_" is being synched.",1:"Subscription failed.")_" DFN: "_PAT
"RTN","HMPDJFSM",42,0)
 W !,Y
"RTN","HMPDJFSM",43,0)
 Q
"RTN","HMPDJFSM",44,0)
 ;
"RTN","HMPDJFSM",45,0)
GETPAT() ; Return DFN for a patient
"RTN","HMPDJFSM",46,0)
 N DIC,Y
"RTN","HMPDJFSM",47,0)
 S DIC=2,DIC(0)="AEMQ"  ; DE2818, changed to file number, not global
"RTN","HMPDJFSM",48,0)
 D ^DIC
"RTN","HMPDJFSM",49,0)
 Q +Y
"RTN","HMPDJFSM",50,0)
 ;
"RTN","HMPDJFSM",51,0)
HLTHCHK(ARGS) ; check health of VistA Server subscription
"RTN","HMPDJFSM",52,0)
 ; called by:
"RTN","HMPDJFSM",53,0)
 ;   API^HMPDJFS: asynchronous extracts & freshness via stream
"RTN","HMPDJFSM",54,0)
 ; calls:
"RTN","HMPDJFSM",55,0)
 ;   SETERR^HMPDJFS: log error
"RTN","HMPDJFSM",56,0)
 ;   $$HLTHINFO = progress for this domain
"RTN","HMPDJFSM",57,0)
 ;   $$HLTHHDR = JSON header for progress report
"RTN","HMPDJFSM",58,0)
 ; input:
"RTN","HMPDJFSM",59,0)
 ;   .ARGS("server") = HMP Server Id
"RTN","HMPDJFSM",60,0)
 ;  also these, created by API^HMPDJFS, passed thru symbol table:
"RTN","HMPDJFSM",61,0)
 ;   HMPFRSP = [unused?]
"RTN","HMPDJFSM",62,0)
 ;   HMPFHMP = server name
"RTN","HMPDJFSM",63,0)
 ;   HMPSYS = system id
"RTN","HMPDJFSM",64,0)
 ; output: in ^TMP("HMPF",$job,node): list of active extracts
"RTN","HMPDJFSM",65,0)
 ;   {pid="ABCD;229",domainsCompleted=8,domainsPending=20,
"RTN","HMPDJFSM",66,0)
 ;   objectCount=137,subscribeTime=20140609112734,
"RTN","HMPDJFSM",67,0)
 ;   extractStatus="initializing"}
"RTN","HMPDJFSM",68,0)
 ;
"RTN","HMPDJFSM",69,0)
 ; DE4611 begin, 21 September 2016
"RTN","HMPDJFSM",70,0)
 N DFN,HMPIEN,NXTDFN,STS,TIME
"RTN","HMPDJFSM",71,0)
 S HMPIEN=$O(^HMP(800000,"B",HMPFHMP,0))
"RTN","HMPDJFSM",72,0)
 I 'HMPIEN D SETERR^HMPDJFS("Server not registered") Q
"RTN","HMPDJFSM",73,0)
 ; NODE - count of nodes in returned JSON
"RTN","HMPDJFSM",74,0)
 ; NXTDFN - next DFN in queue using naked reference, if found append comma to each JSON node
"RTN","HMPDJFSM",75,0)
 S NODE=0,STS=""
"RTN","HMPDJFSM",76,0)
 F  S STS=$O(^HMP(800000,HMPIEN,1,"AP",STS)) Q:'$L(STS)  D
"RTN","HMPDJFSM",77,0)
 . S TIME="" F  S TIME=$O(^HMP(800000,HMPIEN,1,"AP",STS,TIME)) Q:'$L(TIME)  D
"RTN","HMPDJFSM",78,0)
 ..  S DFN="" F  S DFN=$O(^HMP(800000,HMPIEN,1,"AP",STS,TIME,DFN)) Q:'DFN  S NXTDFN=$O(^(DFN)) D
"RTN","HMPDJFSM",79,0)
 ...   S NODE=NODE+1,^TMP("HMPF",$J,NODE)=$$HLTHINFO(HMPFHMP,HMPIEN,DFN)_$S(NXTDFN:",",1:"")
"RTN","HMPDJFSM",80,0)
 ; DE4611 end
"RTN","HMPDJFSM",81,0)
 S ^TMP("HMPF",$J,.5)=$$HLTHHDR(NODE)
"RTN","HMPDJFSM",82,0)
 S ^TMP("HMPF",$J,NODE+1)="]}}"
"RTN","HMPDJFSM",83,0)
 Q
"RTN","HMPDJFSM",84,0)
 ;
"RTN","HMPDJFSM",85,0)
 ;
"RTN","HMPDJFSM",86,0)
HLTHINFO(SRV,SRVIEN,DFN) ;function, return domain progress in JSON
"RTN","HMPDJFSM",87,0)
 ; called by:
"RTN","HMPDJFSM",88,0)
 ;   HLTHCHK
"RTN","HMPDJFSM",89,0)
 ; input:
"RTN","HMPDJFSM",90,0)
 ;   SRV = name of server, to use in ^XTMP subscripts
"RTN","HMPDJFSM",91,0)
 ;   SRVIEN = record # in file HMP Subscription (800000)
"RTN","HMPDJFSM",92,0)
 ;   DFN = record # in file Patient (2)
"RTN","HMPDJFSM",93,0)
 ; output = string of JSON reporting progress for this domain
"RTN","HMPDJFSM",94,0)
 ;   {pid,domainsCompleted,domainsPending,objectCount,queuedTime,
"RTN","HMPDJFSM",95,0)
 ;   phase(waiting,extracting)
"RTN","HMPDJFSM",96,0)
 ;
"RTN","HMPDJFSM",97,0)
 N BATCH,CNT,DOM,DONE,HMPERR,INFO,JSON,PEND,QTIME,STS
"RTN","HMPDJFSM",98,0)
 S BATCH="HMPFX~"_SRV_"~"_DFN
"RTN","HMPDJFSM",99,0)
 S QTIME=$G(^XTMP(BATCH,0,"time")) S:$L(QTIME) QTIME=$$HTFM^XLFDT(QTIME)
"RTN","HMPDJFSM",100,0)
 S DONE=0,PEND=0,CNT=0
"RTN","HMPDJFSM",101,0)
 S DOM="" F  S DOM=$O(^XTMP(BATCH,0,"status",DOM)) Q:DOM=""  D
"RTN","HMPDJFSM",102,0)
 . S CNT=CNT+$G(^XTMP(BATCH,0,"count",DOM))
"RTN","HMPDJFSM",103,0)
 . I $G(^XTMP(BATCH,0,"status",DOM)) S DONE=DONE+1 Q
"RTN","HMPDJFSM",104,0)
 . S PEND=PEND+1
"RTN","HMPDJFSM",105,0)
 S INFO("pid")=$$PID^HMPDJFS(DFN)
"RTN","HMPDJFSM",106,0)
 S INFO("domainsCompleted")=DONE,INFO("domainsPending")=PEND,INFO("objectCount")=CNT
"RTN","HMPDJFSM",107,0)
 I $L(QTIME) S INFO("queuedTime")=$$FMTHL7^HMPSTMP(QTIME)  ; DE5016
"RTN","HMPDJFSM",108,0)
 S STS=$P($G(^HMP(800000,SRVIEN,1,DFN,0)),"^",2)
"RTN","HMPDJFSM",109,0)
 S INFO("extractStatus")=$S(STS=1:"initializing",STS=2:"initialized",1:"uninitialized")
"RTN","HMPDJFSM",110,0)
 D ENCODE^HMPJSON("INFO","JSON","HMPERR")
"RTN","HMPDJFSM",111,0)
 I $D(HMPERR) Q HMPERR  ;  encoding error, return that
"RTN","HMPDJFSM",112,0)
 Q JSON(1) ; return domain progress
"RTN","HMPDJFSM",113,0)
 ;
"RTN","HMPDJFSM",114,0)
 ;
"RTN","HMPDJFSM",115,0)
HLTHHDR(COUNT) ; function, domain-progress header (health header) as JSON
"RTN","HMPDJFSM",116,0)
 ;   COUNT = total # items
"RTN","HMPDJFSM",117,0)
 ;   HMPSYS = system id (in symbol table)
"RTN","HMPDJFSM",118,0)
 N X  ; $$KSP^XUPARAM = return kernel system parameter WHERE (domain)
"RTN","HMPDJFSM",119,0)
 S X="{"_$$APIVERS^HMPDJFS()_",""params"":{""domain"":"""_$$KSP^XUPARAM("WHERE")_""""
"RTN","HMPDJFSM",120,0)
 S X=X_",""systemId"":"""_HMPSYS_"""},""data"":{""updated"":"""_$$HL7NOW^HMPDJ_""""
"RTN","HMPDJFSM",121,0)
 S X=X_",""totalItems"":"_COUNT
"RTN","HMPDJFSM",122,0)
 S X=X_",""items"":["
"RTN","HMPDJFSM",123,0)
 Q X  ; return domain-progress header
"RTN","HMPDJFSM",124,0)
 ;
"RTN","HMPDJFSM",125,0)
LSTREAM(SRV) ;function, latest stream for this server
"RTN","HMPDJFSM",126,0)
 ; called by:
"RTN","HMPDJFSM",127,0)
 ;   EVTS^HMPEQ: return events for server's last stream
"RTN","HMPDJFSM",128,0)
 ;   SRV^HMPEQ: process one server
"RTN","HMPDJFSM",129,0)
 ; calls: none
"RTN","HMPDJFSM",130,0)
 ; input:
"RTN","HMPDJFSM",131,0)
 ;   SRV = ien of server in file HMP Subscription (8000000)
"RTN","HMPDJFSM",132,0)
 ;
"RTN","HMPDJFSM",133,0)
 N STREAM
"RTN","HMPDJFSM",134,0)
 S STREAM="HMPFS~"_$P($G(^HMP(800000,SRV,0)),"^")_"~9999999999"
"RTN","HMPDJFSM",135,0)
 Q $O(^XTMP(STREAM),-1)  ; return last stream ID for this server
"RTN","HMPDJFSM",136,0)
 ;
"RTN","HMPDJFSM",137,0)
WAIT(BATCH) ; function, number of seconds the batch has been waiting
"RTN","HMPDJFSM",138,0)
 ; called by:
"RTN","HMPDJFSM",139,0)
 ;   SRV^HMPEQ: process one server
"RTN","HMPDJFSM",140,0)
 ; BATCH = extract batch in ^XTMP
"RTN","HMPDJFSM",141,0)
 N START S START=$G(^XTMP(BATCH,0,"time")) Q:'START 0
"RTN","HMPDJFSM",142,0)
 Q $$HDIFF^XLFDT($H,START,2)  ; return # seconds waiting
"RTN","HMPDJFSM",143,0)
 ;
"RTN","HMPDJFSM",144,0)
LOBJ(BATCH,TASK) ;function, last item in domain or <finished> if none
"RTN","HMPDJFSM",145,0)
 ; called by SRV^HMPEQ process one server
"RTN","HMPDJFSM",146,0)
 ;   BATCH = extract batch
"RTN","HMPDJFSM",147,0)
 ;   TASK = extract-batch task id
"RTN","HMPDJFSM",148,0)
 Q:'$G(TASK) "no task"  ; must have task
"RTN","HMPDJFSM",149,0)
 N DOMAIN,LASTITM,NUM S (DOMAIN,LASTITM,NUM)=""
"RTN","HMPDJFSM",150,0)
 F  S DOMAIN=$O(^XTMP(BATCH,0,"status",DOMAIN)) Q:'$L(DOMAIN)  D  Q:$L(LASTITM)
"RTN","HMPDJFSM",151,0)
 . Q:$G(^XTMP(BATCH,0,"status",DOMAIN))  ; domain complete
"RTN","HMPDJFSM",152,0)
 . S NUM=$O(^XTMP(BATCH,TASK,DOMAIN,""),-1),LASTITM=DOMAIN_$S(NUM:" #"_NUM,1:"")
"RTN","HMPDJFSM",153,0)
 ;
"RTN","HMPDJFSM",154,0)
 Q $S('$L(LASTITM):"<finished>",1:LASTITM)  ; return last domain item
"RTN","HMPDJFSM",155,0)
 ;
"RTN","HMPDJFSM",156,0)
 ; subroutines that support protocol menu HMPM EVT QUE MGR MENU
"RTN","HMPDJFSM",157,0)
GETSRV() ;extrinsic variable, interactive protocol HMPM EVT QUE CHANGE SERVER [Change Server]
"RTN","HMPDJFSM",158,0)
 ; called by:
"RTN","HMPDJFSM",159,0)
 ;   protocol unwinder
"RTN","HMPDJFSM",160,0)
 ; output = IEN of server to monitor
"RTN","HMPDJFSM",161,0)
 ;
"RTN","HMPDJFSM",162,0)
 N DIC,Y
"RTN","HMPDJFSM",163,0)
 S DIC="^HMP(800000,",DIC(0)="AEMQ",DIC("A")="Select HMP server instance: "
"RTN","HMPDJFSM",164,0)
 D ^DIC Q +Y ; return IEN for the server to monitor
"RTN","HMPDJFSM",165,0)
 ;
"RTN","HMPDJFSM",166,0)
 ;
"RTN","HMPDJFSM",167,0)
EMERSTOP ; protocol HMPM EVT QUE EMERGENCY STOP [not distributed]
"RTN","HMPDJFSM",168,0)
 ; called by:
"RTN","HMPDJFSM",169,0)
 ;   protocol unwinder
"RTN","HMPDJFSM",170,0)
 ;  user selects a domain to stop freshness updates
"RTN","HMPDJFSM",171,0)
 ; Emergency Stop for Freshness
"RTN","HMPDJFSM",172,0)
 D SETFRUP(0) Q
"RTN","HMPDJFSM",173,0)
 ;
"RTN","HMPDJFSM",174,0)
RSTRTFR ; protocol HMPM EVT QUE RESTART FRESHNESS [not distributed]
"RTN","HMPDJFSM",175,0)
 ; called by:
"RTN","HMPDJFSM",176,0)
 ;   protocol unwinder:
"RTN","HMPDJFSM",177,0)
 ;   user selects a domain to resume freshness updates
"RTN","HMPDJFSM",178,0)
 ; Re-start freshness updates
"RTN","HMPDJFSM",179,0)
 D SETFRUP(1) Q
"RTN","HMPDJFSM",180,0)
 ;
"RTN","HMPDJFSM",181,0)
SETFRUP(START) ; set flag for freshness updates
"RTN","HMPDJFSM",182,0)
 ; called by:
"RTN","HMPDJFSM",183,0)
 ;   EMERSTOP
"RTN","HMPDJFSM",184,0)
 ;   RSTRTFR
"RTN","HMPDJFSM",185,0)
 ; input:
"RTN","HMPDJFSM",186,0)
 ;   START = 0 to stop, 1 to resume
"RTN","HMPDJFSM",187,0)
 ;   user selects a domain to stop or resume freshness updates
"RTN","HMPDJFSM",188,0)
 ; output:
"RTN","HMPDJFSM",189,0)
 ;   freshness updates stopped or resumed for selected domain
"RTN","HMPDJFSM",190,0)
 ;
"RTN","HMPDJFSM",191,0)
 D:'START
"RTN","HMPDJFSM",192,0)
 . W !,"WARNING!  This will stop freshness updates for the HMP."
"RTN","HMPDJFSM",193,0)
 . W !,"          It will be necessary to re-synch patient data.",!
"RTN","HMPDJFSM",194,0)
 D:START
"RTN","HMPDJFSM",195,0)
 . W !,"This will --RESUME-- freshness updates for the HMP."
"RTN","HMPDJFSM",196,0)
 . W !,"It may be necessary to re-synch patient and operational data.",!
"RTN","HMPDJFSM",197,0)
 N TYPLST,DMNLST,I,TYPE
"RTN","HMPDJFSM",198,0)
 D EVNTYPS(.TYPLST)
"RTN","HMPDJFSM",199,0)
 S I=0 F  S I=$O(TYPLST(I)) Q:'I  S DMNLST(TYPLST(I))=""
"RTN","HMPDJFSM",200,0)
 S TYPE=$$GETFTYP(.DMNLST,START)
"RTN","HMPDJFSM",201,0)
 Q:TYPE=""
"RTN","HMPDJFSM",202,0)
 I TYPE="*" D  Q  ; all types
"RTN","HMPDJFSM",203,0)
 . S TYPE="" F  S TYPE=$O(DMNLST(TYPE)) Q:TYPE=""  D CHGFTYP(TYPE,START)
"RTN","HMPDJFSM",204,0)
 D CHGFTYP(TYPE,START) Q
"RTN","HMPDJFSM",205,0)
 ;
"RTN","HMPDJFSM",206,0)
CHGFTYP(TYPE,ACTN) ; change the freshness update flag for a type
"RTN","HMPDJFSM",207,0)
 ; input:
"RTN","HMPDJFSM",208,0)
 ;   TYPE = domain to change
"RTN","HMPDJFSM",209,0)
 ;   ACTN = 0 to stop, 1 to resume
"RTN","HMPDJFSM",210,0)
 I ACTN D STRTFTYP(TYPE) Q
"RTN","HMPDJFSM",211,0)
 ; otherwise
"RTN","HMPDJFSM",212,0)
 D STOPFTYP(TYPE) Q
"RTN","HMPDJFSM",213,0)
 ;
"RTN","HMPDJFSM",214,0)
STOPFTYP(DMN) ; stop freshness updates for domain, DMN = domain to stop
"RTN","HMPDJFSM",215,0)
 ; create ^XTMP zero node if needed, save data for 30 days
"RTN","HMPDJFSM",216,0)
 D:'$D(^XTMP("HMP-off",0)) NEWXTMP^HMPDJFS("HMP-off",30,"Switch off HMP freshness updates")
"RTN","HMPDJFSM",217,0)
 W !,"Stopping freshness updates for: "_DMN
"RTN","HMPDJFSM",218,0)
 S ^XTMP("HMP-off",DMN)=1 Q
"RTN","HMPDJFSM",219,0)
 ;
"RTN","HMPDJFSM",220,0)
STRTFTYP(DMN) ; resume freshness updates for domain, DMN = domain to resume
"RTN","HMPDJFSM",221,0)
 W !,"Resuming freshness updates for: "_DMN
"RTN","HMPDJFSM",222,0)
 K ^XTMP("HMP-off",DMN) Q
"RTN","HMPDJFSM",223,0)
 ;
"RTN","HMPDJFSM",224,0)
GETFTYP(DMNLST,ACTN) ;function, select & return domain from list, DMNLST passed by ref.
"RTN","HMPDJFSM",225,0)
 ; input:
"RTN","HMPDJFSM",226,0)
 ;  DMNLST(domain name) = "" for all selectable domains
"RTN","HMPDJFSM",227,0)
 ;  ACTN = 0 to stop, 1 to resume
"RTN","HMPDJFSM",228,0)
 ;   user prompted to select a domain
"RTN","HMPDJFSM",229,0)
 ;
"RTN","HMPDJFSM",230,0)
 N P,T,X
"RTN","HMPDJFSM",231,0)
 S P=$S(ACTN:"start",1:"stop")
"RTN","HMPDJFSM",232,0)
 F  D  Q:X'["?"
"RTN","HMPDJFSM",233,0)
 . D SHOWFTYP(.DMNLST)
"RTN","HMPDJFSM",234,0)
 . W !!,"Choose domain to "_P_". (* "_P_"s all): "
"RTN","HMPDJFSM",235,0)
 . R X:DTIME S:X["^" X="" Q:X=""  Q:X="*"
"RTN","HMPDJFSM",236,0)
 . S X=$$LOW^XLFSTR(X) Q:$D(DMNLST(X))  ; match found
"RTN","HMPDJFSM",237,0)
 . S T=$O(DMNLST(X))  ; check for partial match
"RTN","HMPDJFSM",238,0)
 . I X=$E(T,1,$L(X)) W "  "_T S X=T Q  ; partial match found
"RTN","HMPDJFSM",239,0)
 . W "  ??",! S X="?"  ; set X to ? to keep asking
"RTN","HMPDJFSM",240,0)
 ;
"RTN","HMPDJFSM",241,0)
 Q X  ; return selected domain
"RTN","HMPDJFSM",242,0)
 ;
"RTN","HMPDJFSM",243,0)
 ;
"RTN","HMPDJFSM",244,0)
SHOWFTYP(DMNLST) ; show freshness domains
"RTN","HMPDJFSM",245,0)
 ;   DMNLST(domain name) = "" for all selectable domains, passed by ref.
"RTN","HMPDJFSM",246,0)
 ;list of domains displayed on current device
"RTN","HMPDJFSM",247,0)
 N C,DM,Y
"RTN","HMPDJFSM",248,0)
 S C=0,(DM,Y)="" F  S DM=$O(DMNLST(DM)) Q:'$L(DM)  D
"RTN","HMPDJFSM",249,0)
 . S C=C+1 I C<3 S Y=Y_DM_$J(" ",26-$L(DM)) Q  ; 3 domains per line padded
"RTN","HMPDJFSM",250,0)
 . S Y=Y_DM W !,Y S C=0,Y=""  ; write the line
"RTN","HMPDJFSM",251,0)
 ;
"RTN","HMPDJFSM",252,0)
 I $L(Y) W !,Y  ; in case any domains are left
"RTN","HMPDJFSM",253,0)
 Q
"RTN","HMPDJFSM",254,0)
 ;
"RTN","HMPDJFSM",255,0)
 ;
"RTN","HMPDJFSM",256,0)
EVNTYPS(LIST) ; protocol HMPM EVT QUE CHANGE DOMAIN [Change Domain], LIST passed by ref.
"RTN","HMPDJFSM",257,0)
 ;;allergy
"RTN","HMPDJFSM",258,0)
 ;;appointment
"RTN","HMPDJFSM",259,0)
 ;;auxiliary
"RTN","HMPDJFSM",260,0)
 ;;consult
"RTN","HMPDJFSM",261,0)
 ;;cpt
"RTN","HMPDJFSM",262,0)
 ;;diagnosis
"RTN","HMPDJFSM",263,0)
 ;;diet
"RTN","HMPDJFSM",264,0)
 ;;document
"RTN","HMPDJFSM",265,0)
 ;;education
"RTN","HMPDJFSM",266,0)
 ;;exam
"RTN","HMPDJFSM",267,0)
 ;;factor
"RTN","HMPDJFSM",268,0)
 ;;image
"RTN","HMPDJFSM",269,0)
 ;;immunization
"RTN","HMPDJFSM",270,0)
 ;;lab
"RTN","HMPDJFSM",271,0)
 ;;med
"RTN","HMPDJFSM",272,0)
 ;;mh
"RTN","HMPDJFSM",273,0)
 ;;obs
"RTN","HMPDJFSM",274,0)
 ;;order
"RTN","HMPDJFSM",275,0)
 ;;patient
"RTN","HMPDJFSM",276,0)
 ;;pov
"RTN","HMPDJFSM",277,0)
 ;;problem
"RTN","HMPDJFSM",278,0)
 ;;procedure
"RTN","HMPDJFSM",279,0)
 ;;pt-select
"RTN","HMPDJFSM",280,0)
 ;;ptf
"RTN","HMPDJFSM",281,0)
 ;;roadtrip
"RTN","HMPDJFSM",282,0)
 ;;roster
"RTN","HMPDJFSM",283,0)
 ;;skin
"RTN","HMPDJFSM",284,0)
 ;;surgery
"RTN","HMPDJFSM",285,0)
 ;;task
"RTN","HMPDJFSM",286,0)
 ;;treatment
"RTN","HMPDJFSM",287,0)
 ;;user
"RTN","HMPDJFSM",288,0)
 ;;visit
"RTN","HMPDJFSM",289,0)
 ;;vital
"RTN","HMPDJFSM",290,0)
 ;
"RTN","HMPDJFSM",291,0)
 ; list above ends with single semi-colon comment
"RTN","HMPDJFSM",292,0)
 ;called by: protocol unwinder
"RTN","HMPDJFSM",293,0)
 ; output: LIST(#) = domain name
"RTN","HMPDJFSM",294,0)
 N I,X
"RTN","HMPDJFSM",295,0)
 F I=1:1 S X=$P($T(EVNTYPS+I),";;",2,99) Q:X=""  S LIST(I)=X
"RTN","HMPDJFSM",296,0)
 Q
"RTN","HMPDJFSM",297,0)
 ;
"RTN","HMPDJFSM",298,0)
RES ; DE8313 - PB - Aug 3, 2017 - get slots in use for the HMP EXTRACT RESOURCE
"RTN","HMPDJFSM",299,0)
 N HMPERR,HMPIEN,HMPSLOT,MXSLOTS,SLOTS,RES,CNT,JSON,NODE,X,LST
"RTN","HMPDJFSM",300,0)
 K MSG
"RTN","HMPDJFSM",301,0)
 S HMPIEN=$$FIND1^DIC(3.54,"","MX","HMP EXTRACT RESOURCE","","","HMPERR")
"RTN","HMPDJFSM",302,0)
 I $G(HMPIEN)=0!($G(HMPIEN)="") S ^TMP("HMPF",$J,1)="{"_$$APIVERS^HMPDJFS()_",""removed"":""false"",""msg"":""resource doesn't exist""}" Q
"RTN","HMPDJFSM",303,0)
 D GETS^DIQ(3.54,HMPIEN_",","**","I","HMPSLOT","HMPERR")
"RTN","HMPDJFSM",304,0)
 S MXSLOTS=$G(HMPSLOT(3.54,HMPIEN_",",1,"I"))
"RTN","HMPDJFSM",305,0)
 S (CNT,NODE)=1,(TOTAL,FLAG)=0
"RTN","HMPDJFSM",306,0)
 F SLOTS=1:1:MXSLOTS+1 D
"RTN","HMPDJFSM",307,0)
 . N CDTTM,DIFF,JOB,ST,START,STATUS,ZTSK,ZTCPU,%,CDTTM1,IENS,START1,JSON,RES
"RTN","HMPDJFSM",308,0)
 . S IENS=SLOTS_","_$G(HMPIEN)_","
"RTN","HMPDJFSM",309,0)
 . Q:$G(HMPSLOT(3.542,IENS,.01,"I"))=""
"RTN","HMPDJFSM",310,0)
 . S FLAG=1
"RTN","HMPDJFSM",311,0)
 . S ZTCPU=$G(HMPSLOT(3.542,IENS,1,"I")),JOB=$G(HMPSLOT(3.542,IENS,2,"I")),ZTSK=$G(HMPSLOT(3.542,IENS,3,"I")),START1=$$HTFM^XLFDT($G(HMPSLOT(3.542,IENS,4,"I")))
"RTN","HMPDJFSM",312,0)
 . S START=$P($$FMTHL7^XLFDT($G(START1)),"-")
"RTN","HMPDJFSM",313,0)
 . I $G(ZTSK)'="" D
"RTN","HMPDJFSM",314,0)
 . . D NOW^%DTC S CDTTM1=%,CDTTM=$P($$FMTHL7^XLFDT($G(CDTTM1)),"-")
"RTN","HMPDJFSM",315,0)
 . . S:$G(HMPSLOT(3.542,IENS,4,"I"))'="" ST=$$HTFM^XLFDT($G(HMPSLOT(3.542,IENS,4,"I")))
"RTN","HMPDJFSM",316,0)
 . . D ISQED^%ZTLOAD S STATUS=$S(ZTSK(0)=0:"TASK IS NOT SCHEDULED",ZTSK(0)="":"TASK DOES NOT EXIST",ZTSK(0)=1:"TASK IS SCHEDULED",1:"")
"RTN","HMPDJFSM",317,0)
 . . S:$G(ST)'="" DIFF=$$FMDIFF^XLFDT(CDTTM1,ST,2)
"RTN","HMPDJFSM",318,0)
 . . S RES("cpu")=$G(ZTCPU),RES("job")=$G(JOB),RES("task")=$G(ZTSK)
"RTN","HMPDJFSM",319,0)
 . . S RES("taskStatus")=$G(STATUS),RES("start")=$G(START),RES("runTime")=$G(DIFF),RES("slot")=$G(SLOTS)
"RTN","HMPDJFSM",320,0)
 . . S TOTAL=$G(TOTAL)+1
"RTN","HMPDJFSM",321,0)
 . . D:$G(FLAG)=1 ENCODE^HMPJSON("RES","JSON","HMPERR") ; W !,CNT,"  ",JSON(1)
"RTN","HMPDJFSM",322,0)
 . . S ^TMP("HMPF",$J,CNT)=JSON(1),CNT=CNT+1
"RTN","HMPDJFSM",323,0)
 N J F J=1:1:CNT-2 S ^TMP("HMPF",$J,J)=$G(^TMP("HMPF",$J,J))_","
"RTN","HMPDJFSM",324,0)
 D RES1
"RTN","HMPDJFSM",325,0)
 K FLAG,TOTAL
"RTN","HMPDJFSM",326,0)
 Q
"RTN","HMPDJFSM",327,0)
RES1 ;  DE8313 - PB - Aug 3, 2017 - set header data for the slots in use report
"RTN","HMPDJFSM",328,0)
 S X="{"_$$APIVERS^HMPDJFS()_",""params"":{""domain"":"""_$$KSP^XUPARAM("WHERE")_""""
"RTN","HMPDJFSM",329,0)
 S X=X_",""systemId"":"""_HMPSYS_"""},""data"":{""updated"":"""_$$HL7NOW^HMPDJ_""""
"RTN","HMPDJFSM",330,0)
 S X=X_",""totalItems"":"_TOTAL
"RTN","HMPDJFSM",331,0)
 S:$G(CNT)>0 X=X_",""items"":["
"RTN","HMPDJFSM",332,0)
 S ^TMP("HMPF",$J,.5)=X
"RTN","HMPDJFSM",333,0)
 I $G(FLAG)=1 S ^TMP("HMPF",$J,CNT+1)="]}}"
"RTN","HMPDJFSM",334,0)
 E  S ^TMP("HMPF",$J,CNT+1)="]}}"
"RTN","HMPDJFSM",335,0)
 Q
"RTN","HMPDJFSM",336,0)
CLEAR(SLOT) ; DE8313 - PB - Aug 3, 2017 - clear a resource slot
"RTN","HMPDJFSM",337,0)
 ;Input:
"RTN","HMPDJFSM",338,0)
 ;SLOT - Slot number to clear
"RTN","HMPDJFSM",339,0)
 N HMPERR,HMPIEN,HMPSLOT,MXSLOTS,CLR,NODE
"RTN","HMPDJFSM",340,0)
 K MSG
"RTN","HMPDJFSM",341,0)
 S NODE=1
"RTN","HMPDJFSM",342,0)
 S HMPIEN=$$FIND1^DIC(3.54,"","MX","HMP EXTRACT RESOURCE","","","HMPERR")
"RTN","HMPDJFSM",343,0)
 I $G(HMPIEN)'>0!($G(HMPIEN)="") S ^TMP("HMPF",$J,1)="{"_$$APIVERS^HMPDJFS()_",""removed"":""false"",""msg"":""resource doesn't exist""}" Q
"RTN","HMPDJFSM",344,0)
 N IEN S IEN=$G(SLOT)_","_$G(HMPIEN)
"RTN","HMPDJFSM",345,0)
 S ACTIVE=$$GET1^DIQ(3.542,IEN,.01)
"RTN","HMPDJFSM",346,0)
 I $G(ACTIVE)'>0 S ^TMP("HMPF",$J,1)="{"_$$APIVERS^HMPDJFS()_",""removed"":""false"",""msg"":""slot is not in use""}" Q
"RTN","HMPDJFSM",347,0)
 D KILLRES^%ZISC(HMPIEN,SLOT)
"RTN","HMPDJFSM",348,0)
 S CLR=$$GET1^DIQ(3.542,SLOT_","_HMPIEN_",",.01,"I")
"RTN","HMPDJFSM",349,0)
 I $G(CLR)'>0 S ^TMP("HMPF",$J,1)="{"_$$APIVERS^HMPDJFS()_",""removed"":""true""}"
"RTN","HMPDJFSM",350,0)
 I $G(CLR)>0 S ^TMP("HMPF",$J,1)="{"_$$APIVERS^HMPDJFS()_",""removed"":""false""}"
"RTN","HMPDJFSM",351,0)
 K SLOT,ACTIVE
"RTN","HMPDJFSM",352,0)
 Q
"RTN","HMPDJFSP")
0^25^B155700320
"RTN","HMPDJFSP",1,0)
HMPDJFSP ;SLC/KCM.ASMR/RRB,CPC-PUT/POST for extract & freshness ;Jan 20, 2017 17:18:18
"RTN","HMPDJFSP",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3,4**;Sep 01, 2011;Build 13
"RTN","HMPDJFSP",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFSP",4,0)
 ;
"RTN","HMPDJFSP",5,0)
 Q  ; no entry at top
"RTN","HMPDJFSP",6,0)
 ;
"RTN","HMPDJFSP",7,0)
 ; 2017-01-12 AFS/CPC US18005 -  Add passthrough fields
"RTN","HMPDJFSP",8,0)
 ; 2017-04-27 CPC DE7967 - Reject duplicate sync request if still processing
"RTN","HMPDJFSP",9,0)
 ;
"RTN","HMPDJFSP",10,0)
 ; --- create a new patient subscription
"RTN","HMPDJFSP",11,0)
 ;
"RTN","HMPDJFSP",12,0)
PUTSUB(ARGS) ; return location after creating a new subscription
"RTN","HMPDJFSP",13,0)
 ; called by:
"RTN","HMPDJFSP",14,0)
 ;   API^HMPDJFS
"RTN","HMPDJFSP",15,0)
 ; falls through to:
"RTN","HMPDJFSP",16,0)
 ;   QREJOIN
"RTN","HMPDJFSP",17,0)
 ; calls:
"RTN","HMPDJFSP",18,0)
 ;   $$TM^%ZTLOAD
"RTN","HMPDJFSP",19,0)
 ;   SETERR^HMPDJFS
"RTN","HMPDJFSP",20,0)
 ;   $$GETDFN^MPIF001
"RTN","HMPDJFSP",21,0)
 ;   SETERR^HMPDJFS
"RTN","HMPDJFSP",22,0)
 ;   OPDOMS^HMPDJFSD
"RTN","HMPDJFSP",23,0)
 ;   PTDOMS^HMPDJFSD
"RTN","HMPDJFSP",24,0)
 ;   SETPAT
"RTN","HMPDJFSP",25,0)
 ;   NEWXTMP^HMPDJFS
"RTN","HMPDJFSP",26,0)
 ;   SETMARK
"RTN","HMPDJFSP",27,0)
 ;   INIT^HMPMETA
"RTN","HMPDJFSP",28,0)
 ;   $$HTFM^XLFDT
"RTN","HMPDJFSP",29,0)
 ;   SAVETASK^HMPDJFSQ
"RTN","HMPDJFSP",30,0)
 ;   $$PID^HMPDJFS
"RTN","HMPDJFSP",31,0)
 ; output:
"RTN","HMPDJFSP",32,0)
 ;  fn returns      : /hmp/subscription/{hmpSrvId}/patient/{sysId;dfn}
"RTN","HMPDJFSP",33,0)
 ;                  : "" if error, errors in ^TMP("HMPFERR",$J)
"RTN","HMPDJFSP",34,0)
 ; .ARGS("server")  : name of HMP server
"RTN","HMPDJFSP",35,0)
 ; .ARGS("localId") : dfn for patient to subscribe or "OPD" (operational data)
"RTN","HMPDJFSP",36,0)
 ; .ARGS("icn")     : icn for patient to subscribe
"RTN","HMPDJFSP",37,0)
 ; .ARGS("domains") : optional array of domains to initialize (deprecated)
"RTN","HMPDJFSP",38,0)
 ;
"RTN","HMPDJFSP",39,0)
 I '$$TM^%ZTLOAD D SETERR^HMPDJFS("Taskman not running") Q ""
"RTN","HMPDJFSP",40,0)
 ;
"RTN","HMPDJFSP",41,0)
 N HMPSRV,HMPFDFN,HMPBATCH,HMPFERR,I,NEWSUB,DOMAINS,HMPSVERS,HMPSTMP,HMPPRITY,HMPQBTCH ;US13442
"RTN","HMPDJFSP",42,0)
 ;
"RTN","HMPDJFSP",43,0)
 ; make sure we can identify the patient ("OPD" signals sync operational)
"RTN","HMPDJFSP",44,0)
 S HMPFDFN=$G(ARGS("localId"))
"RTN","HMPDJFSP",45,0)
 S HMPSVERS=+$G(ARGS("HMPSVERS")) ;US11019 get sync version
"RTN","HMPDJFSP",46,0)
 I HMPFDFN'="OPD" D  Q:$G(HMPFERR) ""
"RTN","HMPDJFSP",47,0)
 . I '$L(HMPFDFN),$L(ARGS("icn")) S HMPFDFN=+$$GETDFN^MPIF001(ARGS("icn"))
"RTN","HMPDJFSP",48,0)
 . I 'HMPFDFN D SETERR^HMPDJFS("No patient specified") Q
"RTN","HMPDJFSP",49,0)
 . I '$D(^DPT(HMPFDFN)) D SETERR^HMPDJFS("Patient not found")  ; IA 10035, DE2818
"RTN","HMPDJFSP",50,0)
 ;
"RTN","HMPDJFSP",51,0)
 ; make sure server is known and create batch id
"RTN","HMPDJFSP",52,0)
 S HMPSRV=HMPFHMP  ; TODO: switch to HMPFHMP as server ien
"RTN","HMPDJFSP",53,0)
 I '$L(HMPSRV) D SETERR^HMPDJFS("Missing HMP Server ID") Q ""
"RTN","HMPDJFSP",54,0)
 S HMPSRV("ien")=$O(^HMP(800000,"B",HMPSRV,0))
"RTN","HMPDJFSP",55,0)
 I 'HMPSRV("ien") D SETERR^HMPDJFS("HMP Server not registered") Q ""
"RTN","HMPDJFSP",56,0)
 S HMPBATCH="HMPFX~"_HMPSRV_"~"_HMPFDFN
"RTN","HMPDJFSP",57,0)
 S HMPQBTCH="HMPFS~"_HMPSRV_"~queue"
"RTN","HMPDJFSP",58,0)
 ;
"RTN","HMPDJFSP",59,0)
 ; set up domains to extract
"RTN","HMPDJFSP",60,0)
 D @($S(HMPFDFN="OPD":"OPDOMS",1:"PTDOMS")_"^HMPDJFSD(.DOMAINS)")
"RTN","HMPDJFSP",61,0)
 ;
"RTN","HMPDJFSP",62,0)
 ; ejk US5647
"RTN","HMPDJFSP",63,0)
 ; code below restores selective domain functionality.
"RTN","HMPDJFSP",64,0)
 ; once the complete list of domains is returned from HMPDJFSD,
"RTN","HMPDJFSP",65,0)
 ; if ARGS("domains") is passed in, anything not in that parameter
"RTN","HMPDJFSP",66,0)
 ; will be excluded from the ODS extract.
"RTN","HMPDJFSP",67,0)
 I $G(ARGS("domains"))'="" D
"RTN","HMPDJFSP",68,0)
 .F I=1:1 Q:'$D(DOMAINS(I))  I ARGS("domains")'[DOMAINS(I) K DOMAINS(I)
"RTN","HMPDJFSP",69,0)
 ;
"RTN","HMPDJFSP",70,0)
 ; see if this is new subscription and task extract if new
"RTN","HMPDJFSP",71,0)
 D SETPAT(HMPFDFN,HMPSRV,.NEWSUB) Q:$G(HMPFERR) ""
"RTN","HMPDJFSP",72,0)
 ;For operational data set stamptime as time subscription placed US6734
"RTN","HMPDJFSP",73,0)
 S HMPSTMP=$$EN^HMPSTMP("NOW") ;DE3377
"RTN","HMPDJFSP",74,0)
 ;
"RTN","HMPDJFSP",75,0)
 ;cpc US11019 following chunk of code moved out of QUINIT as was being called multiple times
"RTN","HMPDJFSP",76,0)
 ;US11019 get array of job ids by domain
"RTN","HMPDJFSP",77,0)
 ; only done once when beginning the batch, no matter how many tasked jobs
"RTN","HMPDJFSP",78,0)
 L +^XTMP(HMPBATCH):5 E  D SETERR^HMPDJFS("Cannot lock batch:"_HMPBATCH) QUIT "" ;DE7967
"RTN","HMPDJFSP",79,0)
 I $D(^XTMP(HMPBATCH)) D SETERR^HMPDJFS("Duplicate sync request for - "_HMPBATCH) L -^XTMP(HMPBATCH) QUIT "" ;DE7967
"RTN","HMPDJFSP",80,0)
 D NEWXTMP^HMPDJFS(HMPBATCH,2,"HMP Patient Extract")
"RTN","HMPDJFSP",81,0)
 ;US11019 - store domain specific job ids
"RTN","HMPDJFSP",82,0)
 N EMPB S EMPB="jobDomainId-" ;US11019
"RTN","HMPDJFSP",83,0)
 F  S EMPB=$O(ARGS(EMPB)) Q:EMPB=""  Q:EMPB'["jobDomainId-"  S:'HMPSVERS HMPSVERS=1 S ^XTMP(HMPBATCH,"JOBID",$P(EMPB,"jobDomainId-",2))=ARGS(EMPB) ; US11019 3rd version
"RTN","HMPDJFSP",84,0)
 ;US18005 - store non-specific pass through variables
"RTN","HMPDJFSP",85,0)
 S EMPB="refInfo-"
"RTN","HMPDJFSP",86,0)
 F  S EMPB=$O(ARGS(EMPB)) Q:EMPB=""  Q:EMPB'["refInfo-"  S ^XTMP(HMPBATCH,"refInfo",$P(EMPB,"refInfo-",2))=ARGS(EMPB)
"RTN","HMPDJFSP",87,0)
 S ^XTMP(HMPBATCH,"HMPSVERS")=HMPSVERS ;US11019 store sync version
"RTN","HMPDJFSP",88,0)
 I $G(ARGS("jobId"))]"" S ^XTMP(HMPBATCH,"JOBID")=ARGS("jobId") ;US3907 /US11019 /US18005
"RTN","HMPDJFSP",89,0)
 I $G(ARGS("rootJobId"))]"" S ^XTMP(HMPBATCH,"ROOTJOBID")=ARGS("rootJobId"),^XTMP(HMPBATCH,"refInfo","rootJobId")=ARGS("rootJobId")  ;US3907/US18005
"RTN","HMPDJFSP",90,0)
 S ^XTMP(HMPBATCH,0,"time")=$H
"RTN","HMPDJFSP",91,0)
 ; US6734 - setting of syncStart for OPD only
"RTN","HMPDJFSP",92,0)
 I HMPFDFN="OPD" D SETMARK("Start",HMPFDFN,HMPBATCH),INIT^HMPMETA(HMPBATCH,HMPFDFN,.ARGS) ; US6734
"RTN","HMPDJFSP",93,0)
 L -^XTMP(HMPBATCH)
"RTN","HMPDJFSP",94,0)
 ;cpc US11019 end moved code
"RTN","HMPDJFSP",95,0)
 ;US13442
"RTN","HMPDJFSP",96,0)
 S HMPPRITY=1 S:+$G(ARGS("HMPPriority")) HMPPRITY=+ARGS("HMPPriority") S:+$G(ARGS("refInfo-priority")) HMPPRITY=+ARGS("refInfo-priority") ;US18005
"RTN","HMPDJFSP",97,0)
 I '$G(ARGS("refInfo-priority")),+$G(ARGS("HMPPriority")) S ^XTMP(HMPBATCH,"refInfo","priority")=+$G(ARGS("HMPPriority")) ;US18005
"RTN","HMPDJFSP",98,0)
 I '$D(^XTMP(HMPQBTCH,0)) D  ;check basic controls exist
"RTN","HMPDJFSP",99,0)
 . S ^XTMP(HMPQBTCH,0)=$$HTFM^XLFDT(+$H+5)_U_$$HTFM^XLFDT(+$H)_U_"HMP task queue"
"RTN","HMPDJFSP",100,0)
 . S ^XTMP(HMPQBTCH,0,0)=2 ;default concurrent patients
"RTN","HMPDJFSP",101,0)
 ;put task onto task queue if new subscription for patient
"RTN","HMPDJFSP",102,0)
 I NEWSUB,+HMPFDFN D SAVETASK^HMPDJFSQ Q "/hmp/subscription/"_HMPSRV_"/patient/"_$$PID^HMPDJFS(HMPFDFN)
"RTN","HMPDJFSP",103,0)
 ;
"RTN","HMPDJFSP",104,0)
QREJOIN  ; task And come back in from queue
"RTN","HMPDJFSP",105,0)
 ; falls through from:
"RTN","HMPDJFSP",106,0)
 ;   PUTSUB
"RTN","HMPDJFSP",107,0)
 ; called by:
"RTN","HMPDJFSP",108,0)
 ;   NEWTASK^HMPDJFSQ: ZTRTN="QREJOIN^HMPDJFSP"
"RTN","HMPDJFSP",109,0)
 ; calls:
"RTN","HMPDJFSP",110,0)
 ;   UPDSTS
"RTN","HMPDJFSP",111,0)
 ;   QUINIT^HMPDJFSQ
"RTN","HMPDJFSP",112,0)
 ;   SETMARK
"RTN","HMPDJFSP",113,0)
 ;   $$PID^HMPDJFS
"RTN","HMPDJFSP",114,0)
 ;
"RTN","HMPDJFSP",115,0)
 ;Every Domain in it's own task (unless running in original mode)
"RTN","HMPDJFSP",116,0)
 I NEWSUB D  Q:$G(HMPFERR) ""
"RTN","HMPDJFSP",117,0)
 . ; if patient's extracts are held (version mismatch), put DFN on wait list
"RTN","HMPDJFSP",118,0)
 . I +HMPFDFN,$G(^XTMP("HMPFS~"_HMPSRV("ien"),"waiting")) S ^XTMP("HMPFS~"_HMPSRV("ien"),"waiting",HMPFDFN)="" QUIT
"RTN","HMPDJFSP",119,0)
 . D UPDSTS(HMPFDFN,$P(HMPBATCH,"~",2),1) ;moved from background job to once in foreground 12/17/2015
"RTN","HMPDJFSP",120,0)
 . I 'HMPSVERS N HMPFDOM M HMPFDOM=DOMAINS D QUINIT^HMPDJFSQ(HMPBATCH,HMPFDFN,.HMPFDOM) Q  ;US11019 Enable previous behavior
"RTN","HMPDJFSP",121,0)
 . S I="" F  S I=$O(DOMAINS(I)) Q:'I  S ^XTMP(HMPBATCH,0,"status",DOMAINS(I))=0 ;ensure all domains always initialised DE7604
"RTN","HMPDJFSP",122,0)
 . S I="" F  S I=$O(DOMAINS(I)) Q:'I  D
"RTN","HMPDJFSP",123,0)
 ..  N HMPFDOM
"RTN","HMPDJFSP",124,0)
 ..  S HMPFDOM(1)=DOMAINS(I)
"RTN","HMPDJFSP",125,0)
 ..  D QUINIT^HMPDJFSQ(HMPBATCH,HMPFDFN,.HMPFDOM)
"RTN","HMPDJFSP",126,0)
 ;===JD START===
"RTN","HMPDJFSP",127,0)
 ; For patient resubscribes, need to send demographics ONLY
"RTN","HMPDJFSP",128,0)
 I 'NEWSUB,HMPFDFN'="OPD",'$D(^XTMP(HMPBATCH,0,"status")) D  ;DE3331 check expanded to ensure not current
"RTN","HMPDJFSP",129,0)
 . N HMPFDOM,HMPDSAVE ;DE3331
"RTN","HMPDJFSP",130,0)
 . M HMPDSAVE=DOMAINS ;DE3331
"RTN","HMPDJFSP",131,0)
 . K DOMAINS S DOMAINS(1)="patient"
"RTN","HMPDJFSP",132,0)
 . M HMPFDOM=DOMAINS
"RTN","HMPDJFSP",133,0)
 . D QUINIT^HMPDJFSQ(HMPBATCH,HMPFDFN,.HMPFDOM)
"RTN","HMPDJFSP",134,0)
 . I $G(HMPSVERS) S I="" F  S I=$O(HMPDSAVE(I)) Q:'I  D  ;DE3331 create empty metastamp entries for remaining domains
"RTN","HMPDJFSP",135,0)
 ..  I HMPDSAVE(I)'="patient" D SETMARK("Meta",HMPFDFN,HMPDSAVE(I))
"RTN","HMPDJFSP",136,0)
 ;===JD END===
"RTN","HMPDJFSP",137,0)
 Q "/hmp/subscription/"_HMPSRV_"/patient/"_$$PID^HMPDJFS(HMPFDFN)
"RTN","HMPDJFSP",138,0)
 ;
"RTN","HMPDJFSP",139,0)
SETDOM(ATTRIB,DOMAIN,VALUE,HMPMETA) ; Set value for a domain ; cpc TA41760
"RTN","HMPDJFSP",140,0)
 ; called by:
"RTN","HMPDJFSP",141,0)
 ;   QUINIT^HMPDJFSQ
"RTN","HMPDJFSP",142,0)
 ;   DQINIT^HMPDJFSQ
"RTN","HMPDJFSP",143,0)
 ;   DOMPT
"RTN","HMPDJFSP",144,0)
 ;   MOD4STRM
"RTN","HMPDJFSP",145,0)
 ; input:
"RTN","HMPDJFSP",146,0)
 ;   ATTRIB: "status" or "count" attribute
"RTN","HMPDJFSP",147,0)
 ;   VALUE:
"RTN","HMPDJFSP",148,0)
 ;      for status, VALUE: 0=waiting, 1=ready
"RTN","HMPDJFSP",149,0)
 ;      for count,  VALUE: count of items
"RTN","HMPDJFSP",150,0)
 ;      don't update to finished value if just tracking metastamp
"RTN","HMPDJFSP",151,0)
 ;
"RTN","HMPDJFSP",152,0)
 I $G(HMPMETA)'="" S ^XTMP(HMPBATCH,0,ATTRIB,DOMAIN,$S(HMPMETA=1:"MetaStamp",HMPMETA=2:"Combined",1:"Staging"),$S(VALUE:"Stop",1:"Start"))=$H Q:(HMPMETA=1&VALUE)  ;cpc TA41760 10/7/2015 add time logging
"RTN","HMPDJFSP",153,0)
 S ^XTMP(HMPBATCH,0,ATTRIB,DOMAIN)=VALUE
"RTN","HMPDJFSP",154,0)
 Q
"RTN","HMPDJFSP",155,0)
 ;
"RTN","HMPDJFSP",156,0)
SETMARK(TYPE,HMPFDFN,HMPBATCH) ; Post markers for begin and end of initial synch
"RTN","HMPDJFSP",157,0)
 ; called by:
"RTN","HMPDJFSP",158,0)
 ;   PUTSUB
"RTN","HMPDJFSP",159,0)
 ;   PUTSUB-QREJOIN
"RTN","HMPDJFSP",160,0)
 ;   DQINIT^HMPDJFSQ
"RTN","HMPDJFSP",161,0)
 ; calls:
"RTN","HMPDJFSP",162,0)
 ;   POST^HMPDJFS
"RTN","HMPDJFSP",163,0)
 ;   SETTIDY
"RTN","HMPDJFSP",164,0)
 ;
"RTN","HMPDJFSP",165,0)
 ; ^XTMP("HMPFP","tidy",hmpServer,fmDate,sequence)=batch
"RTN","HMPDJFSP",166,0)
 Q:$G(HMPENVIR("converting"))  ; don't set markers during conversion
"RTN","HMPDJFSP",167,0)
 N HMPSRV,NODES,X
"RTN","HMPDJFSP",168,0)
 S HMPSRV=$P(HMPBATCH,"~",2)
"RTN","HMPDJFSP",169,0)
 D POST^HMPDJFS(HMPFDFN,"sync"_TYPE,HMPBATCH,"",HMPSRV,.NODES)
"RTN","HMPDJFSP",170,0)
 Q:TYPE="Start"!(TYPE="Meta")  ; US11019
"RTN","HMPDJFSP",171,0)
 D SETTIDY("<done>",.NODES)
"RTN","HMPDJFSP",172,0)
 Q
"RTN","HMPDJFSP",173,0)
 ;
"RTN","HMPDJFSP",174,0)
DOMPT(HMPFADOM) ; Load a patient domain
"RTN","HMPDJFSP",175,0)
 ; called by:
"RTN","HMPDJFSP",176,0)
 ;   DQBACKDM^HMPDJFS1
"RTN","HMPDJFSP",177,0)
 ;   DQINIT^HMPDJFSQ
"RTN","HMPDJFSP",178,0)
 ; calls:
"RTN","HMPDJFSP",179,0)
 ;   $$CHNKCNT
"RTN","HMPDJFSP",180,0)
 ;   GET^HMPDJ
"RTN","HMPDJFSP",181,0)
 ;   SETDOM
"RTN","HMPDJFSP",182,0)
 ;   CHNKFIN
"RTN","HMPDJFSP",183,0)
 ;
"RTN","HMPDJFSP",184,0)
 N FILTER,RSLT,HMPFEST,HMPCHNK  ; *S68-JCH*
"RTN","HMPDJFSP",185,0)
 S FILTER("noHead")=1
"RTN","HMPDJFSP",186,0)
 S FILTER("domain")=HMPFADOM
"RTN","HMPDJFSP",187,0)
 S FILTER("patientId")=HMPFDFN
"RTN","HMPDJFSP",188,0)
 ; -- domain var used for chunking patient objects using <domain>#<number> construct  *BEGIN*S68-JCH*
"RTN","HMPDJFSP",189,0)
 S HMPCHNK=HMPFADOM
"RTN","HMPDJFSP",190,0)
 S HMPCHNK("trigger count")=$$CHNKCNT(HMPFADOM)  ; *END*S68-JCH*
"RTN","HMPDJFSP",191,0)
 D GET^HMPDJ(.RSLT,.FILTER) ;US11019 I $G(HMPMETA) D SETDOM("status",HMPFADOM,1,1) Q  ;US11019/US6734 - do not update stream if compiling metastamp ; CPC TA41760
"RTN","HMPDJFSP",192,0)
 I $G(HMPMETA)=1 D SETDOM("status",HMPFADOM,1,1) Q  ;US11019/US6734 - do not update stream if compiling metastamp ; CPC TA41760
"RTN","HMPDJFSP",193,0)
 ; add to HMPFS queue if total>0 OR this is the first chunck (#0) section  *S68-JCH*
"RTN","HMPDJFSP",194,0)
 I ($G(@RSLT@("total"),0)>0)!($P(HMPCHNK,"#",2)=0) D CHNKFIN  ; *S68-JCH*
"RTN","HMPDJFSP",195,0)
 Q
"RTN","HMPDJFSP",196,0)
 ;
"RTN","HMPDJFSP",197,0)
CHNKCNT(DOMAIN) ; -- get patient object chunk count trigger                        *BEGIN*S68-JCH*
"RTN","HMPDJFSP",198,0)
 ; called by: DOMPT
"RTN","HMPDJFSP",199,0)
 ; calls: $$GET^XPAR
"RTN","HMPDJFSP",200,0)
 ; input: DOMAIN := current domain name being processed
"RTN","HMPDJFSP",201,0)
 ;
"RTN","HMPDJFSP",202,0)
 Q $S(+$$GET^XPAR("PKG","HMP DOMAIN SIZES",$P($G(DOMAIN),"#"),"Q")>3000:500,1:1000)  ; *END*S68-JCH*
"RTN","HMPDJFSP",203,0)
 ;
"RTN","HMPDJFSP",204,0)
CHNKINIT(HMP,HMPI) ; -- init chunk section callback  *BEGIN*S68-JCH*
"RTN","HMPDJFSP",205,0)
 ; called by:
"RTN","HMPDJFSP",206,0)
 ;   GET^HMPDJ
"RTN","HMPDJFSP",207,0)
 ;   DQINIT^HMPDJFSQ
"RTN","HMPDJFSP",208,0)
 ;   CHNKCHK
"RTN","HMPDJFSP",209,0)
 ; input by ref:
"RTN","HMPDJFSP",210,0)
 ;   HMP := $NA of location for chunk of objects
"RTN","HMPDJFSP",211,0)
 ;   HMPI := number of objects in @HMP
"RTN","HMPDJFSP",212,0)
 ;
"RTN","HMPDJFSP",213,0)
 ; -- quit if not in chunking mode
"RTN","HMPDJFSP",214,0)
 Q:'$D(HMPCHNK)
"RTN","HMPDJFSP",215,0)
 S $P(HMPCHNK,"#",2)=$S(HMPCHNK["#":$P(HMPCHNK,"#",2)+1,1:0)
"RTN","HMPDJFSP",216,0)
 S HMP=$NA(^XTMP(HMPBATCH,HMPFZTSK,HMPCHNK))
"RTN","HMPDJFSP",217,0)
 K @HMP
"RTN","HMPDJFSP",218,0)
 S HMPI=0
"RTN","HMPDJFSP",219,0)
 Q  ; *END*S68-JCH*
"RTN","HMPDJFSP",220,0)
 ;
"RTN","HMPDJFSP",221,0)
CHNKCHK(HMP,HMPI) ; -- check if chunk should be queued callback *BEGIN*S68-JCH*
"RTN","HMPDJFSP",222,0)
 ; called by:
"RTN","HMPDJFSP",223,0)
 ;   ADD^HMPDJ
"RTN","HMPDJFSP",224,0)
 ;   HMP1^HMPDJ02
"RTN","HMPDJFSP",225,0)
 ; calls:
"RTN","HMPDJFSP",226,0)
 ;   GTQ^HMPDJ
"RTN","HMPDJFSP",227,0)
 ;   CHNKFIN
"RTN","HMPDJFSP",228,0)
 ;   CHKXTMP
"RTN","HMPDJFSP",229,0)
 ;   CHNKINIT
"RTN","HMPDJFSP",230,0)
 ; input by ref:
"RTN","HMPDJFSP",231,0)
 ;   HMP := $NA of location for chunk of objects
"RTN","HMPDJFSP",232,0)
 ;   HMPI := number of objects in @HMP
"RTN","HMPDJFSP",233,0)
 ;
"RTN","HMPDJFSP",234,0)
 ; quit if not in chunking mode
"RTN","HMPDJFSP",235,0)
 Q:'$D(HMPCHNK)
"RTN","HMPDJFSP",236,0)
 ;
"RTN","HMPDJFSP",237,0)
 ; execute 'whether to chunk' criteria
"RTN","HMPDJFSP",238,0)
 Q:HMPI<HMPCHNK("trigger count")
"RTN","HMPDJFSP",239,0)
 ; -- add tail to json to section
"RTN","HMPDJFSP",240,0)
 D GTQ^HMPDJ
"RTN","HMPDJFSP",241,0)
 ; -- finish section and put on HMPFS~ queue
"RTN","HMPDJFSP",242,0)
 D CHNKFIN
"RTN","HMPDJFSP",243,0)
 ; -- check ^XTMP size before continuing; may have to HANG if too big
"RTN","HMPDJFSP",244,0)
 D CHKXTMP(HMPBATCH,HMPFZTSK)  ; US5074 disable loopback
"RTN","HMPDJFSP",245,0)
 ; -- initialize for next section
"RTN","HMPDJFSP",246,0)
 D CHNKINIT(.HMP,.HMPI)
"RTN","HMPDJFSP",247,0)
 Q  ; *END*S68-JCH*
"RTN","HMPDJFSP",248,0)
 ;
"RTN","HMPDJFSP",249,0)
CHNKFIN ; -- finish chunk section callback *BEGIN*S68-JCH*
"RTN","HMPDJFSP",250,0)
 ; called by:
"RTN","HMPDJFSP",251,0)
 ;   DOMPT
"RTN","HMPDJFSP",252,0)
 ;   CHNKCHK
"RTN","HMPDJFSP",253,0)
 ; calls:
"RTN","HMPDJFSP",254,0)
 ;   MOD4STRM
"RTN","HMPDJFSP",255,0)
 ;   POSTSEC
"RTN","HMPDJFSP",256,0)
 ;
"RTN","HMPDJFSP",257,0)
 ; -- quit if not in chunking mode
"RTN","HMPDJFSP",258,0)
 Q:'$D(HMPCHNK)
"RTN","HMPDJFSP",259,0)
 D MOD4STRM(HMPCHNK)
"RTN","HMPDJFSP",260,0)
 ; -- domain#number, <no estimated do> , chunk trigger count for domain
"RTN","HMPDJFSP",261,0)
 D POSTSEC(HMPCHNK,,HMPCHNK("trigger count"))
"RTN","HMPDJFSP",262,0)
 Q  ; *END*S68-JCH*
"RTN","HMPDJFSP",263,0)
 ;
"RTN","HMPDJFSP",264,0)
MOD4STRM(DOMAIN) ; modify extract to be ready for stream
"RTN","HMPDJFSP",265,0)
 ; called by:
"RTN","HMPDJFSP",266,0)
 ;   DOMOPD^HMPDJFSQ
"RTN","HMPDJFSP",267,0)
 ;   CHNKFIN
"RTN","HMPDJFSP",268,0)
 ; calls:
"RTN","HMPDJFSP",269,0)
 ;   SETDOM
"RTN","HMPDJFSP",270,0)
 ; expects:
"RTN","HMPDJFSP",271,0)
 ;   HMPBATCH, HMPFSYS, HMPFZTSK
"RTN","HMPDJFSP",272,0)
 ; results are in:
"RTN","HMPDJFSP",273,0)
 ;   ^XTMP("HMPFX~hmpsrv~dfn",DFN,DOMAIN,...)
"RTN","HMPDJFSP",274,0)
 ;
"RTN","HMPDJFSP",275,0)
 ; syncError: {uid,collection,error}  uid=urn:va:syncError:sysId:dfn:extract
"RTN","HMPDJFSP",276,0)
 N DFN,HMPSRV,COUNT,DOMONLY
"RTN","HMPDJFSP",277,0)
 S DOMONLY=$P(DOMAIN,"#")
"RTN","HMPDJFSP",278,0)
 S DFN=$P(HMPBATCH,"~",3),HMPSRV=$P(HMPBATCH,"~",2)
"RTN","HMPDJFSP",279,0)
 S COUNT=+$G(^XTMP(HMPBATCH,HMPFZTSK,DOMAIN,"total"),0)
"RTN","HMPDJFSP",280,0)
 I COUNT=0 S ^XTMP(HMPBATCH,HMPFZTSK,DOMAIN,1,1)="null"
"RTN","HMPDJFSP",281,0)
 ;
"RTN","HMPDJFSP",282,0)
 S ^XTMP(HMPBATCH,HMPFZTSK,DOMAIN,"total")=COUNT  ; include errors and/or empty
"RTN","HMPDJFSP",283,0)
 D SETDOM("count",DOMONLY,$G(^XTMP(HMPBATCH,0,"count",DOMONLY),0)+COUNT)
"RTN","HMPDJFSP",284,0)
 Q
"RTN","HMPDJFSP",285,0)
 ;
"RTN","HMPDJFSP",286,0)
POSTSEC(DOMAIN,ETOTAL,SECSIZE) ; post domain section to stream and set tidy nodes
"RTN","HMPDJFSP",287,0)
 ; called by:
"RTN","HMPDJFSP",288,0)
 ;   DOMOPD^HMPDJFSQ
"RTN","HMPDJFSP",289,0)
 ;   CHNKFIN
"RTN","HMPDJFSP",290,0)
 ; calls:
"RTN","HMPDJFSP",291,0)
 ;   POST^HMPDJFS
"RTN","HMPDJFSP",292,0)
 ;   SETTIDY
"RTN","HMPDJFSP",293,0)
 ;
"RTN","HMPDJFSP",294,0)
 N DFN,HMPSRV,COUNT,X,NODES
"RTN","HMPDJFSP",295,0)
 S COUNT=^XTMP(HMPBATCH,HMPFZTSK,DOMAIN,"total")
"RTN","HMPDJFSP",296,0)
 S ETOTAL=$G(ETOTAL,COUNT)
"RTN","HMPDJFSP",297,0)
 s SECSIZE=$G(SECSIZE,0)
"RTN","HMPDJFSP",298,0)
 S DFN=$P(HMPBATCH,"~",3)
"RTN","HMPDJFSP",299,0)
 S HMPSRV=$P(HMPBATCH,"~",2)
"RTN","HMPDJFSP",300,0)
 D POST^HMPDJFS(DFN,"syncDomain",DOMAIN_":"_HMPFZTSK_":"_COUNT_":"_ETOTAL_":"_SECSIZE,"",HMPSRV,.NODES)
"RTN","HMPDJFSP",301,0)
 D SETTIDY(DOMAIN,.NODES)
"RTN","HMPDJFSP",302,0)
 I $G(HMPQREF)'="" S @HMPQREF=$P($H,",",2) ;update heartbeat US13442
"RTN","HMPDJFSP",303,0)
 Q
"RTN","HMPDJFSP",304,0)
 ;
"RTN","HMPDJFSP",305,0)
SETTIDY(DOMAIN,NODES) ; Set tidy nodes for clean-up of the extracts in ^XTMP
"RTN","HMPDJFSP",306,0)
 ; called by:
"RTN","HMPDJFSP",307,0)
 ;   SETMARK
"RTN","HMPDJFSP",308,0)
 ;   POSTSEC
"RTN","HMPDJFSP",309,0)
 ; expects:
"RTN","HMPDJFSP",310,0)
 ;   HMPBATCH,HMPFZTSK
"RTN","HMPDJFSP",311,0)
 ;
"RTN","HMPDJFSP",312,0)
 N X,STREAM,SEQ
"RTN","HMPDJFSP",313,0)
 S X="" F  S X=$O(NODES(X)) Q:X=""  D      ; iterate hmp servers
"RTN","HMPDJFSP",314,0)
 . S STREAM="HMPFS~"_X_"~"_$P(NODES(X),U)  ; HMPFS~hmpSrv~fmDate
"RTN","HMPDJFSP",315,0)
 . S SEQ=$P(NODES(X),U,2)
"RTN","HMPDJFSP",316,0)
 . S ^XTMP(STREAM,"tidy",SEQ,"batch")=HMPBATCH
"RTN","HMPDJFSP",317,0)
 . S ^XTMP(STREAM,"tidy",SEQ,"domain")=DOMAIN
"RTN","HMPDJFSP",318,0)
 . S ^XTMP(STREAM,"tidy",SEQ,"task")=HMPFZTSK
"RTN","HMPDJFSP",319,0)
 Q
"RTN","HMPDJFSP",320,0)
 ;
"RTN","HMPDJFSP",321,0)
POSTERR(COUNT,DFN) ; put error into ^XTMP(batch)
"RTN","HMPDJFSP",322,0)
 ; called by: DQINIT^HMPDJFSQ
"RTN","HMPDJFSP",323,0)
 ; calls: POST^HMPDJFS
"RTN","HMPDJFSP",324,0)
 ;
"RTN","HMPDJFSP",325,0)
 N CNT,NODE,HMPSRV
"RTN","HMPDJFSP",326,0)
 S HMPSRV=$P(HMPBATCH,"~",2)
"RTN","HMPDJFSP",327,0)
 S CNT=0 F  S CNT=$O(^TMP("HMPERR",$J,CNT)) Q:CNT'>0  D
"RTN","HMPDJFSP",328,0)
 .S NODE=$G(^TMP("HMPERR",$J,CNT,1))
"RTN","HMPDJFSP",329,0)
 .S ^XTMP(HMPBATCH,HMPFZTSK,"error",CNT,1)=NODE
"RTN","HMPDJFSP",330,0)
 .I CNT>1 S ^XTMP(HMPBATCH,HMPFZTSK,"error",CNT,.3)=","
"RTN","HMPDJFSP",331,0)
 D POST^HMPDJFS(DFN,"syncError","error:"_HMPFZTSK_":"_COUNT_":"_COUNT,"",HMPSRV)
"RTN","HMPDJFSP",332,0)
 Q
"RTN","HMPDJFSP",333,0)
 ;
"RTN","HMPDJFSP",334,0)
SETPAT(DFN,SRV,NEWSUB) ; Add patient to 800000 if not there
"RTN","HMPDJFSP",335,0)
 ; called by:
"RTN","HMPDJFSP",336,0)
 ;   PUTSUB
"RTN","HMPDJFSP",337,0)
 ; calls:
"RTN","HMPDJFSP",338,0)
 ;   SETERR^HMPDJFS
"RTN","HMPDJFSP",339,0)
 ;   UPDOPD
"RTN","HMPDJFSP",340,0)
 ;   ADDPAT
"RTN","HMPDJFSP",341,0)
 ;
"RTN","HMPDJFSP",342,0)
 N ERR,FDA,IEN,IENROOT
"RTN","HMPDJFSP",343,0)
 S IEN=$O(^HMP(800000,"B",SRV,0))
"RTN","HMPDJFSP",344,0)
 I 'IEN D SETERR^HMPDJFS("Unable to find server: "_SRV) QUIT
"RTN","HMPDJFSP",345,0)
 ; for operational, only start sync if not yet subscribed
"RTN","HMPDJFSP",346,0)
 I DFN="OPD" D  QUIT
"RTN","HMPDJFSP",347,0)
 . L +^HMP(800000,IEN):5 E  D SETERR^HMPDJFS("Unable to lock server: "_SRV) Q
"RTN","HMPDJFSP",348,0)
 . ; status is empty string (not 0) when unsubscribed
"RTN","HMPDJFSP",349,0)
 . S NEWSUB='$L($P($G(^HMP(800000,IEN,0)),U,3))
"RTN","HMPDJFSP",350,0)
 . I NEWSUB D UPDOPD(IEN,1) ; set to subscribed
"RTN","HMPDJFSP",351,0)
 . L -^HMP(800000,IEN)
"RTN","HMPDJFSP",352,0)
 ;
"RTN","HMPDJFSP",353,0)
 ; for patient, check subscribed and get the PID
"RTN","HMPDJFSP",354,0)
 L +^HMP(800000,IEN,1,DFN):5 E  D SETERR^HMPDJFS("Unable to lock patient: "_DFN) Q
"RTN","HMPDJFSP",355,0)
 S NEWSUB='$D(^HMP(800000,IEN,1,DFN))
"RTN","HMPDJFSP",356,0)
 I NEWSUB D ADDPAT(DFN,IEN)
"RTN","HMPDJFSP",357,0)
 L -^HMP(800000,IEN,1,DFN)
"RTN","HMPDJFSP",358,0)
 Q
"RTN","HMPDJFSP",359,0)
 ;
"RTN","HMPDJFSP",360,0)
UPDOPD(SRV,STS) ; Update status of operational synch
"RTN","HMPDJFSP",361,0)
 ; called by:
"RTN","HMPDJFSP",362,0)
 ;   UPDSTS
"RTN","HMPDJFSP",363,0)
 ;   SETPAT
"RTN","HMPDJFSP",364,0)
 ; calls:
"RTN","HMPDJFSP",365,0)
 ;   FILE^DIE
"RTN","HMPDJFSP",366,0)
 ;   SETERR^HMPDJFS
"RTN","HMPDJFSP",367,0)
 ;   CLEAN^DILF
"RTN","HMPDJFSP",368,0)
 ;
"RTN","HMPDJFSP",369,0)
 N FDA,ERR,DIERR
"RTN","HMPDJFSP",370,0)
 S FDA(800000,SRV_",",.03)=STS
"RTN","HMPDJFSP",371,0)
 D FILE^DIE("","FDA","ERR")
"RTN","HMPDJFSP",372,0)
 I $D(ERR) D SETERR^HMPDJFS("Error changing operational status")
"RTN","HMPDJFSP",373,0)
 D CLEAN^DILF
"RTN","HMPDJFSP",374,0)
 Q
"RTN","HMPDJFSP",375,0)
 ;
"RTN","HMPDJFSP",376,0)
ADDPAT(DFN,SRV) ; Add a patient as subscribed for server
"RTN","HMPDJFSP",377,0)
 ; called by:
"RTN","HMPDJFSP",378,0)
 ;   SETPAT
"RTN","HMPDJFSP",379,0)
 ; calls:
"RTN","HMPDJFSP",380,0)
 ;   $$NOW^XLFDT
"RTN","HMPDJFSP",381,0)
 ;   UPDATE^DIE
"RTN","HMPDJFSP",382,0)
 ;   SETERR^HMPDJFS
"RTN","HMPDJFSP",383,0)
 ;   CLEAN^DILF
"RTN","HMPDJFSP",384,0)
 ;
"RTN","HMPDJFSP",385,0)
 N FDA,FDAIEN,DIERR,ERR,IENS
"RTN","HMPDJFSP",386,0)
 S IENS="?+"_DFN_","_SRV_","
"RTN","HMPDJFSP",387,0)
 S FDAIEN(DFN)=DFN  ; help DINUM to work
"RTN","HMPDJFSP",388,0)
 S FDA(800000.01,IENS,.01)=DFN
"RTN","HMPDJFSP",389,0)
 S FDA(800000.01,IENS,2)=0
"RTN","HMPDJFSP",390,0)
 S FDA(800000.01,IENS,3)=$$NOW^XLFDT
"RTN","HMPDJFSP",391,0)
 D UPDATE^DIE("","FDA","FDAIEN","ERR")
"RTN","HMPDJFSP",392,0)
 I $D(ERR) D SETERR^HMPDJFS("Error adding patient subscription")
"RTN","HMPDJFSP",393,0)
 D CLEAN^DILF
"RTN","HMPDJFSP",394,0)
 Q
"RTN","HMPDJFSP",395,0)
 ;
"RTN","HMPDJFSP",396,0)
UPDSTS(DFN,SRVNM,STS) ; Update the sync status
"RTN","HMPDJFSP",397,0)
 ; called by:
"RTN","HMPDJFSP",398,0)
 ;   PUTSUB-QREJOIN
"RTN","HMPDJFSP",399,0)
 ;   MVFRUPD^HMPDJFSQ
"RTN","HMPDJFSP",400,0)
 ; calls:
"RTN","HMPDJFSP",401,0)
 ;   SETERR^HMPDJFS
"RTN","HMPDJFSP",402,0)
 ;   UPDOPD
"RTN","HMPDJFSP",403,0)
 ;   $$NOW^XLFDT
"RTN","HMPDJFSP",404,0)
 ;   FILE^DIE
"RTN","HMPDJFSP",405,0)
 ;   CLEAN^DILF
"RTN","HMPDJFSP",406,0)
 ;
"RTN","HMPDJFSP",407,0)
 N SRV,ERR ;US11019
"RTN","HMPDJFSP",408,0)
 S SRV=$O(^HMP(800000,"B",SRVNM,0)) I 'SRV D SETERR^HMPDJFS("Missing Server") Q
"RTN","HMPDJFSP",409,0)
 I DFN="OPD" D UPDOPD(SRV,STS) QUIT
"RTN","HMPDJFSP",410,0)
 ;
"RTN","HMPDJFSP",411,0)
 S FDA(800000.01,DFN_","_SRV_",",2)=STS
"RTN","HMPDJFSP",412,0)
 S FDA(800000.01,DFN_","_SRV_",",3)=$$NOW^XLFDT
"RTN","HMPDJFSP",413,0)
 D FILE^DIE("","FDA","ERR")
"RTN","HMPDJFSP",414,0)
 I $D(ERR) D SETERR^HMPDJFS("Error updating patient sync status")
"RTN","HMPDJFSP",415,0)
 D CLEAN^DILF
"RTN","HMPDJFSP",416,0)
 Q
"RTN","HMPDJFSP",417,0)
 ;
"RTN","HMPDJFSP",418,0)
CHKXTMP(HMPBATCH,HMPFZTSK) ; -- ^XTMP check at end each domain loop iteration ; if too big HANG
"RTN","HMPDJFSP",419,0)
 ; called by:
"RTN","HMPDJFSP",420,0)
 ;   DQINIT^HMPDJFSQ
"RTN","HMPDJFSP",421,0)
 ;   CHNKCHK
"RTN","HMPDJFSP",422,0)
 ;
"RTN","HMPDJFSP",423,0)
 N HMPOK S HMPOK=0  ; OK to run flag
"RTN","HMPDJFSP",424,0)
 F  D  Q:HMPOK
"RTN","HMPDJFSP",425,0)
 . ; if max disk size > estimated size then done with HANG 
"RTN","HMPDJFSP",426,0)
 . I $$GETMAX^HMPUTILS>$$GETSIZE^HMPUTILS("estimate") K ^XTMP(HMPBATCH,0,"task",HMPFZTSK,"hanging") S HMPOK=1 Q
"RTN","HMPDJFSP",427,0)
 . S ^("hanging")=$G(^XTMP(HMPBATCH,0,"task",HMPFZTSK,"hanging"))+1  ; increment
"RTN","HMPDJFSP",428,0)
 . I $G(HMPQREF)'="" S @HMPQREF=$P($H,",",2)  ;update heartbeat US13442
"RTN","HMPDJFSP",429,0)
 . H $$GETSECS
"RTN","HMPDJFSP",430,0)
 Q
"RTN","HMPDJFSP",431,0)
 ;
"RTN","HMPDJFSP",432,0)
GETSECS() ; return default # of seconds to requeue in future or hang when processing domains
"RTN","HMPDJFSP",433,0)
 ; called by:
"RTN","HMPDJFSP",434,0)
 ;   CHKSP^HMPUTILS
"RTN","HMPDJFSP",435,0)
 ;   CHKXTMP
"RTN","HMPDJFSP",436,0)
 ;
"RTN","HMPDJFSP",437,0)
 N SECS S SECS=+$$GET^XPAR("SYS","HMP EXTRACT TASK REQUEUE SECS")
"RTN","HMPDJFSP",438,0)
 Q $S(SECS>0:SECS,1:10)   ; if not set, wait 10 seconds
"RTN","HMPDJFSP",439,0)
 ;
"RTN","HMPDJFSQ")
0^1^B94537756
"RTN","HMPDJFSQ",1,0)
HMPDJFSQ ;ASMR/CPC -- Extract Queue manager ;Jan 25, 2017 11:08:07
"RTN","HMPDJFSQ",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3,4**;Sep 01, 2011;Build 13
"RTN","HMPDJFSQ",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFSQ",4,0)
 ;
"RTN","HMPDJFSQ",5,0)
 Q  ; no entry from top
"RTN","HMPDJFSQ",6,0)
 ; DE6644 - code cleanup, 7 September 2016
"RTN","HMPDJFSQ",7,0)
 ;
"RTN","HMPDJFSQ",8,0)
 ; 2016-05-05 asmr-cpc HMP*2.0*1: create routine HMPDJFSQ
"RTN","HMPDJFSQ",9,0)
 ;
"RTN","HMPDJFSQ",10,0)
 ; 2016-06-30/07-01 toad:
"RTN","HMPDJFSQ",11,0)
 ; move subroutines over from HMPDJFSP for SAC size limit: DQINIT,DOMOPD,$$TOTAL,MVFRUPD.
"RTN","HMPDJFSQ",12,0)
 ;
"RTN","HMPDJFSQ",13,0)
QUINIT(HMPBATCH,HMPFDFN,HMPFDOM) ; Queue the initial extracts for a patient
"RTN","HMPDJFSQ",14,0)
 ; called by:
"RTN","HMPDJFSQ",15,0)
 ;   PUTSUB-QREJOIN^HMPDJFSP
"RTN","HMPDJFSQ",16,0)
 ; input:
"RTN","HMPDJFSQ",17,0)
 ;   HMPBATCH="HMPFX~hmpsrvid~dfn"  example: HMPFX~hmpXYZ~229
"RTN","HMPDJFSQ",18,0)
 ;   HMPFDOM(n)="domainName"
"RTN","HMPDJFSQ",19,0)
 ; 
"RTN","HMPDJFSQ",20,0)
 ; ^XTMP("HMPFX~hmpsrvid~dfn",0)=expires^created^HMP Patient Extract
"RTN","HMPDJFSQ",21,0)
 ;                           ,0,"status",domain)=0:waiting;1:ready
"RTN","HMPDJFSQ",22,0)
 ;                           ,0,"task",taskIen)=""
"RTN","HMPDJFSQ",23,0)
 ;                           ,taskIen,domain,... (extract data)
"RTN","HMPDJFSQ",24,0)
 ;
"RTN","HMPDJFSQ",25,0)
 ; set up domains to be done by this task
"RTN","HMPDJFSQ",26,0)
 N I S I=0 F  S I=$O(HMPFDOM(I)) Q:'I  D SETDOM^HMPDJFSP("status",HMPFDOM(I),0)
"RTN","HMPDJFSQ",27,0)
 ;
"RTN","HMPDJFSQ",28,0)
 ; create task for this set of domains within the batch
"RTN","HMPDJFSQ",29,0)
 N ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE,ZTSK
"RTN","HMPDJFSQ",30,0)
 S ZTRTN="DQINIT^HMPDJFSQ",ZTIO="HMP EXTRACT RESOURCE",ZTDTH=$H
"RTN","HMPDJFSQ",31,0)
 S ZTSAVE("HMPBATCH")="",ZTSAVE("HMPFDFN")="",ZTSAVE("HMPFDOM(")=""
"RTN","HMPDJFSQ",32,0)
 S ZTSAVE("HMPENVIR(")="" ; environment information
"RTN","HMPDJFSQ",33,0)
 S ZTSAVE("HMPSTMP")="" ; Operational data stamptime US6734
"RTN","HMPDJFSQ",34,0)
 S ZTSAVE("HMPSVERS")="" ; sync version US11019
"RTN","HMPDJFSQ",35,0)
 S ZTSAVE("HMPQREF")="" ; US13442
"RTN","HMPDJFSQ",36,0)
 S ZTDESC="Build HMP domains for a patient"
"RTN","HMPDJFSQ",37,0)
 D ^%ZTLOAD
"RTN","HMPDJFSQ",38,0)
 I $G(ZTSK) S ^XTMP(HMPBATCH,0,"task",ZTSK)="" Q
"RTN","HMPDJFSQ",39,0)
 D SETERR^HMPDJFS("Task not created")
"RTN","HMPDJFSQ",40,0)
 Q
"RTN","HMPDJFSQ",41,0)
 ;
"RTN","HMPDJFSQ",42,0)
DQINIT ; task Dequeue initial extracts
"RTN","HMPDJFSQ",43,0)
 ; called by:
"RTN","HMPDJFSQ",44,0)
 ;   QUINIT: ZTRTN="DQINIT^HMPDJFSQ"
"RTN","HMPDJFSQ",45,0)
 ; expects:
"RTN","HMPDJFSQ",46,0)
 ;   HMPBATCH, HMPFDFN, HMPFDOM, ZTSK
"RTN","HMPDJFSQ",47,0)
 ;
"RTN","HMPDJFSQ",48,0)
 N COUNT,HMPFDOMI,HMPFSYS,HMPFZTSK
"RTN","HMPDJFSQ",49,0)
 F COUNT=1:1:10 Q:$D(^XTMP(HMPBATCH,0,"task",ZTSK))  H .5 ;cpc 9/18/2015 In case job running too quickly
"RTN","HMPDJFSQ",50,0)
 I '$D(^XTMP(HMPBATCH,0,"task",ZTSK)) Q  ; extract was superceded
"RTN","HMPDJFSQ",51,0)
 K ^TMP("HMPERR",$J)
"RTN","HMPDJFSQ",52,0)
 S HMPFSYS=$$SYS^HMPUTILS
"RTN","HMPDJFSQ",53,0)
 S HMPFZTSK=ZTSK ; just in case the unexpected happens to ZTSK
"RTN","HMPDJFSQ",54,0)
 S ^XTMP(HMPBATCH,0,"task",ZTSK,"job")=$J
"RTN","HMPDJFSQ",55,0)
 S ^XTMP(HMPBATCH,0,"task",ZTSK,"wait")=$$HDIFF^XLFDT($H,$G(^XTMP(HMPBATCH,0,"time")),2)
"RTN","HMPDJFSQ",56,0)
 ;
"RTN","HMPDJFSQ",57,0)
 ;  S68 check space
"RTN","HMPDJFSQ",58,0)
 D CHKSP^HMPUTILS($P(HMPBATCH,"~",2)) ; US8228
"RTN","HMPDJFSQ",59,0)
 N HMPMETA ; US6734
"RTN","HMPDJFSQ",60,0)
 F HMPMETA=$S(HMPSVERS:2,1:1):-1:0 D  Q:HMPMETA=2  ;
"RTN","HMPDJFSQ",61,0)
 . I HMPMETA=0,+HMPFDFN D SETMARK^HMPDJFSP("Start",HMPFDFN,HMPBATCH) ; US6734
"RTN","HMPDJFSQ",62,0)
 . S HMPFDOMI=""
"RTN","HMPDJFSQ",63,0)
 . F  S HMPFDOMI=$O(HMPFDOM(HMPFDOMI)) Q:'HMPFDOMI  D
"RTN","HMPDJFSQ",64,0)
 ..  D SETDOM^HMPDJFSP("status",HMPFDOM(HMPFDOMI),0,HMPMETA) ; cpc TA41760
"RTN","HMPDJFSQ",65,0)
 ..  I HMPFDFN="OPD" D
"RTN","HMPDJFSQ",66,0)
 ...   D DOMOPD(HMPFDOM(HMPFDOMI))
"RTN","HMPDJFSQ",67,0)
 ...   I HMPMETA=2 D UPD^HMPMETA(HMPFDOM(HMPFDOMI)) ; US6734 - mark OPD domain as complete in metastamp
"RTN","HMPDJFSQ",68,0)
 ..  I +HMPFDFN D DOMPT^HMPDJFSP(HMPFDOM(HMPFDOMI))
"RTN","HMPDJFSQ",69,0)
 ..  I HMPMETA=1 D:'$O(HMPFDOM(HMPFDOMI)) MERGE^HMPMETA(HMPBATCH) D:HMPFDFN="OPD" UPD^HMPMETA(HMPFDOM(HMPFDOMI)) Q
"RTN","HMPDJFSQ",70,0)
 ..  I HMPMETA=2 D
"RTN","HMPDJFSQ",71,0)
 ...   D MERGE1^HMPMETA(HMPBATCH,HMPFDOM(HMPFDOMI)) ;US11019 - merge data into metastamp
"RTN","HMPDJFSQ",72,0)
 ...   I +HMPFDFN D SETMARK^HMPDJFSP("Meta",HMPFDFN,HMPFDOM(HMPFDOMI)) ;US11019 - new freshness entry replacing syncStart
"RTN","HMPDJFSQ",73,0)
 ...   I HMPFDFN="OPD" D:'$O(HMPFDOM(HMPFDOMI)) MERGE^HMPMETA(HMPBATCH) ; US6734 - merge data into metastamp
"RTN","HMPDJFSQ",74,0)
 ..  D SETDOM^HMPDJFSP("status",HMPFDOM(HMPFDOMI),1,HMPMETA) ; ready ; cpc TA41760
"RTN","HMPDJFSQ",75,0)
 ..  ; if superceded, stop processing domains
"RTN","HMPDJFSQ",76,0)
 ..  I '$D(^XTMP(HMPBATCH,0,"task",HMPFZTSK)) S HMPFDOMI=999 Q
"RTN","HMPDJFSQ",77,0)
 ..  ; -- if more domains, check ^XTMP size before continuing; may have to HANG if too big  *BEGIN*S68-JCH*
"RTN","HMPDJFSQ",78,0)
 ..  I +HMPFDFN,HMPFDOMI'=+$O(HMPFDOM(""),-1) D CHKXTMP^HMPDJFSP(HMPBATCH,HMPFZTSK) ;; US 5074 - removed
"RTN","HMPDJFSQ",79,0)
 ; if superceded, remove extracts produced by this task
"RTN","HMPDJFSQ",80,0)
 I '$D(^XTMP(HMPBATCH,0,"task",HMPFZTSK)) K ^XTMP(HMPBATCH,HMPFZTSK) Q
"RTN","HMPDJFSQ",81,0)
 ; don't assume initialized, since we may split domains to other tasks
"RTN","HMPDJFSQ",82,0)
 I $G(HMPQREF)'="" S @HMPQREF=$P($H,",",2) ;US13442 update heartbeat
"RTN","HMPDJFSQ",83,0)
 I $$INITDONE(HMPBATCH) D  ; if all domains extracted
"RTN","HMPDJFSQ",84,0)
 . S COUNT=$O(^TMP("HMPERR",$J,"")) I COUNT>0 D POSTERR^HMPDJFSP(COUNT,HMPFDFN)
"RTN","HMPDJFSQ",85,0)
 . D SETMARK^HMPDJFSP("Done",HMPFDFN,HMPBATCH) ; - add updated syncStatus
"RTN","HMPDJFSQ",86,0)
 . D MVFRUPD(HMPBATCH,HMPFDFN)        ; - move freshness updates over
"RTN","HMPDJFSQ",87,0)
 . I $G(HMPQREF)'="" K @HMPQREF ;US13442 remove completed entry from queue
"RTN","HMPDJFSQ",88,0)
 ;
"RTN","HMPDJFSQ",89,0)
 K ^XTMP(HMPBATCH,0,"task",HMPFZTSK)  ; this task is done
"RTN","HMPDJFSQ",90,0)
 Q
"RTN","HMPDJFSQ",91,0)
 ;
"RTN","HMPDJFSQ",92,0)
DOMOPD(HMPFADOM) ; Load an operational domain in smaller batches
"RTN","HMPDJFSQ",93,0)
 ; called by:
"RTN","HMPDJFSQ",94,0)
 ;   DQINIT
"RTN","HMPDJFSQ",95,0)
 ; calls:
"RTN","HMPDJFSQ",96,0)
 ;   $$TOTAL
"RTN","HMPDJFSQ",97,0)
 ;   GET^HMPEF
"RTN","HMPDJFSQ",98,0)
 ;   MOD4STRM^HMPDJFSP
"RTN","HMPDJFSQ",99,0)
 ;   POSTSEC^HMPDJFSP
"RTN","HMPDJFSQ",100,0)
 ; expects:
"RTN","HMPDJFSQ",101,0)
 ;   HMPBATCH,HMPFZTSK
"RTN","HMPDJFSQ",102,0)
 ;
"RTN","HMPDJFSQ",103,0)
 N FILTER,RSLT,NEXTID,DONE,HMPFEST,HMPFSEC,HMPFSIZE,HMPFLDON ; cpc
"RTN","HMPDJFSQ",104,0)
 S HMPFSIZE=1000               ; section size (adjust to taste)
"RTN","HMPDJFSQ",105,0)
 S HMPFEST=$$TOTAL(HMPFADOM)   ; set estimated domain total
"RTN","HMPDJFSQ",106,0)
 S NEXTID=0,HMPFSEC=0,DONE=0,HMPFLDON=0 ;cpc
"RTN","HMPDJFSQ",107,0)
 S HMPFADOM=HMPFADOM_"#"_HMPFSEC
"RTN","HMPDJFSQ",108,0)
 F  D  Q:DONE
"RTN","HMPDJFSQ",109,0)
 . N FILTER,RSLT
"RTN","HMPDJFSQ",110,0)
 . S FILTER("noHead")=1
"RTN","HMPDJFSQ",111,0)
 . S FILTER("domain")=HMPFADOM ; include section for ^XTMP location
"RTN","HMPDJFSQ",112,0)
 . S FILTER("start")=NEXTID
"RTN","HMPDJFSQ",113,0)
 . S FILTER("limit")=HMPFSIZE
"RTN","HMPDJFSQ",114,0)
 . D GET^HMPEF(.RSLT,.FILTER)
"RTN","HMPDJFSQ",115,0)
 . I $G(HMPMETA)=1 S DONE=1 Q  ;US6734 - do not update stream if compiling metastamp
"RTN","HMPDJFSQ",116,0)
 . I '$D(^XTMP(HMPBATCH,0,"task",HMPFZTSK)) S DONE=1 QUIT  ; superceded
"RTN","HMPDJFSQ",117,0)
 . I $G(^XTMP(HMPBATCH,HMPFZTSK,HMPFADOM,"total"),0)=0,(HMPFSEC>0) S DONE=1 ;CPC DE7827 removed QUIT so that empty domain gets put into stream and therefore gets properly tidied
"RTN","HMPDJFSQ",118,0)
 . I $G(^XTMP(HMPBATCH,HMPFZTSK,HMPFADOM,"finished")) S DONE=1
"RTN","HMPDJFSQ",119,0)
 . D MOD4STRM^HMPDJFSP(HMPFADOM)
"RTN","HMPDJFSQ",120,0)
 . I DONE S HMPFEST=^XTMP(HMPBATCH,0,"count",$P(HMPFADOM,"#")) S:'HMPFEST HMPFEST=1
"RTN","HMPDJFSQ",121,0)
 . D POSTSEC^HMPDJFSP(HMPFADOM,HMPFEST,HMPFSIZE)
"RTN","HMPDJFSQ",122,0)
 . Q:DONE
"RTN","HMPDJFSQ",123,0)
 . S NEXTID=$G(^XTMP(HMPBATCH,HMPFZTSK,HMPFADOM,"last"),0)
"RTN","HMPDJFSQ",124,0)
 . S HMPFSEC=HMPFSEC+1
"RTN","HMPDJFSQ",125,0)
 . S $P(HMPFADOM,"#",2)=HMPFSEC
"RTN","HMPDJFSQ",126,0)
 ;
"RTN","HMPDJFSQ",127,0)
 Q
"RTN","HMPDJFSQ",128,0)
 ;
"RTN","HMPDJFSQ",129,0)
TOTAL(DOMAIN) ; function, return size total
"RTN","HMPDJFSQ",130,0)
 ; called by: DOMOPD
"RTN","HMPDJFSQ",131,0)
 ;
"RTN","HMPDJFSQ",132,0)
 N I,X,ROOT,SIZE
"RTN","HMPDJFSQ",133,0)
 S SIZE=0
"RTN","HMPDJFSQ",134,0)
 F I=1:1 S X=$T(OPDOMS+I^HMPDJFSD) Q:$P(X,";",3)="zzzzz"  D  Q:SIZE
"RTN","HMPDJFSQ",135,0)
 . I $P(X,";",3)'=DOMAIN Q
"RTN","HMPDJFSQ",136,0)
 . S ROOT=$P(X,";",4)
"RTN","HMPDJFSQ",137,0)
 . I ROOT="^HMP(800000.11)" S SIZE=$G(^HMP(800000.11,"ACNT",DOMAIN)) Q
"RTN","HMPDJFSQ",138,0)
 . I $L(ROOT) S SIZE=$P($G(@ROOT@(0)),U,4)
"RTN","HMPDJFSQ",139,0)
 Q $S(SIZE:SIZE,1:9999)
"RTN","HMPDJFSQ",140,0)
 ;
"RTN","HMPDJFSQ",141,0)
MVFRUPD(HMPBATCH,HMPFDFN) ; Move freshness updates over active stream
"RTN","HMPDJFSQ",142,0)
 ; called by:  DQINIT
"RTN","HMPDJFSQ",143,0)
 ;
"RTN","HMPDJFSQ",144,0)
 N ACT,DFN,FROM,HMPSRV,I,ID,TYPE,X
"RTN","HMPDJFSQ",145,0)
 S HMPSRV=$P(HMPBATCH,"~",2)
"RTN","HMPDJFSQ",146,0)
 D UPDSTS^HMPDJFSP(HMPFDFN,HMPSRV,2)              ; now initialized
"RTN","HMPDJFSQ",147,0)
 S FROM="HMPFH~"_HMPSRV_"~"_HMPFDFN
"RTN","HMPDJFSQ",148,0)
 S I=0 F  S I=$O(^XTMP(FROM,I)) Q:'I  D  ; move over held updates
"RTN","HMPDJFSQ",149,0)
 . S X=^XTMP(FROM,I)
"RTN","HMPDJFSQ",150,0)
 . S DFN=$P(X,U),TYPE=$P(X,U,2),ID=$P(X,U,3),ACT=$P(X,U,4)
"RTN","HMPDJFSQ",151,0)
 . D POST^HMPDJFS(DFN,TYPE,ID,ACT,HMPSRV)
"RTN","HMPDJFSQ",152,0)
 K ^XTMP(FROM) Q
"RTN","HMPDJFSQ",153,0)
 ;
"RTN","HMPDJFSQ",154,0)
INITDONE(HMPBATCH) ; Return 1 if all domains are done
"RTN","HMPDJFSQ",155,0)
 ; called by: DQINIT
"RTN","HMPDJFSQ",156,0)
 N X,DONE
"RTN","HMPDJFSQ",157,0)
 S X="",DONE=1
"RTN","HMPDJFSQ",158,0)
 F  S X=$O(^XTMP(HMPBATCH,0,"status",X)) Q:'$L(X)  I '^(X) S DONE=0
"RTN","HMPDJFSQ",159,0)
 Q DONE
"RTN","HMPDJFSQ",160,0)
 ;
"RTN","HMPDJFSQ",161,0)
SAVETASK ; save task request on job queue
"RTN","HMPDJFSQ",162,0)
 ; called by:
"RTN","HMPDJFSQ",163,0)
 ;   PUTSUB^HMPDJFSP
"RTN","HMPDJFSQ",164,0)
 ;
"RTN","HMPDJFSQ",165,0)
 N HMPQS
"RTN","HMPDJFSQ",166,0)
 S HMPQS=$O(^XTMP(HMPQBTCH,HMPPRITY,""),-1)+1
"RTN","HMPDJFSQ",167,0)
 S ^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN)=""
"RTN","HMPDJFSQ",168,0)
 M ^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"ARGS")=ARGS
"RTN","HMPDJFSQ",169,0)
 M ^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"DOMAINS")=DOMAINS
"RTN","HMPDJFSQ",170,0)
 M ^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"HMPBATCH")=HMPBATCH
"RTN","HMPDJFSQ",171,0)
 M ^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"HMPSRV")=HMPSRV
"RTN","HMPDJFSQ",172,0)
 S ^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"HMPSVERS")=HMPSVERS
"RTN","HMPDJFSQ",173,0)
 ;check if task manager running if not start one
"RTN","HMPDJFSQ",174,0)
 L +^XTMP(HMPQBTCH,0):1 E  Q
"RTN","HMPDJFSQ",175,0)
 D NEWQMGR L -^XTMP(HMPQBTCH,0) Q
"RTN","HMPDJFSQ",176,0)
 ;
"RTN","HMPDJFSQ",177,0)
NEWQMGR ; queuer Start new background queue manager
"RTN","HMPDJFSQ",178,0)
 ; called by:
"RTN","HMPDJFSQ",179,0)
 ;   SAVETASK
"RTN","HMPDJFSQ",180,0)
 ;
"RTN","HMPDJFSQ",181,0)
 N ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTSAVE,ZTSK
"RTN","HMPDJFSQ",182,0)
 S ZTRTN="QMGR^HMPDJFSQ",ZTIO="",ZTDTH=$H
"RTN","HMPDJFSQ",183,0)
 S ZTSAVE("HMPQBTCH")=""
"RTN","HMPDJFSQ",184,0)
 S ZTDESC="HMP patient QMGR"
"RTN","HMPDJFSQ",185,0)
 D ^%ZTLOAD
"RTN","HMPDJFSQ",186,0)
 I '$G(ZTSK) D SETERR^HMPDJFS("sync queue manager failed to start")
"RTN","HMPDJFSQ",187,0)
 Q
"RTN","HMPDJFSQ",188,0)
 ;
"RTN","HMPDJFSQ",189,0)
QMGR ; task Manager patient queues
"RTN","HMPDJFSQ",190,0)
 ; called by:
"RTN","HMPDJFSQ",191,0)
 ;   NEWQMGR: queues this subroutine as a task
"RTN","HMPDJFSQ",192,0)
 ;
"RTN","HMPDJFSQ",193,0)
 L +^XTMP(HMPQBTCH,0):5 E  Q  ;prove running
"RTN","HMPDJFSQ",194,0)
 S $P(^XTMP(HMPQBTCH,0),U,1)=$$HTFM^XLFDT(+$H+5) ;Update deletion times
"RTN","HMPDJFSQ",195,0)
 N HMPQRC,HMPQPC,HMPQNOW,HMPQRUN,HMPQRUNC,HMPQTOTP,HMPQDAT,HMPQUIT,HMPQI,HMPQQ,HMPQREF
"RTN","HMPDJFSQ",196,0)
 S HMPQUIT=0 F  D  H 1 Q:HMPQUIT
"RTN","HMPDJFSQ",197,0)
 . S HMPQTOTP=+$P($G(^XTMP(HMPQBTCH,0,0)),U) I 'HMPQTOTP S HMPQTOTP=2 ;max no of patients to run
"RTN","HMPDJFSQ",198,0)
 . S HMPQNOW=$P($H,",",2)
"RTN","HMPDJFSQ",199,0)
 . K HMPQRUNC S HMPQRUNC=0
"RTN","HMPDJFSQ",200,0)
 . ;de4661 First count current running
"RTN","HMPDJFSQ",201,0)
 . S HMPQQ="^XTMP("""_HMPQBTCH_""",0,0)"
"RTN","HMPDJFSQ",202,0)
 . F HMPQI=0:1 S HMPQQ=$Q(@HMPQQ) Q:HMPQQ'[HMPQBTCH  Q:HMPQQ=""  I $QL(HMPQQ)=4 D  Q:HMPQRUNC>=HMPQTOTP
"RTN","HMPDJFSQ",203,0)
 ..  S HMPQDAT=$G(@HMPQQ),HMPFDFN=$QS(HMPQQ,4)
"RTN","HMPDJFSQ",204,0)
 ..  D:HMPQDAT  ; DE7401, check timeout on initial run and throttling restart
"RTN","HMPDJFSQ",205,0)
 ...   I (HMPQNOW-HMPQDAT)>300!(HMPQNOW>300&((HMPQNOW-HMPQDAT)<0)) K @HMPQQ Q  ;job static too long go to next
"RTN","HMPDJFSQ",206,0)
 ...   S HMPQRUNC=HMPQRUNC+1,HMPQRUNC(HMPFDFN)=""
"RTN","HMPDJFSQ",207,0)
 . Q:HMPQRUNC>=HMPQTOTP
"RTN","HMPDJFSQ",208,0)
 . S HMPQRUN=HMPQRUNC
"RTN","HMPDJFSQ",209,0)
 . S HMPQQ="^XTMP("""_HMPQBTCH_""",0,0)"
"RTN","HMPDJFSQ",210,0)
 . F HMPQI=0:1 S HMPQQ=$Q(@HMPQQ) Q:HMPQQ'[HMPQBTCH  Q:HMPQQ=""  I $QL(HMPQQ)=4 D  Q:HMPQRUN>=HMPQTOTP
"RTN","HMPDJFSQ",211,0)
 ..  S HMPQDAT=$G(@HMPQQ)
"RTN","HMPDJFSQ",212,0)
 ..  N NEWSUB,HMMPDFN,ARGS,DOMAINS,HMPBATCH,HMPSRV,HMPPRITY,HMPQS,HMPSVERS
"RTN","HMPDJFSQ",213,0)
 ..  S HMPPRITY=$QS(HMPQQ,2),HMPQS=$QS(HMPQQ,3),HMPFDFN=$QS(HMPQQ,4)
"RTN","HMPDJFSQ",214,0)
 ..  I 'HMPQDAT D  Q  ;task job
"RTN","HMPDJFSQ",215,0)
 ...   ;restore data
"RTN","HMPDJFSQ",216,0)
 ...   S NEWSUB=1
"RTN","HMPDJFSQ",217,0)
 ...   M ARGS=^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"ARGS")
"RTN","HMPDJFSQ",218,0)
 ...   M DOMAINS=^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"DOMAINS")
"RTN","HMPDJFSQ",219,0)
 ...   M HMPBATCH=^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"HMPBATCH")
"RTN","HMPDJFSQ",220,0)
 ...   M HMPSRV=^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"HMPSRV")
"RTN","HMPDJFSQ",221,0)
 ...   S HMPSVERS=^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"HMPSVERS")
"RTN","HMPDJFSQ",222,0)
 ...   S @HMPQQ=$P($H,",",2) ;set start time
"RTN","HMPDJFSQ",223,0)
 ...   S HMPQREF=HMPQQ
"RTN","HMPDJFSQ",224,0)
 ...   D NEWTASK
"RTN","HMPDJFSQ",225,0)
 ...   S HMPQRUN=HMPQRUN+1
"RTN","HMPDJFSQ",226,0)
 ..  I '$D(HMPQRUNC(HMPFDFN)) S HMPQRUN=HMPQRUN+1 ;de4661 - don't add already counted
"RTN","HMPDJFSQ",227,0)
 . I 'HMPQI S HMPQUIT=1 ;nothing left to process
"RTN","HMPDJFSQ",228,0)
 L -^XTMP(HMPQBTCH,0) ;clear lock when ending
"RTN","HMPDJFSQ",229,0)
 ;
"RTN","HMPDJFSQ",230,0)
 Q
"RTN","HMPDJFSQ",231,0)
 ;
"RTN","HMPDJFSQ",232,0)
NEWTASK ; Start patient specific extract
"RTN","HMPDJFSQ",233,0)
 ; called by: QMGR
"RTN","HMPDJFSQ",234,0)
 ;
"RTN","HMPDJFSQ",235,0)
 N ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE,ZTSK
"RTN","HMPDJFSQ",236,0)
 S ZTRTN="QREJOIN^HMPDJFSP",ZTIO="",ZTDTH=$H
"RTN","HMPDJFSQ",237,0)
 S ZTSAVE("HMPQBTCH")=""
"RTN","HMPDJFSQ",238,0)
 S ZTSAVE("HMPBATCH")="",ZTSAVE("HMPFDFN")="",ZTSAVE("DOMAINS(")=""
"RTN","HMPDJFSQ",239,0)
 S ZTSAVE("HMPENVIR(")="",ZTSAVE("ARGS(")=""  ; environment information
"RTN","HMPDJFSQ",240,0)
 S ZTSAVE("HMPSTMP")="" ; Operational data stamptime US6734
"RTN","HMPDJFSQ",241,0)
 S ZTSAVE("HMPSVERS")="" ;sync version US11019
"RTN","HMPDJFSQ",242,0)
 S ZTSAVE("NEWSUB")=""
"RTN","HMPDJFSQ",243,0)
 S ZTSAVE("HMPSRV")="",ZTSAVE("HMPSRV(")=""
"RTN","HMPDJFSQ",244,0)
 S ZTSAVE("HMPQREF")="" ;US13442
"RTN","HMPDJFSQ",245,0)
 S ZTDESC="HMP patient QMGRTSK"
"RTN","HMPDJFSQ",246,0)
 D ^%ZTLOAD
"RTN","HMPDJFSQ",247,0)
 I '$G(ZTSK) D SETERR^HMPDJFS("Task MANAGER TASK not created")
"RTN","HMPDJFSQ",248,0)
 Q
"RTN","HMPDJFSQ",249,0)
 ;
"RTN","HMPDJFSR")
0^24^B153706114
"RTN","HMPDJFSR",1,0)
HMPDJFSR ;AFS/CPC -- Reservation model for freshness stream;Jan 24, 2017 10:35:07
"RTN","HMPDJFSR",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**4**;May 15, 2016;Build 13
"RTN","HMPDJFSR",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFSR",4,0)
 ;
"RTN","HMPDJFSR",5,0)
 ;
"RTN","HMPDJFSR",6,0)
 Q
"RTN","HMPDJFSR",7,0)
 ; --- manage subscription model for parallel pollers
"RTN","HMPDJFSR",8,0)
 ;---- note start point is always last updated point so next record will be the first processed
"RTN","HMPDJFSR",9,0)
 ;
"RTN","HMPDJFSR",10,0)
INIT ;get last update position and set up additional variables
"RTN","HMPDJFSR",11,0)
 N NOW,TENBILL
"RTN","HMPDJFSR",12,0)
 I 'HMPRMODE D  Q  ;Run in pre-allocation mode for backward compatibility
"RTN","HMPDJFSR",13,0)
 . I HMPFDT<$$FMADD^XLFDT($$DT^XLFDT,-8) S HMPFDT=$$HTFM^XLFDT($H-8),HMPFSEQ=0
"RTN","HMPDJFSR",14,0)
 . S HMPFLAST=HMPFDT_"-"_HMPFSEQ
"RTN","HMPDJFSR",15,0)
 . D LASTUPD(HMPFHMP,HMPFLAST)
"RTN","HMPDJFSR",16,0)
 ;
"RTN","HMPDJFSR",17,0)
 S TENBILL=1E10
"RTN","HMPDJFSR",18,0)
 S HMPFLAST=$$GETLAST(),HMPFDT=$P(HMPFLAST,"-"),HMPFSEQ=+$P(HMPFLAST,"-",2)
"RTN","HMPDJFSR",19,0)
 S HMPALLTK=$G(ARGS("allocationToken"))
"RTN","HMPDJFSR",20,0)
 S HMPALLSZ=$G(ARGS("allocationSize"),1000)
"RTN","HMPDJFSR",21,0)
 S HMPALLST=$G(ARGS("allocationStatus"))
"RTN","HMPDJFSR",22,0)
 I '$D(^XTMP(HMPALLOQ)) D NEWXTMP^HMPDJFS(HMPALLOQ,8,"HMP Allocation Table") S ^XTMP(HMPALLOQ,"last")=0
"RTN","HMPDJFSR",23,0)
 S $P(^XTMP(HMPALLOQ,0),U,1)=$$HTFM^XLFDT($H+8) ;reset file deletion date to keep for 8 days
"RTN","HMPDJFSR",24,0)
 S NOW=$P($H,",",2)
"RTN","HMPDJFSR",25,0)
 I HMPALLST="resumeProcessing" D CLEARBLK Q
"RTN","HMPDJFSR",26,0)
 I HMPALLST="overrideProtection" D RESETMOD Q
"RTN","HMPDJFSR",27,0)
 I $D(^XTMP(HMPALLOQ,"blocked")),HMPALLST'="rejected",HMPALLST'="replay",HMPALLST'="list",HMPALLST'="getDetails" D ERRLIST Q
"RTN","HMPDJFSR",28,0)
 I HMPALLST="list" D ERRLIST Q
"RTN","HMPDJFSR",29,0)
 I HMPALLST="getDetails" D DETAILS Q
"RTN","HMPDJFSR",30,0)
 I 'HMPALLTK D NEWALLOC Q
"RTN","HMPDJFSR",31,0)
 I HMPALLTK,HMPALLST'="" D UPDALLOC(HMPALLOQ,HMPALLTK,HMPALLST,HMPALLSZ),NEWALLOC Q
"RTN","HMPDJFSR",32,0)
 S HMPALLTK="" ;DE7857 handle token passed without status - will result in null return
"RTN","HMPDJFSR",33,0)
 Q
"RTN","HMPDJFSR",34,0)
UPDALLOC(HMPALLOQ,TK,ST,NS) ;update allocation table
"RTN","HMPDJFSR",35,0)
 Q:'$D(^XTMP(HMPALLOQ,"current",TK))
"RTN","HMPDJFSR",36,0)
 S $P(^XTMP(HMPALLOQ,"current",TK),U,4)=ST
"RTN","HMPDJFSR",37,0)
 I ST="reduce",+$G(NS) S $P(^XTMP(HMPALLOQ,"current",TK),U,6)=NS ;track requested new size
"RTN","HMPDJFSR",38,0)
 Q
"RTN","HMPDJFSR",39,0)
SPLITSIX(Z,TB) ;retrieve true value from formatted index
"RTN","HMPDJFSR",40,0)
 Q $P(Z,"-",1)_"-"_($P(Z,"-",2)-TB)
"RTN","HMPDJFSR",41,0)
 ;
"RTN","HMPDJFSR",42,0)
PACKSIX(Z,TB) ;format index value for numeric collation
"RTN","HMPDJFSR",43,0)
 Q $P(Z,"-",1)_"-"_($P(Z,"-",2)+TB)
"RTN","HMPDJFSR",44,0)
 ;
"RTN","HMPDJFSR",45,0)
RESETMOD ;Reset from multiple poller mode to single
"RTN","HMPDJFSR",46,0)
 L +^XTMP(HMPALLOQ):60  ELSE  G RESETMOD ;TIMEOUT AND ELSE ONLY HERE FOR SACC COMPLIANCE
"RTN","HMPDJFSR",47,0)
 D LOGERR(HMPALLOQ,"","RESETTING AWAY FROM MULTIPLE POLLER MODE ")
"RTN","HMPDJFSR",48,0)
 D ERRLIST
"RTN","HMPDJFSR",49,0)
 K ^XTMP(HMPALLOQ)
"RTN","HMPDJFSR",50,0)
 L -^XTMP(HMPALLOQ)
"RTN","HMPDJFSR",51,0)
 Q
"RTN","HMPDJFSR",52,0)
LOCKDOWN ;set lockdown mode and return error
"RTN","HMPDJFSR",53,0)
 S ^XTMP(HMPALLOQ,"blocked")="true"
"RTN","HMPDJFSR",54,0)
 D LOGERR(HMPALLOQ,"","ALLOCATION LOCKDOWN INITIATED ")
"RTN","HMPDJFSR",55,0)
 D ERRLIST
"RTN","HMPDJFSR",56,0)
 Q
"RTN","HMPDJFSR",57,0)
ERRLIST ; Return blocked error with allocation list
"RTN","HMPDJFSR",58,0)
 N ERRLST,TK,COUNT,ALLREC,ALLERR
"RTN","HMPDJFSR",59,0)
 S HMPALLTK="",COUNT=0
"RTN","HMPDJFSR",60,0)
 S ERRLST("message")=$S($D(^XTMP(HMPALLOQ,"blocked")):"VistA Allocations Locked",$G(HMPALLST)="resumeProcessing":"Vista Allocation lock cleared",$G(HMPALLST)="overrideProtection":"multiple mode protection overriden",1:"Allocation status normal")
"RTN","HMPDJFSR",61,0)
 S TK=0 F  S TK=$O(^XTMP(HMPALLOQ,"current",TK)) Q:TK=""  D
"RTN","HMPDJFSR",62,0)
 . S COUNT=COUNT+1,ALLREC=^XTMP(HMPALLOQ,"current",TK)
"RTN","HMPDJFSR",63,0)
 . S ERRLST("allocations",COUNT,"allocationToken")=TK
"RTN","HMPDJFSR",64,0)
 . S ERRLST("allocations",COUNT,"allocationToken","\s")="" ;Force to string
"RTN","HMPDJFSR",65,0)
 . S ERRLST("allocations",COUNT,"status")=$P(ALLREC,U,4)
"RTN","HMPDJFSR",66,0)
 . S ERRLST("allocations",COUNT,"start")=$P(ALLREC,U,2)
"RTN","HMPDJFSR",67,0)
 . S ERRLST("allocations",COUNT,"end")=$P(ALLREC,U,3)
"RTN","HMPDJFSR",68,0)
 . S ERRLST("allocations",COUNT,"timeoutCount")=+$P(ALLREC,U,5)
"RTN","HMPDJFSR",69,0)
 . S ERRLST("allocations",COUNT,"timeAllocated")=$$FMTHL7^HMPSTMP($$HTFM^XLFDT($P(ALLREC,U,1)))
"RTN","HMPDJFSR",70,0)
 D ENCODE^HMPJSON("ERRLST","ALLERR","ALLERR")
"RTN","HMPDJFSR",71,0)
 S ^TMP("HMPF",$J,.5)=$$APIHDR^HMPDJFS1(0,HMPFLAST)_"],""error"":"_ALLERR(1)_"}}"
"RTN","HMPDJFSR",72,0)
 S HMPERR=1
"RTN","HMPDJFSR",73,0)
 Q
"RTN","HMPDJFSR",74,0)
DETAILS ; Return details for single allocation
"RTN","HMPDJFSR",75,0)
 ;This code loops down the freshness queue for an allocation and formats and returns the information
"RTN","HMPDJFSR",76,0)
 N COUNT,DETAILS,DETARR,FROM,HMPSTRM,ID,IX,REC,STATUS,TIMEALL,TO,TK,UID,X
"RTN","HMPDJFSR",77,0)
 S TK=$G(HMPALLTK),HMPALLTK=""
"RTN","HMPDJFSR",78,0)
 I TK="" S ^TMP("HMPF",$J,.5)=$$APIHDR^HMPDJFS1(0,HMPFLAST)_"],""error"":{""message"":""Invalid token passed to getDetails""}"_"}}" S HMPERR=1 Q
"RTN","HMPDJFSR",79,0)
 I '$D(^XTMP(HMPALLOQ,"current",TK)) S ^TMP("HMPF",$J,.5)=$$APIHDR^HMPDJFS1(0,HMPFLAST)_"],""error"":{""message"":""Allocation not found""}"_"}}" S HMPERR=1 Q
"RTN","HMPDJFSR",80,0)
 S ALLREC=^XTMP(HMPALLOQ,"current",TK),STATUS=$P(ALLREC,U,4),FROM=$P(ALLREC,U,2),TO=$P(ALLREC,U,3),TIMEALL=$$FMTHL7^HMPSTMP($$HTFM^XLFDT($P(ALLREC,U,1)))
"RTN","HMPDJFSR",81,0)
 S HMPSTRM="HMPFS~"_$P(HMPALLOQ,"~",2)_"~"_$P(FROM,"-",1)
"RTN","HMPDJFSR",82,0)
 ;set up allocation header
"RTN","HMPDJFSR",83,0)
 S DETAILS("allocation","allocationToken")=TK
"RTN","HMPDJFSR",84,0)
 S DETAILS("allocation","allocationToken","\s")=""
"RTN","HMPDJFSR",85,0)
 S DETAILS("allocation","status")=STATUS
"RTN","HMPDJFSR",86,0)
 S DETAILS("allocation","start")=FROM
"RTN","HMPDJFSR",87,0)
 S DETAILS("allocation","end")=TO
"RTN","HMPDJFSR",88,0)
 S DETAILS("allocation","timeAllocated")=TIMEALL
"RTN","HMPDJFSR",89,0)
 ;
"RTN","HMPDJFSR",90,0)
 S IX=$P(FROM,"-",2)
"RTN","HMPDJFSR",91,0)
 F COUNT=1:1 S IX=$O(^XTMP(HMPSTRM,IX)) Q:'IX  D  Q:IX'<$P(TO,"-",2)
"RTN","HMPDJFSR",92,0)
 . S REC=^XTMP(HMPSTRM,IX)
"RTN","HMPDJFSR",93,0)
 . S DETAILS("details",COUNT,"queueIndex")=IX
"RTN","HMPDJFSR",94,0)
 . S DETAILS("details",COUNT,"DFN")=$P(REC,U)
"RTN","HMPDJFSR",95,0)
 . S X=$P(REC,U,2) I $E(X,1,4)="sync" D  Q
"RTN","HMPDJFSR",96,0)
 .. ;list domain and control entries
"RTN","HMPDJFSR",97,0)
 .. S DETAILS("details",COUNT,"type")=$P(REC,U,2)
"RTN","HMPDJFSR",98,0)
 .. S X=$P(REC,U,3)
"RTN","HMPDJFSR",99,0)
 .. S DETAILS("details",COUNT,"domain")=$P(X,":")
"RTN","HMPDJFSR",100,0)
 .. I $L(X,":")>1 D
"RTN","HMPDJFSR",101,0)
 ...  S DETAILS("details",COUNT,"task")=$P(X,":",2)
"RTN","HMPDJFSR",102,0)
 ...  S DETAILS("details",COUNT,"sectionCount")=$P(X,":",3)
"RTN","HMPDJFSR",103,0)
 ...  S DETAILS("details",COUNT,"domainSize")=$P(X,":",4)
"RTN","HMPDJFSR",104,0)
 ...  S DETAILS("details",COUNT,"sectionSize")=$P(X,":",5)
"RTN","HMPDJFSR",105,0)
 .. I IX>$P(TO,"-",2) S DETAILS("details",COUNT,"warning")="Only part of this domain in results"
"RTN","HMPDJFSR",106,0)
 . ;unsolicited updated formatted differently
"RTN","HMPDJFSR",107,0)
 . S DETAILS("details",COUNT,"type")="unsolicitedUpdate"
"RTN","HMPDJFSR",108,0)
 . S DETAILS("details",COUNT,"domain")=$P(REC,U,2)
"RTN","HMPDJFSR",109,0)
 . S DETAILS("details",COUNT,"deleted")=$S($P(REC,U,4)="@":"true",1:"false")
"RTN","HMPDJFSR",110,0)
 . S ID=$P(REC,U,3),UID=$$SETUID^HMPUTILS($P(REC,U,2),$P(REC,U),ID)
"RTN","HMPDJFSR",111,0)
 . S DETAILS("details",COUNT,"uid")=UID
"RTN","HMPDJFSR",112,0)
 D ENCODE^HMPJSON("DETAILS","DETARR","DETARR")
"RTN","HMPDJFSR",113,0)
 S ^TMP("HMPF",$J,.5)=$$APIHDR^HMPDJFS1(0,HMPFLAST)_"],""allocationDetails"":"_DETARR(1)_"}}"
"RTN","HMPDJFSR",114,0)
 S HMPERR=1
"RTN","HMPDJFSR",115,0)
 Q
"RTN","HMPDJFSR",116,0)
NEWALLOC ;check for new allocation - US18599
"RTN","HMPDJFSR",117,0)
 N ALLOC,DONE,END,FOUND,IX,SIX,SIXT,ALLREC,STATUS,RTIME,RDTIME,TIMEOUT,PREV,FIRST
"RTN","HMPDJFSR",118,0)
 S HMPALLTK=""
"RTN","HMPDJFSR",119,0)
 S TIMEOUT=$$GETIMOUT(HMPFHMP)
"RTN","HMPDJFSR",120,0)
 I $D(^XTMP(HMPALLOQ,"blocked")) D ERRLIST Q
"RTN","HMPDJFSR",121,0)
 L +^XTMP(HMPALLOQ):5 E  Q
"RTN","HMPDJFSR",122,0)
 ;check oldest allocations to see if pointer can be moved if none FOUND then move on
"RTN","HMPDJFSR",123,0)
 S DONE=0,FIRST=1,SIXT="" F  S SIXT=$O(^XTMP(HMPALLOQ,"byRecord",SIXT)) Q:SIXT=""  S FOUND=0 D  Q:'FOUND  Q:DONE  S FIRST=0
"RTN","HMPDJFSR",124,0)
 . S IX=$P(^XTMP(HMPALLOQ,"byRecord",SIXT),U,2)
"RTN","HMPDJFSR",125,0)
 . S ALLREC=^XTMP(HMPALLOQ,"current",IX),STATUS=$P(ALLREC,U,4)
"RTN","HMPDJFSR",126,0)
 . I STATUS="timeoutError" D LOCKDOWN S DONE=1 Q
"RTN","HMPDJFSR",127,0)
 . S SIX=$$SPLITSIX(SIXT,TENBILL)
"RTN","HMPDJFSR",128,0)
 . I STATUS="complete",SIX=HMPFLAST S HMPFLAST=$P(ALLREC,U,3) D LASTCHK,LASTUPD(HMPFHMP,HMPFLAST),KILLALOC(HMPALLOQ,IX) S FOUND=1 Q
"RTN","HMPDJFSR",129,0)
 . ;Next line self repairs allocation table if things have got out of step
"RTN","HMPDJFSR",130,0)
 . I STATUS="complete",$P(ALLREC,U,3)=HMPFLAST D LOGERR(HMPALLOQ,IX,"ALLOCATION PRIOR TO LASTUPDATE "_HMPFLAST_" "),KILLALOC(HMPALLOQ,IX) S FOUND=1 Q
"RTN","HMPDJFSR",131,0)
 . I STATUS="rejected",SIX=HMPFLAST S HMPFLAST=$P(ALLREC,U,3) D LASTCHK,LASTUPD(HMPFHMP,HMPFLAST),LOGERR(HMPALLOQ,IX,"ALLOCATION REJECTED "),KILLALOC(HMPALLOQ,IX) S FOUND=1 Q
"RTN","HMPDJFSR",132,0)
 . I 'FIRST Q  ;Special cases to handle first allocation of the day
"RTN","HMPDJFSR",133,0)
 . I STATUS="complete",$P(SIX,"-",2)=0 S HMPFLAST=$P(ALLREC,U,3) D LASTUPD(HMPFHMP,HMPFLAST),KILLALOC(HMPALLOQ,IX) S FOUND=1 Q
"RTN","HMPDJFSR",134,0)
 . I STATUS="rejected",$P(SIX,"-",2)=0 S HMPFLAST=$P(ALLREC,U,3) D LASTUPD(HMPFHMP,HMPFLAST),LOGERR(HMPALLOQ,IX,"ALLOCATION REJECTED "),KILLALOC(HMPALLOQ,IX) S FOUND=1 Q
"RTN","HMPDJFSR",135,0)
 ;now go through them all to update based on status
"RTN","HMPDJFSR",136,0)
 I 'DONE S IX="" F  S IX=$O(^XTMP(HMPALLOQ,"current",IX)) Q:IX=""  D  Q:DONE  ;will end on first timeout found
"RTN","HMPDJFSR",137,0)
 . S ALLREC=^XTMP(HMPALLOQ,"current",IX),STATUS=$P(ALLREC,U,4)
"RTN","HMPDJFSR",138,0)
 . I STATUS="" D TIMEOUT(IX,ALLREC) Q
"RTN","HMPDJFSR",139,0)
 . I STATUS="timeout" D UPDTMOUT(IX,ALLREC) Q  ;force timeout on request
"RTN","HMPDJFSR",140,0)
 . I STATUS="timeoutError" D LOCKDOWN S DONE=1 Q
"RTN","HMPDJFSR",141,0)
 . I STATUS="complete"!(STATUS="rejected") Q  ;only process if first
"RTN","HMPDJFSR",142,0)
 . I STATUS="replay" D KILLALOC(HMPALLOQ,IX) Q
"RTN","HMPDJFSR",143,0)
 . I STATUS="reduce" Q:$G(HMPFLIM)=0  D KILLALOC(HMPALLOQ,IX),ALLOC(HMPALLOQ,$P(ALLREC,U,6),$P(ALLREC,U,2),$P(ALLREC,U,3)) S DONE=1 Q  ;cannot reduce if not returning new allocation
"RTN","HMPDJFSR",144,0)
 ;now create new allocation
"RTN","HMPDJFSR",145,0)
 I 'DONE S END="",SIXT="",LAST=HMPFLAST F  S SIXT=$O(^XTMP(HMPALLOQ,"byRecord",SIXT)) Q:SIXT=""  D  Q:DONE
"RTN","HMPDJFSR",146,0)
 . S END=$P(^XTMP(HMPALLOQ,"byRecord",SIXT),U,1)
"RTN","HMPDJFSR",147,0)
 . S SIX=$$SPLITSIX(SIXT,TENBILL)
"RTN","HMPDJFSR",148,0)
 . I SIX=HMPFLAST S LAST=END Q  ;Start matches last update
"RTN","HMPDJFSR",149,0)
 . I SIX=LAST S LAST=END Q  ;start matches previous end
"RTN","HMPDJFSR",150,0)
 . D ALLOC(HMPALLOQ,HMPALLSZ,LAST,SIX)   ;gap between last end/lastupdate and start so fill
"RTN","HMPDJFSR",151,0)
 I 'DONE D ALLOC(HMPALLOQ,HMPALLSZ,LAST) ;allocate from last update
"RTN","HMPDJFSR",152,0)
 L -^XTMP(HMPALLOQ)
"RTN","HMPDJFSR",153,0)
 Q
"RTN","HMPDJFSR",154,0)
LASTCHK ;Rollover date if complete
"RTN","HMPDJFSR",155,0)
 N ZQ,ZQN
"RTN","HMPDJFSR",156,0)
 S ZQ="HMPFS~"_HMPFHMP_"~"_$P(HMPFLAST,"-")
"RTN","HMPDJFSR",157,0)
 S ZQN=$O(^XTMP(ZQ)) Q:ZQN=""  Q:$P(ZQ,"~",1,2)'=$P(ZQN,"~",1,2)  Q:'$P(ZQN,"~",3)
"RTN","HMPDJFSR",158,0)
 I $P(HMPFLAST,"-",1)=$P(ZQ,"~",3),$P(HMPFLAST,"-",2)=$O(^XTMP(ZQ,99999999999),-1) S HMPFLAST=$P(ZQN,"~",3)_"-0"
"RTN","HMPDJFSR",159,0)
 Q
"RTN","HMPDJFSR",160,0)
ALLOC(HMPALLOQ,SIZE,PREV,NEXT,TIMECNT) ;determine actual allocation
"RTN","HMPDJFSR",161,0)
 I $G(HMPFLIM)=0 Q  ;never return an allocation if HMPFLIM (max) = 0
"RTN","HMPDJFSR",162,0)
 N ASIZE,ZNEXT,ZPREV,ZEND,END,ZQ,HMPFSTRM
"RTN","HMPDJFSR",163,0)
 S ZQ="HMPFS~"_HMPFHMP_"~"_$P(HMPFLAST,"-")
"RTN","HMPDJFSR",164,0)
 S ZNEXT=$P($G(NEXT,"-"_999999999),"-",2),ZPREV=$P(PREV,"-",2)
"RTN","HMPDJFSR",165,0)
 I ZNEXT'>ZPREV Q  ;can't allocate if to < from
"RTN","HMPDJFSR",166,0)
 S ZEND=$O(^XTMP(ZQ,999999999),-1) ;check current end of queue
"RTN","HMPDJFSR",167,0)
 I PREV=HMPFLAST,ZNEXT=999999999 I ZPREV=ZEND!(ZEND="") D  Q:DONE  ;Previous = last updated and end of queue and all complete so check if next day
"RTN","HMPDJFSR",168,0)
 . S DONE=1 I $$DT^XLFDT>$P(HMPFLAST,"-",1) D
"RTN","HMPDJFSR",169,0)
 ..  S HMPFSTRM=ZQ D NXTSTRM^HMPDJFSG
"RTN","HMPDJFSR",170,0)
 ..  Q:HMPFSTRM=""  Q:$O(^XTMP(HMPALLOQ,"byRecord",""))'=""  ;only do this if all allocations complete
"RTN","HMPDJFSR",171,0)
 ..  S DONE=0,ZQ=HMPFSTRM,(PREV,HMPFLAST)=HMPFDT_"-"_0,ZPREV=0,ZNEXT=SIZE,ZEND=$O(^XTMP(ZQ,999999999),-1)
"RTN","HMPDJFSR",172,0)
 ..  ;Must now update last updated to prevent duplicates
"RTN","HMPDJFSR",173,0)
 ..  D LASTUPD(HMPFHMP,HMPFLAST)
"RTN","HMPDJFSR",174,0)
 S ASIZE=ZNEXT-ZPREV I ASIZE>SIZE S ASIZE=SIZE ; reduce allocation size to actual
"RTN","HMPDJFSR",175,0)
 S:'ZEND ZEND=0
"RTN","HMPDJFSR",176,0)
 I $P(PREV,"-",1)=$P(HMPFLAST,"-"),$P(PREV,"-",2)'<ZEND Q  ;last after end of queue - Can't allocate
"RTN","HMPDJFSR",177,0)
 S END=$P(PREV,"-",2)+ASIZE
"RTN","HMPDJFSR",178,0)
 I END>ZEND S END=ZEND ;reduce end of allocation to physical end of queue if overlap
"RTN","HMPDJFSR",179,0)
 S HMPALEND=END
"RTN","HMPDJFSR",180,0)
 S END=($P(PREV,"-",1)_"-"_END)
"RTN","HMPDJFSR",181,0)
 I END=PREV Q  ;nothing new to return so do not create new token
"RTN","HMPDJFSR",182,0)
 S DONE=1 ; Moved here to only mark done when new allocation allocated
"RTN","HMPDJFSR",183,0)
 S HMPALLTK=$$NEWTOKEN(HMPALLOQ,HMPFLAST)
"RTN","HMPDJFSR",184,0)
 S ^XTMP(HMPALLOQ,"current",HMPALLTK)=$H_U_PREV_U_END_U_U_+$G(TIMECNT)
"RTN","HMPDJFSR",185,0)
 S ^XTMP(HMPALLOQ,"byRecord",$$PACKSIX(PREV,TENBILL))=END_U_HMPALLTK
"RTN","HMPDJFSR",186,0)
 S HMPFDT=$P(PREV,"-"),HMPFSEQ=+$P(PREV,"-",2)
"RTN","HMPDJFSR",187,0)
 Q
"RTN","HMPDJFSR",188,0)
LOGERR(LOQ,IX,MESS) ;Log errors to HMP error log
"RTN","HMPDJFSR",189,0)
 N B,B2,C,H,J,X,TXT
"RTN","HMPDJFSR",190,0)
 S C=1,TXT(C)=" Allocation error: "_MESS_", in ALLOCATION: "_$G(IX)
"RTN","HMPDJFSR",191,0)
 I $G(LOQ)'="",$G(IX)'="" D
"RTN","HMPDJFSR",192,0)
 . S J=$G(^XTMP(LOQ,"current",IX))
"RTN","HMPDJFSR",193,0)
 . S C=C+1,TXT(C)=" Allocation details: "_J
"RTN","HMPDJFSR",194,0)
 . S H=$P(LOQ,"~",2)
"RTN","HMPDJFSR",195,0)
 . S B=$P(J,"^",3) Q:B=""  Q:'$P(B,"-",1)  S B2=$P(B,"-",2) Q:'B2  Q:'$D(^XTMP("HMPFS~"_H_"~"_$P(B,"-",1)))
"RTN","HMPDJFSR",196,0)
 . I '$D(^XTMP("HMPFS~"_$p(LOQ,"~",2)_"~"_$P(B,"-",1),B2)) S B2=$O(^XTMP("HMPFS~"_H_"~"_$P(B,"-",1),B2)) Q:'B2
"RTN","HMPDJFSR",197,0)
 . S C=C+1,TXT(C)=" Queue data: ("_B2_") "_$G(^XTMP("HMPFS~"_H_"~"_$P(B,"-",1),B2))
"RTN","HMPDJFSR",198,0)
 S C=C+1,TXT(C)=" "  ; blank line following word-processing text, $$NWNTRY^HMPLOG appends to end
"RTN","HMPDJFSR",199,0)
 S J=$$NWNTRY^HMPLOG($$NOW^XLFDT,"",.TXT)  ; log event
"RTN","HMPDJFSR",200,0)
 Q
"RTN","HMPDJFSR",201,0)
NEWTOKEN(HMPALLOQ,HMPFLAST) ;create new token
"RTN","HMPDJFSR",202,0)
 N LAST
"RTN","HMPDJFSR",203,0)
 S LAST=^XTMP(HMPALLOQ,"last")+1 I LAST>TENBILL S LAST=1
"RTN","HMPDJFSR",204,0)
 S ^XTMP(HMPALLOQ,"last")=LAST
"RTN","HMPDJFSR",205,0)
 Q $P(HMPFLAST,"-",1)*TENBILL+LAST
"RTN","HMPDJFSR",206,0)
 ;
"RTN","HMPDJFSR",207,0)
TIMEOUT(IX,ALLREC) ;check timeout
"RTN","HMPDJFSR",208,0)
 N RDTIME,RTIME
"RTN","HMPDJFSR",209,0)
 S RDTIME=$P(ALLREC,U,1),RTIME=$P(RDTIME,",",2)
"RTN","HMPDJFSR",210,0)
 I (NOW-RTIME)>TIMEOUT!(NOW>TIMEOUT&((NOW-RTIME)<0)) D UPDTMOUT(IX,ALLREC)
"RTN","HMPDJFSR",211,0)
 Q
"RTN","HMPDJFSR",212,0)
UPDTMOUT(IX,ALLREC) ;Update allocation for timeout
"RTN","HMPDJFSR",213,0)
 ;timeout kill processsing here
"RTN","HMPDJFSR",214,0)
 I $G(HMPFLIM)=0 Q  ;Can't update allocations if max=0
"RTN","HMPDJFSR",215,0)
 N HMPALLSZ
"RTN","HMPDJFSR",216,0)
 S DONE=1 ;prevent further processing as this will create new allocation
"RTN","HMPDJFSR",217,0)
 S HMPALLSZ=$P($P(ALLREC,U,3),"-",2)-$P($P(ALLREC,U,2),"-",2)
"RTN","HMPDJFSR",218,0)
 I HMPALLSZ>1 S HMPALLSZ=HMPALLSZ/2\1 D KILLALOC(HMPALLOQ,IX),ALLOC(HMPALLOQ,HMPALLSZ,$P(ALLREC,U,2),$P(ALLREC,U,3)) Q  ;Halve size, remove and reallocate
"RTN","HMPDJFSR",219,0)
 I $P(ALLREC,U,5)<$$TIMOUTLM(HMPFHMP) D KILLALOC(HMPALLOQ,IX),ALLOC(HMPALLOQ,1,$P(ALLREC,U,2),$P(ALLREC,U,3),$P(ALLREC,U,5)+1) Q  ;Redo but increase timeout count
"RTN","HMPDJFSR",220,0)
 D UPDALLOC(HMPALLOQ,IX,"timeoutError")
"RTN","HMPDJFSR",221,0)
 Q
"RTN","HMPDJFSR",222,0)
CLEARBLK ;remove allocation lockdown
"RTN","HMPDJFSR",223,0)
 N IX,ALLREC
"RTN","HMPDJFSR",224,0)
 L +^XTMP(HMPALLOQ):5 E  Q
"RTN","HMPDJFSR",225,0)
 S IX="" F  S IX=$O(^XTMP(HMPALLOQ,"current",IX)) Q:IX=""  D   ;reset any timeouts
"RTN","HMPDJFSR",226,0)
 . S ALLREC=^XTMP(HMPALLOQ,"current",IX)
"RTN","HMPDJFSR",227,0)
 . S:$P(ALLREC,U,4)="timeoutError" $P(ALLREC,U,4)=""
"RTN","HMPDJFSR",228,0)
 . S $P(ALLREC,U,5)=0
"RTN","HMPDJFSR",229,0)
 . S ^XTMP(HMPALLOQ,"current",IX)=ALLREC
"RTN","HMPDJFSR",230,0)
 D LOGERR(HMPALLOQ,"","ALLOCATION LOCKDOWN CLEARED ")
"RTN","HMPDJFSR",231,0)
 K ^XTMP(HMPALLOQ,"blocked")
"RTN","HMPDJFSR",232,0)
 D ERRLIST
"RTN","HMPDJFSR",233,0)
 L -^XTMP(HMPALLOQ)
"RTN","HMPDJFSR",234,0)
 Q
"RTN","HMPDJFSR",235,0)
GETLAST() ;get last update from file
"RTN","HMPDJFSR",236,0)
 N IEN,X
"RTN","HMPDJFSR",237,0)
 S IEN=$O(^HMP(800000,"B",HMPFHMP,0)) Q:'IEN ""
"RTN","HMPDJFSR",238,0)
 S X=$P(^HMP(800000,IEN,0),"^",2)
"RTN","HMPDJFSR",239,0)
 I X="" S X=$$HTFM^XLFDT($H-8)_"-"_0 ;cater for what should be impossible situation
"RTN","HMPDJFSR",240,0)
 Q X
"RTN","HMPDJFSR",241,0)
 ;
"RTN","HMPDJFSR",242,0)
GETIMOUT(HMPFHMP) ;get configured timeout (default to 300 (seconds) if not found)
"RTN","HMPDJFSR",243,0)
 N IEN,X
"RTN","HMPDJFSR",244,0)
 S IEN=$O(^HMP(800000,"B",HMPFHMP,0)) Q:'IEN 300
"RTN","HMPDJFSR",245,0)
 S X=$P(^HMP(800000,IEN,0),"^",8) S:'X X=300
"RTN","HMPDJFSR",246,0)
 Q X
"RTN","HMPDJFSR",247,0)
 ;
"RTN","HMPDJFSR",248,0)
TIMOUTLM(HMPFHMP) ;get configured timeout limit (default to 5)
"RTN","HMPDJFSR",249,0)
 N IEN,X
"RTN","HMPDJFSR",250,0)
 S IEN=$O(^HMP(800000,"B",HMPFHMP,0)) Q:'IEN 5
"RTN","HMPDJFSR",251,0)
 S X=$P(^HMP(800000,IEN,0),"^",9) S:'X X=5
"RTN","HMPDJFSR",252,0)
 Q X
"RTN","HMPDJFSR",253,0)
 ;
"RTN","HMPDJFSR",254,0)
KILLALOC(HMPALLOQ,IX) ;delete allocation
"RTN","HMPDJFSR",255,0)
 Q:'$D(^XTMP(HMPALLOQ,"current",IX))
"RTN","HMPDJFSR",256,0)
 N SIXT
"RTN","HMPDJFSR",257,0)
 S SIXT=$$PACKSIX($P(^XTMP(HMPALLOQ,"current",IX),U,2),TENBILL)
"RTN","HMPDJFSR",258,0)
 K ^XTMP(HMPALLOQ,"current",IX),^XTMP(HMPALLOQ,"byRecord",SIXT)
"RTN","HMPDJFSR",259,0)
 Q
"RTN","HMPDJFSR",260,0)
LASTUPD(HMPSRV,LASTUPD) ;save last update
"RTN","HMPDJFSR",261,0)
 ; TODO: change this to use Fileman call
"RTN","HMPDJFSR",262,0)
 Q:LASTUPD["^"  ;Historic code - cannot trace back reason - safer to leave
"RTN","HMPDJFSR",263,0)
 N IEN,CURRUPD,REPEAT
"RTN","HMPDJFSR",264,0)
 S IEN=$O(^HMP(800000,"B",HMPSRV,0)) I 'IEN D  Q
"RTN","HMPDJFSR",265,0)
 . N J,TXT
"RTN","HMPDJFSR",266,0)
 . S TXT(1)="Unknown server "_HMPSRV_" in LASTUPD",TXT(2)=" "
"RTN","HMPDJFSR",267,0)
 . S J=$$NWNTRY^HMPLOG($$NOW^XLFDT,"",.TXT)
"RTN","HMPDJFSR",268,0)
 S CURRUPD=$P(^HMP(800000,IEN,0),"^",2),REPEAT=$P(^HMP(800000,IEN,0),"^",4)
"RTN","HMPDJFSR",269,0)
 I LASTUPD=CURRUPD S $P(^HMP(800000,IEN,0),"^",4)=REPEAT+1 QUIT
"RTN","HMPDJFSR",270,0)
 S $P(^HMP(800000,IEN,0),"^",2)=LASTUPD,$P(^HMP(800000,IEN,0),"^",4)=0
"RTN","HMPDJFSR",271,0)
 Q
"RTN","HMPDJX")
0^47^B36263065
"RTN","HMPDJX",1,0)
HMPDJX ;SLC/MKB,ASMR/RRB,BL,CPC - New data update;Aug 29, 2016 20:06:27
"RTN","HMPDJX",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3,4**;Sep 01, 2011;Build 13
"RTN","HMPDJX",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJX",4,0)
 ;
"RTN","HMPDJX",5,0)
 ; External References          DBIA#
"RTN","HMPDJX",6,0)
 ; -------------------          -----
"RTN","HMPDJX",7,0)
 ; ^DPT                         10035
"RTN","HMPDJX",8,0)
 ; MPIF001                       2701
"RTN","HMPDJX",9,0)
 ; XLFSTR                       10104
"RTN","HMPDJX",10,0)
 Q
"RTN","HMPDJX",11,0)
 ;
"RTN","HMPDJX",12,0)
EN(LAST,MAX) ; -- get data from ^XTMP("HMP-<date>",n)
"RTN","HMPDJX",13,0)
 ; Expects HMP=$NA(^TMP("HMP",$J))
"RTN","HMPDJX",14,0)
 ;
"RTN","HMPDJX",15,0)
 N SYS,X,Y,HMPTOTL,DFN,PATCNT,ICN,DOMCNT,TYPE,RTN,HMPLASTI,HMPID,DATA,DELETE,UID,CNT,TSTART,TSTOP
"RTN","HMPDJX",16,0)
 S TSTART=$$NOW^XLFDT()
"RTN","HMPDJX",17,0)
 S LAST=$G(LAST),SYS=$G(FILTER("systemID")) Q:SYS=""
"RTN","HMPDJX",18,0)
 S MAX=$G(MAX,999)
"RTN","HMPDJX",19,0)
 D GETLIST(LAST,SYS,MAX)
"RTN","HMPDJX",20,0)
 ;
"RTN","HMPDJX",21,0)
 S (DFN,PATCNT,HMPTOTL)=0 F  S DFN=$O(^TMP("HMPX",$J,DFN)) Q:'(DFN>0)  D  ;DE4496 19 August 2016
"RTN","HMPDJX",22,0)
 . K ^TMP($J,"HMP ERROR")
"RTN","HMPDJX",23,0)
 . S PATCNT=PATCNT+1,ICN=+$$GETICN^MPIF001(DFN),ERRPAT=DFN
"RTN","HMPDJX",24,0)
 . S DOMCNT=0 K DATA,DELETE
"RTN","HMPDJX",25,0)
 . S TYPE="" F  S TYPE=$O(^TMP("HMPX",$J,DFN,TYPE)) Q:TYPE=""  D
"RTN","HMPDJX",26,0)
 .. S RTN=$$TAG^HMPDJ(TYPE)_"^HMPDJ0" Q:'$L($T(@RTN))
"RTN","HMPDJX",27,0)
 .. S DOMCNT=DOMCNT+1
"RTN","HMPDJX",28,0)
 .. ;
"RTN","HMPDJX",29,0)
 .. N HMP S HMP=$NA(^TMP("HMP",$J,PATCNT,DOMCNT)),HMPI=0,HMPID=""
"RTN","HMPDJX",30,0)
 .. F  S HMPID=$O(^TMP("HMPX",$J,DFN,TYPE,HMPID)) Q:HMPID=""  S X=$G(^(HMPID)) D
"RTN","HMPDJX",31,0)
 ... N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJX",32,0)
 ... S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJX",33,0)
 ... S ERRMSG="A problem occurred when trying to refresh patient data from an API."
"RTN","HMPDJX",34,0)
 ... ;
"RTN","HMPDJX",35,0)
 ... I X="@" D DELETE(TYPE,DFN,HMPID) Q
"RTN","HMPDJX",36,0)
 ... S HMPLASTI=HMPI D @RTN   ;creates @HMP@(HMPI+1)
"RTN","HMPDJX",37,0)
 ... ;
"RTN","HMPDJX",38,0)
 ... ; if no new item, assume the record has been deleted
"RTN","HMPDJX",39,0)
 ... I HMPI'>HMPLASTI D DELETE(TYPE,DFN,HMPID) Q
"RTN","HMPDJX",40,0)
 ... S HMPTOTL=HMPTOTL+1,DATA=1
"RTN","HMPDJX",41,0)
 .. I 'HMPI S DOMCNT=DOMCNT-1 Q   ;no data, or error
"RTN","HMPDJX",42,0)
 .. ;
"RTN","HMPDJX",43,0)
 .. S:DOMCNT>1 @HMP@(.3)=","
"RTN","HMPDJX",44,0)
 .. S @HMP@(.5)="{""domainName"":"""_TYPE_""",""total"":"_HMPI_",""items"":["
"RTN","HMPDJX",45,0)
 .. S HMPI=HMPI+1,@HMP@(HMPI)="]}"
"RTN","HMPDJX",46,0)
 . ;
"RTN","HMPDJX",47,0)
A . ; HMP=$NA(^TMP("HMP",$J)) again
"RTN","HMPDJX",48,0)
 . S:PATCNT>1 @HMP@(PATCNT,.3)=","
"RTN","HMPDJX",49,0)
 . S @HMP@(PATCNT,.5)="{""patientDfn"":"_DFN_",""patientIcn"":"""_ICN_""""
"RTN","HMPDJX",50,0)
 . I DOMCNT D
"RTN","HMPDJX",51,0)
 .. S @HMP@(PATCNT,.6)=",""domains"":["
"RTN","HMPDJX",52,0)
 .. S DOMCNT=DOMCNT+1,@HMP@(PATCNT,DOMCNT)="]"
"RTN","HMPDJX",53,0)
 . ;
"RTN","HMPDJX",54,0)
 . I $D(DELETE) D
"RTN","HMPDJX",55,0)
 .. S DOMCNT=DOMCNT+1,@HMP@(PATCNT,DOMCNT,.5)=",""deletes"":["
"RTN","HMPDJX",56,0)
 .. S HMPI=0,UID="" F  S UID=$O(DELETE(UID)) Q:UID=""  D
"RTN","HMPDJX",57,0)
 ... S TYPE=DELETE(UID),HMPI=HMPI+1
"RTN","HMPDJX",58,0)
 ... S:HMPI>1 @HMP@(PATCNT,DOMCNT,HMPI,.3)=","
"RTN","HMPDJX",59,0)
 ... S @HMP@(PATCNT,DOMCNT,HMPI,1)="{""uid"":"""_UID_""",""domainName"":"""_TYPE_"""}"
"RTN","HMPDJX",60,0)
 .. S HMPI=HMPI+1,@HMP@(PATCNT,DOMCNT,HMPI)="]"
"RTN","HMPDJX",61,0)
 . ;
"RTN","HMPDJX",62,0)
 . I $D(^TMP($J,"HMP ERROR")) D
"RTN","HMPDJX",63,0)
 .. N ERROR D BUILDERR^HMPDJ(.ERROR)
"RTN","HMPDJX",64,0)
 .. S DOMCNT=DOMCNT+1,@HMP@(PATCNT,DOMCNT,.3)=","
"RTN","HMPDJX",65,0)
 .. M @HMP@(PATCNT,DOMCNT)=ERROR
"RTN","HMPDJX",66,0)
 .. K ^TMP($J,"HMP ERROR")
"RTN","HMPDJX",67,0)
 . ;
"RTN","HMPDJX",68,0)
 . S DOMCNT=DOMCNT+1,@HMP@(PATCNT,DOMCNT)="}"
"RTN","HMPDJX",69,0)
 ;
"RTN","HMPDJX",70,0)
 S Y=$G(^TMP("HMPX",$J,0)) S:Y="" Y=LAST
"RTN","HMPDJX",71,0)
 S T=$$NOW^XLFDT()
"RTN","HMPDJX",72,0)
 S @HMP@(.5)="{"_$$APIVERS^HMPDJFS()_",""data"":{""lastUpdate"":"""_Y_""",""startDateTime"":"""_TSTART_""",""totalPatients"":"_PATCNT
"RTN","HMPDJX",73,0)
 S:PATCNT @HMP@(.6)=",""patients"":[",PATCNT=PATCNT+1,@HMP@(PATCNT)="]"
"RTN","HMPDJX",74,0)
 ;
"RTN","HMPDJX",75,0)
B ;
"RTN","HMPDJX",76,0)
 I $D(^TMP("HMPX",$J,"OP")) D         ;operational data
"RTN","HMPDJX",77,0)
 . S (HMPTOTL,DOMCNT)=0,PATCNT=PATCNT+1 K DATA,DELETE
"RTN","HMPDJX",78,0)
 . S TYPE="" F  S TYPE=$O(^TMP("HMPX",$J,"OP",TYPE)) Q:TYPE=""  D
"RTN","HMPDJX",79,0)
 .. S RTN=$$TAG^HMPEF(TYPE)_"^HMPEF" Q:'$L($T(@RTN))
"RTN","HMPDJX",80,0)
 .. S DOMCNT=DOMCNT+1,DFN=""
"RTN","HMPDJX",81,0)
 .. ;
"RTN","HMPDJX",82,0)
 .. N HMP S HMP=$NA(^TMP("HMP",$J,PATCNT,DOMCNT)),HMPI=0,HMPID=""
"RTN","HMPDJX",83,0)
 .. F  S HMPID=$O(^TMP("HMPX",$J,"OP",TYPE,HMPID)) Q:HMPID=""  S X=$G(^(HMPID)) D
"RTN","HMPDJX",84,0)
 ... I X="@" D DELETE(TYPE,DFN,HMPID) Q
"RTN","HMPDJX",85,0)
 ... S HMPLASTI=HMPI D @RTN           ;creates @HMP@(HMPI+1)
"RTN","HMPDJX",86,0)
 ... ; if no new item, assume the record has been deleted
"RTN","HMPDJX",87,0)
 ... I HMPI'>HMPLASTI D DELETE(TYPE,DFN,HMPID) Q
"RTN","HMPDJX",88,0)
 ... S HMPTOTL=HMPTOTL+1,DATA=1
"RTN","HMPDJX",89,0)
 .. I 'HMPI S DOMCNT=DOMCNT-1 Q       ;no data, or error
"RTN","HMPDJX",90,0)
 .. ;
"RTN","HMPDJX",91,0)
 .. S:DOMCNT>1 @HMP@(.3)=","
"RTN","HMPDJX",92,0)
 .. S @HMP@(.5)="{""domainName"":"""_TYPE_""",""total"":"_HMPI_",""items"":["
"RTN","HMPDJX",93,0)
 .. S HMPI=HMPI+1,@HMP@(HMPI)="]}"
"RTN","HMPDJX",94,0)
 . ;
"RTN","HMPDJX",95,0)
C . ; HMP=$NA(^TMP("HMP",$J)) again
"RTN","HMPDJX",96,0)
 . I 'DOMCNT,'$D(DELETE) Q  ;no data, or error
"RTN","HMPDJX",97,0)
 . S @HMP@(PATCNT,.5)=",""operational"":{"
"RTN","HMPDJX",98,0)
 . I DOMCNT D
"RTN","HMPDJX",99,0)
 .. S @HMP@(PATCNT,.6)="""domains"":["
"RTN","HMPDJX",100,0)
 .. S DOMCNT=DOMCNT+1 S @HMP@(PATCNT,DOMCNT)="]"
"RTN","HMPDJX",101,0)
 . ;
"RTN","HMPDJX",102,0)
 . I $D(DELETE) D
"RTN","HMPDJX",103,0)
 .. S DOMCNT=DOMCNT+1 S:DOMCNT>1 @HMP@(PATCNT,DOMCNT,.3)=","
"RTN","HMPDJX",104,0)
 .. S @HMP@(PATCNT,DOMCNT,.5)="""deletes"":["
"RTN","HMPDJX",105,0)
 .. S HMPI=0,UID="" F  S UID=$O(DELETE(UID)) Q:UID=""  D
"RTN","HMPDJX",106,0)
 ... S TYPE=DELETE(UID),HMPI=HMPI+1
"RTN","HMPDJX",107,0)
 ... S:HMPI>1 @HMP@(PATCNT,DOMCNT,HMPI,.3)=","
"RTN","HMPDJX",108,0)
 ... S @HMP@(PATCNT,DOMCNT,HMPI,1)="{""uid"":"""_UID_""",""domainName"":"""_TYPE_"""}"
"RTN","HMPDJX",109,0)
 .. S HMPI=HMPI+1,@HMP@(PATCNT,DOMCNT,HMPI)="]"
"RTN","HMPDJX",110,0)
 . ;
"RTN","HMPDJX",111,0)
 . S DOMCNT=DOMCNT+1,@HMP@(PATCNT,DOMCNT)="}"
"RTN","HMPDJX",112,0)
 ; 
"RTN","HMPDJX",113,0)
 S TSTOP=$$NOW^XLFDT()
"RTN","HMPDJX",114,0)
 S PATCNT=PATCNT+1,@HMP@(PATCNT)=",""endDateTime"":"""_TSTOP_"""}}" ;close JSON
"RTN","HMPDJX",115,0)
 K ^TMP("HMPX",$J),^TMP("HMPTEXT",$J)
"RTN","HMPDJX",116,0)
 Q
"RTN","HMPDJX",117,0)
 ;
"RTN","HMPDJX",118,0)
DELETE(NAME,DFN,ID) ; -- set DELETE nodes
"RTN","HMPDJX",119,0)
 N UID
"RTN","HMPDJX",120,0)
 S UID=$$SETUID^HMPUTILS(NAME,DFN,ID)
"RTN","HMPDJX",121,0)
 S DELETE(UID)=NAME
"RTN","HMPDJX",122,0)
 Q
"RTN","HMPDJX",123,0)
 ;
"RTN","HMPDJX",124,0)
GETLIST(LAST,SYS,MAX) ; -- build list of updates for client
"RTN","HMPDJX",125,0)
 ; Returns ^TMP("HMPX",$J,0) = last DATE:SEQ included
"RTN","HMPDJX",126,0)
 ;         ^TMP("HMPX",$J,DFN,TYPE,ID)=ACT
"RTN","HMPDJX",127,0)
 N DATE,SEQ,DA,END,IDX,X0,DFN,TYPE,ID,ACT,D,N,CNT
"RTN","HMPDJX",128,0)
 K ^TMP("HMPX",$J)
"RTN","HMPDJX",129,0)
 S DATE=+LAST,SEQ=+$P(LAST,":",2),CNT=0
"RTN","HMPDJX",130,0)
 S DA=$$FIND^HMPPATS(SYS) Q:'DA
"RTN","HMPDJX",131,0)
 ;
"RTN","HMPDJX",132,0)
 ; generate list ID, and end point
"RTN","HMPDJX",133,0)
 S D=DT,N=+$O(^XTMP("HMP-"_DT,"A"),-1)       ;last entry, as of now
"RTN","HMPDJX",134,0)
 I DATE=DT,SEQ=N S ^TMP("HMPX",$J,0)=LAST Q  ;no new items
"RTN","HMPDJX",135,0)
 ;
"RTN","HMPDJX",136,0)
 S IDX=$NA(^XTMP("HMP-"_DATE,SEQ)),END=N     ;init loop where left off
"RTN","HMPDJX",137,0)
 F  S IDX=$Q(@IDX) Q:$$DONE  D  Q:CNT'<MAX
"RTN","HMPDJX",138,0)
 . S D=+$P(IDX,"-",2),N=+$P(IDX,",",2)
"RTN","HMPDJX",139,0)
 . S X0=@IDX,DFN=$P(X0,U) S:DFN="" DFN="OP"
"RTN","HMPDJX",140,0)
 . I DFN,'$D(^HMP(800000,"ADFN",DFN,DA)) Q
"RTN","HMPDJX",141,0)
 . S TYPE=$P(X0,U,2),ID=$P(X0,U,3),ACT=$P(X0,U,4)
"RTN","HMPDJX",142,0)
 . I TYPE=""!(ID="") Q  ;error
"RTN","HMPDJX",143,0)
 . I TYPE="ROSTER",'$D(^HMP(800000,"AROS",ID,DA)) Q
"RTN","HMPDJX",144,0)
 . S:'$D(^TMP("HMPX",$J,DFN,TYPE,ID)) CNT=CNT+1
"RTN","HMPDJX",145,0)
 . S ^TMP("HMPX",$J,DFN,TYPE,ID)=ACT
"RTN","HMPDJX",146,0)
 S ^TMP("HMPX",$J,0)=D_":"_N                 ;final date:seq
"RTN","HMPDJX",147,0)
 Q
"RTN","HMPDJX",148,0)
 ;
"RTN","HMPDJX",149,0)
DONE() ; -- Return 1 or 0, if loop has finished
"RTN","HMPDJX",150,0)
 I IDX'?1"^XTMP(""HMP-"7N.E  Q 1       ;end of ^XTMP("HMP")
"RTN","HMPDJX",151,0)
 N D,N S D=+$P(IDX,"-",2),N=+$P(IDX,",",2)
"RTN","HMPDJX",152,0)
 ; check HMP-DATE subscript
"RTN","HMPDJX",153,0)
 I D<DT Q 0                            ;prior day: keep going
"RTN","HMPDJX",154,0)
 I D>DT Q 1                            ;next day:  stop loop
"RTN","HMPDJX",155,0)
 ; D=DT: check sequence# subscript
"RTN","HMPDJX",156,0)
 I N>END Q 1
"RTN","HMPDJX",157,0)
 Q 0
"RTN","HMPDVSIT")
0^32^B100619956
"RTN","HMPDVSIT",1,0)
HMPDVSIT ;SLC/MKB,ASMR/RRB,BL/AFS,PB - Visit/Encounter extract;Aug 29, 2016 20:06:27
"RTN","HMPDVSIT",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3,4**;Sep 01, 2011;Build 13
"RTN","HMPDVSIT",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDVSIT",4,0)
 ;
"RTN","HMPDVSIT",5,0)
 ; External References          DBIA#
"RTN","HMPDVSIT",6,0)
 ; -------------------          -----
"RTN","HMPDVSIT",7,0)
 ; ^AUPNVSIT                     2028
"RTN","HMPDVSIT",8,0)
 ; ^DIC(40.7                      557
"RTN","HMPDVSIT",9,0)
 ; ^DIC(42                      10039
"RTN","HMPDVSIT",10,0)
 ; ^DIC(45.7                     1154
"RTN","HMPDVSIT",11,0)
 ; ^DPT(                        10035
"RTN","HMPDVSIT",12,0)
 ; ^SC                          10040
"RTN","HMPDVSIT",13,0)
 ; ^VA(200                      10060
"RTN","HMPDVSIT",14,0)
 ; DGPTFAPI                      3157
"RTN","HMPDVSIT",15,0)
 ; DIC                           2051
"RTN","HMPDVSIT",16,0)
 ; DILFD                         2055
"RTN","HMPDVSIT",17,0)
 ; DIQ                           2056
"RTN","HMPDVSIT",18,0)
 ; ICDEX                         5747
"RTN","HMPDVSIT",19,0)
 ; ICPTCOD                       1995
"RTN","HMPDVSIT",20,0)
 ; PXAPI,^TMP("PXKENC",$J        1894
"RTN","HMPDVSIT",21,0)
 ; SDOE                          2546
"RTN","HMPDVSIT",22,0)
 ; VADPT                        10061
"RTN","HMPDVSIT",23,0)
 ; VADPT2                         325
"RTN","HMPDVSIT",24,0)
 ; XUAF4                         2171
"RTN","HMPDVSIT",25,0)
 Q
"RTN","HMPDVSIT",26,0)
 ; ------------ Get encounter(s) from VistA ------------
"RTN","HMPDVSIT",27,0)
 ;
"RTN","HMPDVSIT",28,0)
EN(DFN,BEG,END,MAX,ID) ; -- find patient's visits and appointments
"RTN","HMPDVSIT",29,0)
 N HMPCNT,HMPITM,HMPDT,HMPLOC,HMPDA
"RTN","HMPDVSIT",30,0)
 S DFN=+$G(DFN) I '(DFN>0) D LOGDPT^HMPLOG(DFN) Q  ;DE4496 19 August 2016
"RTN","HMPDVSIT",31,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDVSIT",32,0)
 ;
"RTN","HMPDVSIT",33,0)
 ; get one visit
"RTN","HMPDVSIT",34,0)
 I $G(ID) D EN1(ID,.HMPITM),XML(.HMPITM) G ENQ
"RTN","HMPDVSIT",35,0)
 ;
"RTN","HMPDVSIT",36,0)
 ; -- get all visits
"RTN","HMPDVSIT",37,0)
 I END,END'["." S END=END_".24" ;assume end of day
"RTN","HMPDVSIT",38,0)
 S HMPCNT=0
"RTN","HMPDVSIT",39,0)
 ;F  S IDX=$Q(@IDX,-1) Q:DFN'=$P(IDX,",",2)  Q:$P(IDX,",",3)<BEG  I $P(IDX,",",5)["P" D
"RTN","HMPDVSIT",40,0)
 S HMPDT=END F  S HMPDT=$O(^AUPNVSIT("AET",DFN,HMPDT),-1)  Q:HMPDT<BEG  D  Q:HMPCNT'<MAX  ;ICR 2028 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",41,0)
 . S HMPLOC=0 F  S HMPLOC=$O(^AUPNVSIT("AET",DFN,HMPDT,HMPLOC)) Q:HMPLOC<1  D
"RTN","HMPDVSIT",42,0)
 .. S HMPDA=0 F  S HMPDA=$O(^AUPNVSIT("AET",DFN,HMPDT,HMPLOC,"P",HMPDA)) Q:HMPDA<1  D
"RTN","HMPDVSIT",43,0)
 ... K HMPITM D EN1(HMPDA,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDVSIT",44,0)
 ... D XML(.HMPITM) S HMPCNT=HMPCNT+1
"RTN","HMPDVSIT",45,0)
ENQ ; end
"RTN","HMPDVSIT",46,0)
 K ^TMP("HMPTEXT",$J)
"RTN","HMPDVSIT",47,0)
 Q
"RTN","HMPDVSIT",48,0)
 ;
"RTN","HMPDVSIT",49,0)
ENAA(DFN,BEG,END,MAX,ID) ; -- find patient's visits and appointments [AA]
"RTN","HMPDVSIT",50,0)
 N IDT,DA,HMPCNT,HMPITM
"RTN","HMPDVSIT",51,0)
 S DFN=+$G(DFN) I '(DFN>0) D LOGDPT^HMPLOG(DFN) Q  ;DE4496 19 August 2016
"RTN","HMPDVSIT",52,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDVSIT",53,0)
 I $G(ID) D EN1(ID,.HMPITM),XML(.HMPITM) Q  ;one visit
"RTN","HMPDVSIT",54,0)
 D IDT S HMPCNT=0
"RTN","HMPDVSIT",55,0)
 S IDT=BEG F  S IDT=$O(^AUPNVSIT("AA",DFN,IDT)) Q:IDT<1!(IDT>END)  D  Q:HMPCNT'<MAX  ;ICR 2028 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",56,0)
 . S DA=0 F  S DA=$O(^AUPNVSIT("AA",DFN,IDT,DA)) Q:DA<1  D
"RTN","HMPDVSIT",57,0)
 .. K HMPITM D EN1(DA,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDVSIT",58,0)
 .. D XML(.HMPITM) S HMPCNT=HMPCNT+1
"RTN","HMPDVSIT",59,0)
 Q
"RTN","HMPDVSIT",60,0)
IDT ; -- invert BEG and END dates for visit format:
"RTN","HMPDVSIT",61,0)
 ;  IDT=(9999999-$P(VDT,"."))_"."_$P(VDT,".",2)
"RTN","HMPDVSIT",62,0)
 N X S X=BEG
"RTN","HMPDVSIT",63,0)
 S BEG=(9999999-$P(END,"."))
"RTN","HMPDVSIT",64,0)
 S END=(9999999-$P(X,"."))_".2359"
"RTN","HMPDVSIT",65,0)
 Q
"RTN","HMPDVSIT",66,0)
 ;
"RTN","HMPDVSIT",67,0)
EN1(IEN,VST) ; -- return a visit in VST("attribute")=value
"RTN","HMPDVSIT",68,0)
 N X0,X15,X,FAC,LOC,CATG,INPT,DA
"RTN","HMPDVSIT",69,0)
 K VST,^TMP("HMPTEXT",$J)
"RTN","HMPDVSIT",70,0)
 S IEN=+$G(IEN) Q:IEN<1  ;invalid
"RTN","HMPDVSIT",71,0)
 D ENCEVENT^PXAPI(IEN)
"RTN","HMPDVSIT",72,0)
 S X0=$G(^TMP("PXKENC",$J,IEN,"VST",IEN,0)),X15=$G(^(150))
"RTN","HMPDVSIT",73,0)
 Q:$P(X15,U,3)'="P"  Q:$P(X0,U,7)="E"  ;want primary, not historical
"RTN","HMPDVSIT",74,0)
 I $P(X0,U,7)="H" D ADM(IEN,+X0,.VST) Q
"RTN","HMPDVSIT",75,0)
 S VST("id")=IEN,VST("dateTime")=+X0
"RTN","HMPDVSIT",76,0)
 S FAC=+$P(X0,U,6),CATG=$P(X0,U,7),LOC=+$P(X0,U,22)
"RTN","HMPDVSIT",77,0)
 S:FAC VST("facility")=$$STA^XUAF4(FAC)_U_$P($$NS^XUAF4(FAC),U)
"RTN","HMPDVSIT",78,0)
 S:'FAC VST("facility")=$$FAC^HMPD(LOC)
"RTN","HMPDVSIT",79,0)
 S VST("serviceCategory")=CATG_U_$$CATG(CATG)
"RTN","HMPDVSIT",80,0)
 S VST("visitString")=LOC_";"_+X0_";"_CATG
"RTN","HMPDVSIT",81,0)
 S INPT=$P(X15,U,2) S:INPT="" INPT=$S("H^I^R^D"[CATG:1,1:0)
"RTN","HMPDVSIT",82,0)
 S X=$$CPT(IEN) S:X VST("type")=$P($$CPT^ICPTCOD(X),U,2,3)
"RTN","HMPDVSIT",83,0)
 I 'X S VST("type")=U_$S('INPT&LOC:$P($G(^SC(LOC,0)),U)_" VISIT",1:$$CATG(CATG)) ;ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",84,0)
 S VST("patientClass")=$S(INPT:"IMP",1:"AMB")
"RTN","HMPDVSIT",85,0)
 S X=$P(X0,U,8) S:X VST("stopCode")=$$AMIS(X) I LOC D
"RTN","HMPDVSIT",86,0)
 . N L0 S L0=$G(^SC(LOC,0)) ;ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",87,0)
 . I 'X S VST("stopCode")=$$AMIS($P(L0,U,7))
"RTN","HMPDVSIT",88,0)
 . S VST("location")=$P(L0,U),VST("service")=$$SERV($P(L0,U,20))
"RTN","HMPDVSIT",89,0)
 . S X=$P(L0,U,18) S:X VST("creditStopCode")=$$AMIS(X)
"RTN","HMPDVSIT",90,0)
 S VST("reason")=$$POV(IEN)
"RTN","HMPDVSIT",91,0)
 ; provider(s)
"RTN","HMPDVSIT",92,0)
 S DA=0 F  S DA=$O(^TMP("PXKENC",$J,IEN,"PRV",DA)) Q:DA<1  S X0=$G(^(DA,0)) D
"RTN","HMPDVSIT",93,0)
 . S VST("provider",DA)=+X0_U_$P($G(^VA(200,+X0,0)),U)_$S($P(X0,U,4)="P":"^P^1",1:"^S^") ;ICR 10060 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",94,0)
 ; note(s)
"RTN","HMPDVSIT",95,0)
 D TIU(IEN)
"RTN","HMPDVSIT",96,0)
 K ^TMP("PXKENC",$J,IEN)
"RTN","HMPDVSIT",97,0)
 Q
"RTN","HMPDVSIT",98,0)
 ;
"RTN","HMPDVSIT",99,0)
TIU(VISIT) ; -- add notes to VST("document")
"RTN","HMPDVSIT",100,0)
 N X,Y,I,HMPX,LT,NT,DA,CNT,HMPY
"RTN","HMPDVSIT",101,0)
 D FIND^DIC(8925,,.01,"QX",+$G(VISIT),,"V",,,"HMPX")
"RTN","HMPDVSIT",102,0)
 S Y="",(I,CNT)=0
"RTN","HMPDVSIT",103,0)
 F  S I=$O(HMPX("DILIST",1,I)) Q:I<1  D
"RTN","HMPDVSIT",104,0)
 . S LT=$G(HMPX("DILIST","ID",I,.01)) Q:$P(LT," ")="Addendum"
"RTN","HMPDVSIT",105,0)
 . S DA=$G(HMPX("DILIST",2,I))
"RTN","HMPDVSIT",106,0)
 . S NT=$$GET1^DIQ(8925,+DA_",",".01:1501")
"RTN","HMPDVSIT",107,0)
 . S CNT=CNT+1,VST("document",CNT)=DA_U_LT_U_NT
"RTN","HMPDVSIT",108,0)
 . S:$G(HMPTEXT) VST("document",CNT,"content")=$$TEXT^HMPDTIU(DA)
"RTN","HMPDVSIT",109,0)
 Q
"RTN","HMPDVSIT",110,0)
 ;
"RTN","HMPDVSIT",111,0)
POV(VISIT) ; -- return the primary Purpose of Visit as ICD^ProviderNarrative
"RTN","HMPDVSIT",112,0)
 N DA,Y,X,X0,ICD S Y=""
"RTN","HMPDVSIT",113,0)
 S DA=0 F  S DA=$O(^TMP("PXKENC",$J,VISIT,"POV",DA)) Q:DA<1  S X0=$G(^(DA,0)) I $P(X0,U,12)="P" D  Q:$L(Y)
"RTN","HMPDVSIT",114,0)
 . S X=+$P(X0,U,4),ICD=$$ICD(+X0)
"RTN","HMPDVSIT",115,0)
 . S Y=ICD_U_$$EXTERNAL^DILFD(9000010.07,.04,,X)
"RTN","HMPDVSIT",116,0)
 Q Y
"RTN","HMPDVSIT",117,0)
 ;
"RTN","HMPDVSIT",118,0)
ICD(IEN) ; -- return code^description for ICD code, or "^" if error
"RTN","HMPDVSIT",119,0)
 N X0,HMPX,N,I,X,Y S IEN=+$G(IEN)
"RTN","HMPDVSIT",120,0)
 S X0=$$ICDDX^ICDEX(IEN) I X0<0 Q "^"  ;Sep 1, 2016 - PB - DE5033 changed to use new API to get ICD code
"RTN","HMPDVSIT",121,0)
 S Y=$P(X0,U,2)_U_$P(X0,U,4)       ;ICD Code^Dx name
"RTN","HMPDVSIT",122,0)
 S N=$$ICDD^ICDEX($P(Y,U),.HMPX) ;ICD Description  Sep 1, 2016 - PB - DE5033 changed to use new API to get ICD code
"RTN","HMPDVSIT",123,0)
 I N>0,$L($G(HMPX(1))) S $P(Y,U,2)=HMPX(1)
"RTN","HMPDVSIT",124,0)
 Q Y
"RTN","HMPDVSIT",125,0)
 ;
"RTN","HMPDVSIT",126,0)
CPT(VISIT) ; -- Return CPT code of encounter type
"RTN","HMPDVSIT",127,0)
 N DA,Y,X,X0 S Y=""
"RTN","HMPDVSIT",128,0)
 S DA=0 F  S DA=$O(^TMP("PXKENC",$J,VISIT,"CPT",DA)) Q:DA<1  S X0=$G(^(DA,0)) D  Q:$L(Y)
"RTN","HMPDVSIT",129,0)
 . S X=$P(X0,U) I X?1"992"2N S Y=X Q
"RTN","HMPDVSIT",130,0)
 Q Y
"RTN","HMPDVSIT",131,0)
 ;
"RTN","HMPDVSIT",132,0)
AMIS(X) ; -- return the AMIS code^name of Credit Stop X
"RTN","HMPDVSIT",133,0)
 N Y,X0 S Y=""
"RTN","HMPDVSIT",134,0)
 S X0=$G(^DIC(40.7,+$G(X),0)) S:$L(X0) Y=$P(X0,U,2)_U_$P(X0,U) ;ICR 557 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",135,0)
 Q Y
"RTN","HMPDVSIT",136,0)
 ;
"RTN","HMPDVSIT",137,0)
CATG(X) ; -- Return name of visit Service Category code X
"RTN","HMPDVSIT",138,0)
 N Y S Y=""
"RTN","HMPDVSIT",139,0)
 I X="A" S Y="AMBULATORY"
"RTN","HMPDVSIT",140,0)
 I X="H" S Y="HOSPITALIZATION"
"RTN","HMPDVSIT",141,0)
 I X="I" S Y="IN HOSPITAL"
"RTN","HMPDVSIT",142,0)
 I X="C" S Y="CHART REVIEW"
"RTN","HMPDVSIT",143,0)
 I X="T" S Y="TELECOMMUNICATIONS"
"RTN","HMPDVSIT",144,0)
 I X="N" S Y="NOT FOUND"
"RTN","HMPDVSIT",145,0)
 I X="S" S Y="DAY SURGERY"
"RTN","HMPDVSIT",146,0)
 I X="O" S Y="OBSERVATION"
"RTN","HMPDVSIT",147,0)
 I X="E" S Y="EVENT (HISTORICAL)"
"RTN","HMPDVSIT",148,0)
 I X="R" S Y="NURSING HOME"
"RTN","HMPDVSIT",149,0)
 I X="D" S Y="DAILY HOSPITALIZATION DATA"
"RTN","HMPDVSIT",150,0)
 I X="X" S Y="ANCILLARY PACKAGE DAILY DATA"
"RTN","HMPDVSIT",151,0)
 Q Y
"RTN","HMPDVSIT",152,0)
 ;
"RTN","HMPDVSIT",153,0)
SERV(FTS) ; -- Return #42.4 Service for a Facility Treating Specialty
"RTN","HMPDVSIT",154,0)
 N Y S Y="",FTS=+$G(FTS)
"RTN","HMPDVSIT",155,0)
 S Y=$$GET1^DIQ(45.7,FTS_",","1:3","E")
"RTN","HMPDVSIT",156,0)
 Q Y
"RTN","HMPDVSIT",157,0)
 ;
"RTN","HMPDVSIT",158,0)
ADM(IEN,DATE,ADM) ; -- return an admission in ADM("attribute")=value
"RTN","HMPDVSIT",159,0)
 N VAINDT,VADMVT,VAIP,VAIN,VAERR,HLOC,ICD,I K ADM
"RTN","HMPDVSIT",160,0)
 S IEN=+$G(IEN),DATE=+$G(DATE) Q:IEN<1  Q:DATE<1
"RTN","HMPDVSIT",161,0)
 S VAINDT=DATE D ADM^VADPT2 Q:VADMVT<1
"RTN","HMPDVSIT",162,0)
 I VADMVT=$G(^DPT(DFN,.105)) D INPT Q  ;current inpatient ICR 10035 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",163,0)
 S VAIP("E")=VADMVT D IN5^VADPT Q:'$G(VAIP(1))  ;deleted
"RTN","HMPDVSIT",164,0)
 S ADM("id")=IEN,ADM("patientClass")="IMP"
"RTN","HMPDVSIT",165,0)
 ; ADM("admitType")=$P($G(VAIP(4)),U,2)
"RTN","HMPDVSIT",166,0)
 S DATE=+$G(VAIP(13,1)),(ADM("dateTime"),ADM("arrivalDateTime"))=DATE,I=0
"RTN","HMPDVSIT",167,0)
 S:$G(VAIP(7)) I=I+1,ADM("provider",I)=VAIP(7)_"^P^1" ;primary
"RTN","HMPDVSIT",168,0)
 S:$G(VAIP(18)) I=I+1,ADM("provider",I)=VAIP(18)_"^A" ;attending
"RTN","HMPDVSIT",169,0)
 S ADM("specialty")=$P($G(VAIP(8)),U,2)
"RTN","HMPDVSIT",170,0)
 S X=$$SERV(+$G(VAIP(8))),ADM("service")=X
"RTN","HMPDVSIT",171,0)
 S ICD=$$POV(IEN) S:'ICD ICD=$$PTF(DFN,VAIP(12)) ;PTF>ICD
"RTN","HMPDVSIT",172,0)
 S ADM("reason")=ICD_U_$G(VAIP(9)) ;ICD code^description^Dx text
"RTN","HMPDVSIT",173,0)
 S HLOC=+$G(^DIC(42,+$G(VAIP(5)),44)) ;ICR 10039 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",174,0)
 S:HLOC ADM("location")=$P($G(^SC(HLOC,0)),U) ;ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",175,0)
 S ADM("facility")=$$FAC^HMPD(+HLOC),ADM("roomBed")=$P(VAIP(6),U,2)
"RTN","HMPDVSIT",176,0)
 S ADM("serviceCategory")="H^HOSPITALIZATION"
"RTN","HMPDVSIT",177,0)
 S X=$$CPT(IEN),ADM("type")=$S(X:$P($$CPT^ICPTCOD(X),U,2,3),1:U_$$CATG("H"))
"RTN","HMPDVSIT",178,0)
 I $G(VAIP(17)) D
"RTN","HMPDVSIT",179,0)
 . S ADM("departureDateTime")=+$G(VAIP(17,1))
"RTN","HMPDVSIT",180,0)
 . ; ADM("disposition")=$G(VAIP(17,3)) ;Discharge Mvt Type
"RTN","HMPDVSIT",181,0)
 S ADM("visitString")=HLOC_";"_DATE_";H"
"RTN","HMPDVSIT",182,0)
 D TIU(IEN) ;notes/summary
"RTN","HMPDVSIT",183,0)
 Q
"RTN","HMPDVSIT",184,0)
 ;
"RTN","HMPDVSIT",185,0)
INPT ; -- return current admission in ADM("attribute")=value [from ADM]
"RTN","HMPDVSIT",186,0)
 K VAINDT D INP^VADPT Q:VAIN(1)<1
"RTN","HMPDVSIT",187,0)
 S ADM("id")=IEN,ADM("patientClass")="IMP"
"RTN","HMPDVSIT",188,0)
 ; ADM("admitType")=$P($G(VAIN(8)),U,2)
"RTN","HMPDVSIT",189,0)
 S DATE=+$G(VAIN(7)),(ADM("dateTime"),ADM("arrivalDateTime"))=DATE,I=0
"RTN","HMPDVSIT",190,0)
 S:$G(VAIN(2)) I=I+1,ADM("provider",I)=VAIN(2)_"^P^1" ;primary
"RTN","HMPDVSIT",191,0)
 S:$G(VAIN(11)) I=I+1,ADM("provider",I)=VAIN(11)_"^A" ;attending
"RTN","HMPDVSIT",192,0)
 S ADM("specialty")=$P($G(VAIN(3)),U,2)
"RTN","HMPDVSIT",193,0)
 S X=$$SERV(+$G(VAIN(3))),ADM("service")=X
"RTN","HMPDVSIT",194,0)
 S ICD=$$POV(IEN) S:'ICD ICD=$$PTF(DFN,VAIN(10)) ;PTF>ICD
"RTN","HMPDVSIT",195,0)
 S ADM("reason")=ICD_U_$G(VAIN(9)) ;ICD code^description^Dx text
"RTN","HMPDVSIT",196,0)
 S HLOC=+$G(^DIC(42,+$G(VAIN(4)),44)) ;ICR 10039 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",197,0)
 S:HLOC ADM("location")=$P($G(^SC(HLOC,0)),U) ;ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",198,0)
 S ADM("facility")=$$FAC^HMPD(+HLOC),ADM("roomBed")=$P(VAIN(5),U,2)
"RTN","HMPDVSIT",199,0)
 S ADM("serviceCategory")="H^HOSPITALIZATION"
"RTN","HMPDVSIT",200,0)
 S X=$$CPT(IEN),ADM("type")=$S(X:$P($$CPT^ICPTCOD(X),U,2,3),1:U_$$CATG("H"))
"RTN","HMPDVSIT",201,0)
 ; ADM("visitString")=HLOC_";"_DATE_";H"
"RTN","HMPDVSIT",202,0)
 D TIU(IEN) ;notes/summary
"RTN","HMPDVSIT",203,0)
 Q
"RTN","HMPDVSIT",204,0)
 ;
"RTN","HMPDVSIT",205,0)
PTF(DFN,PTF,SDIAG) ; -- return ICD code^description for a PTF record
"RTN","HMPDVSIT",206,0)
 ;de8171 - If secondary diagnoses exist return them in SDIAG (Passed by reference)
"RTN","HMPDVSIT",207,0)
 N HMPPTF,N,HMPX K SDIAG
"RTN","HMPDVSIT",208,0)
 D:$G(PTF) RPC^DGPTFAPI(.HMPPTF,+PTF) I $G(HMPPTF(0))<1 Q "^"
"RTN","HMPDVSIT",209,0)
 S Y=$P($G(HMPPTF(1)),U,3)
"RTN","HMPDVSIT",210,0)
 S N=$$ICDD^ICDEX(Y,.HMPX) ;ICD Description Sep 1, 2016 - PB - DE5033 changed to use new API to get ICD code
"RTN","HMPDVSIT",211,0)
 I N>0,$L($G(HMPX(1))) S Y=Y_U_HMPX(1)
"RTN","HMPDVSIT",212,0)
 I $P($G(HMPPTF(2)),U) D
"RTN","HMPDVSIT",213,0)
 . N SDI,X
"RTN","HMPDVSIT",214,0)
 . F SDI=1:1:$L(HMPPTF(2),U) S X=$P(HMPPTF(2),U,SDI) Q:X=""  D
"RTN","HMPDVSIT",215,0)
 ..  K HMPX
"RTN","HMPDVSIT",216,0)
 ..  S N=$$ICDD^ICDEX(X,.HMPX)
"RTN","HMPDVSIT",217,0)
 ..  S SDIAG(SDI)=X_U_$G(HMPX(1))
"RTN","HMPDVSIT",218,0)
 Q Y
"RTN","HMPDVSIT",219,0)
 ;
"RTN","HMPDVSIT",220,0)
ENC(IEN,ENC) ; -- return an encounter in ENC("attribute")=value
"RTN","HMPDVSIT",221,0)
 N X0,DATE,HLOC,TYPE,STS,X,Y K ENC
"RTN","HMPDVSIT",222,0)
 S IEN=+$G(IEN) Q:IEN<1  ;invalid ien
"RTN","HMPDVSIT",223,0)
 S ENC("id")="E"_IEN,X0=$$GETOE^SDOE(IEN) ;^SCE(IEN,0) node ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",224,0)
 S DATE=+X0,ENC("dateTime")=DATE
"RTN","HMPDVSIT",225,0)
 S HLOC=+$P(X0,U,4) I HLOC D
"RTN","HMPDVSIT",226,0)
 . S HLOC=HLOC_U_$P($G(^SC(HLOC,0)),U) ;ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",227,0)
 . S ENC("location")=$P(HLOC,U,2)
"RTN","HMPDVSIT",228,0)
 . S X=$$GET1^DIQ(44,+HLOC_",",9.5,"I")
"RTN","HMPDVSIT",229,0)
 . I X S ENC("service")=$$SERV(X)
"RTN","HMPDVSIT",230,0)
 S ENC("facility")=$$FAC^HMPD(+HLOC)
"RTN","HMPDVSIT",231,0)
 S STS=$$EXTERNAL^DILFD(409.68,.12,,$P(X0,U,12))
"RTN","HMPDVSIT",232,0)
 S X=$S(STS?1"INP".E:"IMP",1:"AMB"),ENC("patientClass")=X,TYPE=$E(X)
"RTN","HMPDVSIT",233,0)
 S ENC("type")=U_$S(HLOC:$P(HLOC,U,2)_" VISIT",1:$$CATG(TYPE))
"RTN","HMPDVSIT",234,0)
 S ENC("serviceCategory")=TYPE_U_$$CATG(TYPE)
"RTN","HMPDVSIT",235,0)
 S ENC("visitString")=+HLOC_";"_DATE_";"_TYPE
"RTN","HMPDVSIT",236,0)
 Q
"RTN","HMPDVSIT",237,0)
 ;
"RTN","HMPDVSIT",238,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDVSIT",239,0)
 ;
"RTN","HMPDVSIT",240,0)
XML(VISIT) ; -- Return patient visit as XML
"RTN","HMPDVSIT",241,0)
 N ATT,X,Y,NAMES,I,J
"RTN","HMPDVSIT",242,0)
 D ADD("<visit>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDVSIT",243,0)
 S ATT="" F  S ATT=$O(VISIT(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDVSIT",244,0)
 . I $O(VISIT(ATT,0)) D  S Y="" Q  ;multiples
"RTN","HMPDVSIT",245,0)
 .. D ADD("<"_ATT_"s>")
"RTN","HMPDVSIT",246,0)
 .. S I=0 F  S I=$O(VISIT(ATT,I)) Q:I<1  D
"RTN","HMPDVSIT",247,0)
 ... S X=$G(VISIT(ATT,I)),NAMES=""
"RTN","HMPDVSIT",248,0)
 ... I ATT="document" S NAMES="id^localTitle^nationalTitle^Z"
"RTN","HMPDVSIT",249,0)
 ... I ATT="provider" S NAMES="code^name^role^primary^Z"
"RTN","HMPDVSIT",250,0)
 ... S Y="<"_ATT_" "_$$LOOP ;_"/>" D ADD(Y)
"RTN","HMPDVSIT",251,0)
 ... S X=$G(VISIT(ATT,I,"content")) I '$L(X) S Y=Y_"/>" D ADD(Y) Q
"RTN","HMPDVSIT",252,0)
 ... S Y=Y_">" D ADD(Y)
"RTN","HMPDVSIT",253,0)
 ... S Y="<content xml:space='preserve'>" D ADD(Y)
"RTN","HMPDVSIT",254,0)
 ... S J=0 F  S J=$O(@X@(J)) Q:J<1  S Y=$$ESC^HMPD(@X@(J)) D ADD(Y)
"RTN","HMPDVSIT",255,0)
 ... D ADD("</content>"),ADD("</"_ATT_">")
"RTN","HMPDVSIT",256,0)
 .. D ADD("</"_ATT_"s>")
"RTN","HMPDVSIT",257,0)
 . S X=$G(VISIT(ATT)),Y="" Q:'$L(X)
"RTN","HMPDVSIT",258,0)
 . S NAMES="code^name^"_$S(ATT="reason":"narrative^",1:"")_"Z"
"RTN","HMPDVSIT",259,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDVSIT",260,0)
 . I $L(X)>1 S Y="<"_ATT_" "_$$LOOP_"/>"
"RTN","HMPDVSIT",261,0)
 D ADD("</visit>")
"RTN","HMPDVSIT",262,0)
 Q
"RTN","HMPDVSIT",263,0)
 ;
"RTN","HMPDVSIT",264,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDVSIT",265,0)
 N STR,P,TAG S STR=""
"RTN","HMPDVSIT",266,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDVSIT",267,0)
 Q STR
"RTN","HMPDVSIT",268,0)
 ;
"RTN","HMPDVSIT",269,0)
ADD(X) ; -- Add a line @HMP@(n)=X
"RTN","HMPDVSIT",270,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDVSIT",271,0)
 S @HMP@(HMPI)=X
"RTN","HMPDVSIT",272,0)
 Q
"RTN","HMPEASU")
0^35^B30940340
"RTN","HMPEASU",1,0)
HMPEASU ;SLC/GRR,ASMR/RRB,AFS/PB -- Serve VistA reference data as JSON via RPC ; May 18, 2016 09:26pm
"RTN","HMPEASU",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**4**;Sep 01, 2011;Build 13
"RTN","HMPEASU",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPEASU",4,0)
 ;
"RTN","HMPEASU",5,0)
 ; External References          DBIA#
"RTN","HMPEASU",6,0)
 ; -------------------          -----
"RTN","HMPEASU",7,0)
 ; TIU(8925.1                    2700
"RTN","HMPEASU",8,0)
 ; USR(8930                      6088
"RTN","HMPEASU",9,0)
 ; USR(8930.2                    6089
"RTN","HMPEASU",10,0)
 Q
"RTN","HMPEASU",11,0)
 ;
"RTN","HMPEASU",12,0)
CLASS ; -- USR Class file #8930
"RTN","HMPEASU",13,0)
 N PRV S PRV=+$G(HMPLAST)
"RTN","HMPEASU",14,0)
 S HMPCNT=$$TOTAL^HMPEF("^USR(8930)")
"RTN","HMPEASU",15,0)
 I PRV=0 S PRV=.9
"RTN","HMPEASU",16,0)
 I $L(HMPID) D CLS1(HMPID) Q
"RTN","HMPEASU",17,0)
 F  S PRV=$O(^USR(8930,PRV)) Q:PRV'>0  D CLS1(PRV) I HMPMAX,HMPI'<HMPMAX Q
"RTN","HMPEASU",18,0)
 I PRV'>0 S HMPFINI=1
"RTN","HMPEASU",19,0)
 Q
"RTN","HMPEASU",20,0)
 ;
"RTN","HMPEASU",21,0)
CLS1(IEN) ;
"RTN","HMPEASU",22,0)
 N $ES,$ET,ERRMSG
"RTN","HMPEASU",23,0)
 S ERRMSG=$$ERRMSG^HMPEF("User Class",IEN)
"RTN","HMPEASU",24,0)
 S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPEASU",25,0)
 N HMPV,FLDS,X,Y,INREC
"RTN","HMPEASU",26,0)
 K HMPV S FLDS=".01:.05;1*"
"RTN","HMPEASU",27,0)
 D GETS^DIQ(8930,IEN_",",FLDS,"IEN","HMPV")
"RTN","HMPEASU",28,0)
 S Y=$NA(HMPV(8930,IEN_","))
"RTN","HMPEASU",29,0)
 S INREC("name")=$G(@Y@(.01,"E"))
"RTN","HMPEASU",30,0)
 S INREC("localId")=IEN,INREC("uid")=$$SETUID^HMPUTILS("asu-class",,IEN)
"RTN","HMPEASU",31,0)
 S INREC("abbreviation")=$G(@Y@(.02,"E")),INREC("active")=$S($G(@Y@(.03,"I"))=1:"true",1:"false")
"RTN","HMPEASU",32,0)
 S INREC("displayName")=$G(@Y@(.04,"E"))
"RTN","HMPEASU",33,0)
 I $D(HMPV("8930.01")) D
"RTN","HMPEASU",34,0)
 . N IEN2,ID,CNT,X S IEN2="",CNT=0
"RTN","HMPEASU",35,0)
 . F  S IEN2=$O(HMPV(8930.01,IEN2)) Q:IEN2=""  S X=$G(HMPV("8930.01",IEN2,".01","E")) D:$L(X)  ;DE4777 only process entries with .01 field
"RTN","HMPEASU",36,0)
 . . S CNT=CNT+1,INREC("subClass",CNT,"name")=X
"RTN","HMPEASU",37,0)
 . . S ID=HMPV(8930.01,IEN2,.01,"I"),INREC("subClass",CNT,"uid")=$$SETUID^HMPUTILS("asu-class",,ID)
"RTN","HMPEASU",38,0)
 D ADD^HMPEF("INREC") S HMPLAST=IEN
"RTN","HMPEASU",39,0)
 Q
"RTN","HMPEASU",40,0)
 ;
"RTN","HMPEASU",41,0)
RULE ; -- USR Authorization/Subscription file #8930.1
"RTN","HMPEASU",42,0)
 N PRV S PRV=+$G(HMPLAST)
"RTN","HMPEASU",43,0)
 S HMPCNT=$$TOTAL^HMPEF("^USR(8930.1)")
"RTN","HMPEASU",44,0)
 I PRV=0 S PRV=.9
"RTN","HMPEASU",45,0)
 I $L(HMPID) D RULE1(HMPID) Q
"RTN","HMPEASU",46,0)
 F  S PRV=$O(^USR(8930.1,PRV)) Q:PRV'>0  D RULE1(PRV) I HMPMAX,HMPI'<HMPMAX Q
"RTN","HMPEASU",47,0)
 I PRV'>0 S HMPFINI=1
"RTN","HMPEASU",48,0)
 Q
"RTN","HMPEASU",49,0)
 ;
"RTN","HMPEASU",50,0)
RULE1(IEN) ;
"RTN","HMPEASU",51,0)
 N $ES,$ET,ERRMSG
"RTN","HMPEASU",52,0)
 S ERRMSG=$$ERRMSG^HMPEF("ASU Rule",IEN)
"RTN","HMPEASU",53,0)
 S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPEASU",54,0)
 N HMPV,FLDS,X,Y,INREC,DESC
"RTN","HMPEASU",55,0)
 K HMPV S FLDS=".01:1"
"RTN","HMPEASU",56,0)
 D GETS^DIQ(8930.1,IEN_",",FLDS,"IEN","HMPV")
"RTN","HMPEASU",57,0)
 S Y=$NA(HMPV(8930.1,IEN_","))
"RTN","HMPEASU",58,0)
 S INREC("localId")=IEN,INREC("uid")=$$SETUID^HMPUTILS("asu-rule",,IEN)
"RTN","HMPEASU",59,0)
 S X=$G(@Y@(.01,"I")) S:X INREC("docDefUid")=$$SETUID^HMPUTILS("doc-def",,X),INREC("docDefName")=$G(@Y@(.01,"E"))
"RTN","HMPEASU",60,0)
 S X=$G(@Y@(.02,"I")) S:X INREC("statusUid")=$$SETUID^HMPUTILS("doc-status",,X),INREC("statusName")=$G(@Y@(.02,"E"))
"RTN","HMPEASU",61,0)
 S X=$G(@Y@(.03,"I")) S:X INREC("actionUid")=$$SETUID^HMPUTILS("doc-action",,X),INREC("actionName")=$G(@Y@(.03,"E"))
"RTN","HMPEASU",62,0)
 S X=$G(@Y@(.04,"I")) S:X INREC("userClassUid")=$$SETUID^HMPUTILS("asu-class",,X),INREC("userClassName")=$G(@Y@(.04,"E"))
"RTN","HMPEASU",63,0)
 S X=$G(@Y@(.05,"I")),INREC("isAnd")=$S(X="&":"true",1:"false") ;,INREC("isOr")=$S(X="!":"true",1:"false")
"RTN","HMPEASU",64,0)
 S X=$G(@Y@(.06,"I")) S:X INREC("userRoleUid")=$$SETUID^HMPUTILS("asu-role",,X),INREC("userRoleName")=$G(@Y@(.06,"E"))
"RTN","HMPEASU",65,0)
 I $D(@Y@(1)) D
"RTN","HMPEASU",66,0)
 . N I S I=0 F  S I=$O(@Y@(1,I)) Q:I<1  S DESC(I)=@Y@(1,I)
"RTN","HMPEASU",67,0)
 . S INREC("description")=$$STRING^HMPD(.DESC)
"RTN","HMPEASU",68,0)
 D ADD^HMPEF("INREC") S HMPLAST=IEN
"RTN","HMPEASU",69,0)
 Q
"RTN","HMPEASU",70,0)
 ;
"RTN","HMPEASU",71,0)
DEF ; -- TIU Document Definition file #8925.1
"RTN","HMPEASU",72,0)
 N PRV S PRV=+$G(HMPLAST)
"RTN","HMPEASU",73,0)
 S HMPCNT=$$TOTAL^HMPEF("^TIU(8925.1)")
"RTN","HMPEASU",74,0)
 I PRV=0 S PRV=.9
"RTN","HMPEASU",75,0)
 I $L(HMPID) D DEF1(HMPID) Q
"RTN","HMPEASU",76,0)
 F  S PRV=$O(^TIU(8925.1,PRV)) Q:PRV'>0  D DEF1(PRV) I HMPMAX,HMPI'<HMPMAX Q  ;ICR 2700 DE2818 ASF 11/21/15
"RTN","HMPEASU",77,0)
 I PRV'>0 S HMPFINI=1
"RTN","HMPEASU",78,0)
 Q
"RTN","HMPEASU",79,0)
 ;
"RTN","HMPEASU",80,0)
DEF1(IEN) ;
"RTN","HMPEASU",81,0)
 N $ES,$ET,ERRMSG
"RTN","HMPEASU",82,0)
 S ERRMSG=$$ERRMSG^HMPEF("TIU Doc Def",IEN)
"RTN","HMPEASU",83,0)
 S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPEASU",84,0)
 N HMPV,FLDS,X,Y,I,INREC
"RTN","HMPEASU",85,0)
 K HMPV S FLDS=".01:.14;1501"
"RTN","HMPEASU",86,0)
 D GETS^DIQ(8925.1,IEN_",",FLDS,"IEN","HMPV")
"RTN","HMPEASU",87,0)
 S Y=$NA(HMPV(8925.1,IEN_","))
"RTN","HMPEASU",88,0)
 S INREC("name")=$G(@Y@(.01,"E"))
"RTN","HMPEASU",89,0)
 S INREC("uid")=$$SETUID^HMPUTILS("doc-def",,IEN)
"RTN","HMPEASU",90,0)
 S INREC("abbreviation")=$G(@Y@(.02,"E"))
"RTN","HMPEASU",91,0)
 S INREC("displayName")=$G(@Y@(.03,"E"))
"RTN","HMPEASU",92,0)
 S INREC("typeName")=$G(@Y@(.04,"E"))
"RTN","HMPEASU",93,0)
 S INREC("typeUid")=$$SETUID^HMPUTILS("doc-type",,$G(@Y@(.04,"I")))
"RTN","HMPEASU",94,0)
 S X=$G(@Y@(.05,"I")) I X D
"RTN","HMPEASU",95,0)
 . S INREC("ownerUid")=$$SETUID^HMPUTILS("user",,X)
"RTN","HMPEASU",96,0)
 . S INREC("ownerName")=$G(@Y@(.05,"E"))
"RTN","HMPEASU",97,0)
 S X=$G(@Y@(.06,"I")) S:X INREC("classOwner")=$$SETUID^HMPUTILS("asu-class",,X)
"RTN","HMPEASU",98,0)
 S X=$G(@Y@(.07,"I")) I X D
"RTN","HMPEASU",99,0)
 . S INREC("statusUid")=$$SETUID^HMPUTILS("doc-status",,X)
"RTN","HMPEASU",100,0)
 . S INREC("statusName")=$G(@Y@(.07,"E"))
"RTN","HMPEASU",101,0)
 S X=$G(@Y@(.1,"I")) S:X INREC("shared")="true"
"RTN","HMPEASU",102,0)
 S X=$G(@Y@(.13,"I")) S:X INREC("nationalStandard")="true"
"RTN","HMPEASU",103,0)
 S X=$G(@Y@(.14,"I")) S:X INREC("postingCode")=$$SETUID^HMPUTILS("doc-posting",,X)
"RTN","HMPEASU",104,0)
 S I=0 F  S I=$O(^TIU(8925.1,IEN,10,I)) Q:I<1  S X=+$G(^(I,0)) D  ;ICR 2700 DE2818 ASF 11/21/15
"RTN","HMPEASU",105,0)
 . S INREC("item",I,"uid")=$$SETUID^HMPUTILS("doc-def",,X)
"RTN","HMPEASU",106,0)
 . S INREC("item",I,"name")=$$GET1^DIQ(8925.1,X_",",.01)
"RTN","HMPEASU",107,0)
 ; national title info
"RTN","HMPEASU",108,0)
 S X=$G(@Y@(1501,"I")) I X D  ;National Title + attributes
"RTN","HMPEASU",109,0)
 . N IENS,TIU,DA,FNUM,NAME
"RTN","HMPEASU",110,0)
 . S IENS=X_"," D GETS^DIQ(8926.1,IENS,"*","IE","TIU")
"RTN","HMPEASU",111,0)
 . S INREC("nationalTitle","vuid")="urn:va:vuid:"_$G(TIU(8926.1,IENS,99.99,"E"))
"RTN","HMPEASU",112,0)
 . S INREC("nationalTitle","name")=$G(TIU(8926.1,IENS,.01,"E"))
"RTN","HMPEASU",113,0)
 . F I=".04^Subject^2",".05^Role^3",".06^Setting^4",".07^Service^5",".08^Type^6" D
"RTN","HMPEASU",114,0)
 .. S DA=+$G(TIU(8926.1,IENS,+I,"I")) Q:DA'>0
"RTN","HMPEASU",115,0)
 .. S FNUM="8926."_+$P(I,U,3),NAME=$$LOW^XLFSTR($P(I,U,2))
"RTN","HMPEASU",116,0)
 .. S INREC("nationalTitle"_$P(I,U,2),"vuid")="urn:va:vuid:"_$$VUID^HMPD(DA,FNUM)
"RTN","HMPEASU",117,0)
 .. S INREC("nationalTitle"_$P(I,U,2),"name")=$G(TIU(8926.1,IENS,+I,"E"))
"RTN","HMPEASU",118,0)
 ;
"RTN","HMPEASU",119,0)
 D ADD^HMPEF("INREC") S HMPLAST=IEN
"RTN","HMPEASU",120,0)
 Q
"RTN","HMPEF")
0^49^B92374442
"RTN","HMPEF",1,0)
HMPEF ;SLC/MKB,ASMR/BL,RRB,JD,SRG,CK,CPC - Serve VistA operational data as JSON via RPC;Aug 29, 2016 20:06:27
"RTN","HMPEF",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3,4**;May 15, 2016;Build 13
"RTN","HMPEF",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPEF",4,0)
 ;
"RTN","HMPEF",5,0)
 ; DE2818 - SQA findings. Newed L42 and L44 in LOC+1.  RRB - 10/30/2015
"RTN","HMPEF",6,0)
 ;
"RTN","HMPEF",7,0)
 ; DE6652 - JD - 9/1/16: Removed code behind synching sign-symptom domain for operational data.
"RTN","HMPEF",8,0)
 ;                       SIGNS tag.
"RTN","HMPEF",9,0)
 ;
"RTN","HMPEF",10,0)
 ; ^SC references - IA 10040, HOSPITAL LOCATION file (#44)
"RTN","HMPEF",11,0)
 ; ^DIC(42) references - IA #10039, WARD LOCATION file
"RTN","HMPEF",12,0)
 Q
"RTN","HMPEF",13,0)
 ;
"RTN","HMPEF",14,0)
 ; The following variables can not be newed or killed because they are used
"RTN","HMPEF",15,0)
 ; from upstream by scope (NOT as input parameters):
"RTN","HMPEF",16,0)
 ;      HMPBATCH, HMPFADOM, HMPFLDON, HMPFZTSK, HMPMETA, HMPSTMP, LEX("LIST", and ZTQUEUED.
"RTN","HMPEF",17,0)
GET(HMP,FILTER) ; -- Return search results as JSON in @HMP@(n)
"RTN","HMPEF",18,0)
 ; RPC = HMP GET OPERATIONAL DATA
"RTN","HMPEF",19,0)
 ; where FILTER("domain")  = name of desired data type (see $$TAG)
"RTN","HMPEF",20,0)
 ;       FILTER("limit")   = maximum number of items to return [opt]
"RTN","HMPEF",21,0)
 ;       FILTER("start")   = ien to start search from          [opt]
"RTN","HMPEF",22,0)
 ;       FILTER("id")      = single item id to return          [opt]
"RTN","HMPEF",23,0)
 ;
"RTN","HMPEF",24,0)
 ; HMPLAST - last record processed
"RTN","HMPEF",25,0)
 N HMPSYS,TYPE,HMPMAX,HMPI,HMPID,HMPERR,HMPTN,HMPLAST,HMPCNT,HMPFINI
"RTN","HMPEF",26,0)
 S HMP=$NA(^TMP("HMP",$J)),HMPI=0 K @HMP
"RTN","HMPEF",27,0)
 S HMPSYS=$$SYS^HMPUTILS ;DE4463 - CK - 4/22/2016
"RTN","HMPEF",28,0)
 ;
"RTN","HMPEF",29,0)
 ; parse & validate input parameters
"RTN","HMPEF",30,0)
 S TYPE=$P($G(FILTER("domain")),"#") ;,TYPE=$$LOW^XLFSTR(TYPE)
"RTN","HMPEF",31,0)
 S HMPMAX=+$G(FILTER("limit")),HMPCNT=0
"RTN","HMPEF",32,0)
 S HMPLAST=+$G(FILTER("start"))
"RTN","HMPEF",33,0)
 S HMPID=$G(FILTER("id"))
"RTN","HMPEF",34,0)
 ;
"RTN","HMPEF",35,0)
 K ^TMP($J,"HMP ERROR")
"RTN","HMPEF",36,0)
 ;
"RTN","HMPEF",37,0)
 ; extract data
"RTN","HMPEF",38,0)
 I TYPE="" S HMPERR="Missing or invalid reference type" G GTQ
"RTN","HMPEF",39,0)
 ; *** convert code below to use $$HANDLE^XUSRB4 for zero node in ^XTMP, IA 4770***
"RTN","HMPEF",40,0)
 I $D(ZTQUEUED) S HMP=$NA(^XTMP(HMPBATCH,HMPFZTSK,FILTER("domain"))) K @HMP
"RTN","HMPEF",41,0)
 I TYPE="new",$L($T(EN^HMPEFX)) D EN^HMPEFX(HMPID,HMPMAX) Q
"RTN","HMPEF",42,0)
 S HMPTN=$$TAG(TYPE) Q:'$L(HMPTN)  ;D ERR(2) Q
"RTN","HMPEF",43,0)
 D @HMPTN
"RTN","HMPEF",44,0)
 ;
"RTN","HMPEF",45,0)
GTQ ; add item count and terminating characters
"RTN","HMPEF",46,0)
 N ERROR I $D(^TMP($J,"HMP ERROR"))>0 D BUILDERR(.ERROR)
"RTN","HMPEF",47,0)
 I +$G(FILTER("noHead"))=1 D  Q
"RTN","HMPEF",48,0)
 . I $L($G(ERROR(1)))>1 D
"RTN","HMPEF",49,0)
 ..  ;HMPMETA existence shows being called from sync request, freshnessDateTime shows it is unsolicited update
"RTN","HMPEF",50,0)
 ..  ;so for freshness or RPC call this goes into TMP
"RTN","HMPEF",51,0)
 ..  I '$D(HMPMETA)!($G(FILTER("freshnessDateTime"))) S @HMP@("error")=ERROR(1) Q
"RTN","HMPEF",52,0)
 ..  ;whereas this goes into HMPFX
"RTN","HMPEF",53,0)
 ..  S HMPI=HMPI+1,@HMP@(HMPI,1)="null,"_ERROR(1)
"RTN","HMPEF",54,0)
 .S @HMP@("total")=+$G(HMPI)
"RTN","HMPEF",55,0)
 .S @HMP@("last")=HMPLAST
"RTN","HMPEF",56,0)
 .S @HMP@("finished")=+$G(HMPFINI)
"RTN","HMPEF",57,0)
 I '$D(@HMP)!'$G(HMPI) D  Q
"RTN","HMPEF",58,0)
 .I '$D(^TMP($J,"HMP ERROR")) S @HMP@(1)="""data"":{""totalItems"":0,""items"":[]}}" Q
"RTN","HMPEF",59,0)
 .S @HMP@(1)="""data"":{""totalItems"":0,""items"":[]},"
"RTN","HMPEF",60,0)
 .M @HMP@(2)=ERROR
"RTN","HMPEF",61,0)
 ;
"RTN","HMPEF",62,0)
 I $D(@HMP),$G(HMPI) D
"RTN","HMPEF",63,0)
 . S @HMP@(.5)="{"_$$APIVERS^HMPDJFS()_",""data"":{""updated"":"""_$$HL7NOW_""",""currentItemCount"":"_HMPI
"RTN","HMPEF",64,0)
 . S:$G(HMPCNT) @HMP@(.5)=@HMP@(.5)_",""totalItems"":"_HMPCNT
"RTN","HMPEF",65,0)
 . S:$G(HMPLAST) @HMP@(.5)=@HMP@(.5)_",""last"":"_HMPLAST
"RTN","HMPEF",66,0)
 . S @HMP@(.5)=@HMP@(.5)_",""items"":["
"RTN","HMPEF",67,0)
 . S HMPI=HMPI+1,@HMP@(HMPI)=$S($D(^TMP($J,"HMP ERROR"))>0:"]}",1:"]}}")
"RTN","HMPEF",68,0)
 I $D(^TMP($J,"HMP ERROR"))>0 S HMPI=HMPI+1,@HMP@(HMPI,.3)="," M @HMP@(HMPI)=ERROR ;S HMPI=HMPI+1,@HMP@(HMPI)="}"
"RTN","HMPEF",69,0)
 K ^TMP($J,"HMP ERROR")
"RTN","HMPEF",70,0)
 Q
"RTN","HMPEF",71,0)
 ;
"RTN","HMPEF",72,0)
BUILDERR(RESULT) ;  error array
"RTN","HMPEF",73,0)
 N CNT,COUNT,DOM,DOMCNT,ERRMSG,ERROR,FIELD,MESSAGE,MSG,MSGCNT,T,TEMP
"RTN","HMPEF",74,0)
 S COUNT=$G(^TMP($J,"HMP ERROR","# of Errors"))
"RTN","HMPEF",75,0)
 S MESSAGE="A mumps error occurred when extracting data. A total of "_COUNT_" occurred.\n\r"
"RTN","HMPEF",76,0)
 S CNT=1,ERROR("error","message","\",CNT)="A mumps error occurred when extracting patient data. A total of "_COUNT_" occurred.\n\r"
"RTN","HMPEF",77,0)
 S MSGCNT=0 F  S MSGCNT=$O(^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT)) Q:MSGCNT'>0  D
"RTN","HMPEF",78,0)
 . S CNT=CNT+1,MESSAGE=MESSAGE_$G(^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT))_"\n\r"
"RTN","HMPEF",79,0)
 S RESULT(1)="""error"":{""message"":"_""""_MESSAGE_""""_"}"
"RTN","HMPEF",80,0)
 Q
"RTN","HMPEF",81,0)
 ;
"RTN","HMPEF",82,0)
TAG(X) ; -- linetag for reference domain X
"RTN","HMPEF",83,0)
 N Y S Y="HMP",X=$G(X)
"RTN","HMPEF",84,0)
 ; default = HMP Object (various types)
"RTN","HMPEF",85,0)
 I X="location"      S Y="LOC"
"RTN","HMPEF",86,0)
 I X="pt-select"     S Y="PAT"
"RTN","HMPEF",87,0)
 I X="person"        S Y="NP"
"RTN","HMPEF",88,0)
 I X="user"          S Y="NP"
"RTN","HMPEF",89,0)
 I X="labgroup"      S Y="LABGRP"
"RTN","HMPEF",90,0)
 I X="labpanel"      S Y="LABPNL"
"RTN","HMPEF",91,0)
 I X["orderable"     S Y="OI"
"RTN","HMPEF",92,0)
 I X["schedule"      S Y="SCHEDULE"
"RTN","HMPEF",93,0)
 I X["route"         S Y="ROUTE"
"RTN","HMPEF",94,0)
 I X["quick"         S Y="QO"
"RTN","HMPEF",95,0)
 I X="displayGroup"  S Y="ODG"
"RTN","HMPEF",96,0)
 I X["asu-"          S Y="ASU"
"RTN","HMPEF",97,0)
 I X["doc-"          S Y="ASU"
"RTN","HMPEF",98,0)
 I X="immunization"    S Y="IMMTYPE"
"RTN","HMPEF",99,0)
 I X="allergy-list"         S Y="ALLTYPE"
"RTN","HMPEF",100,0)
 ;I X="problem-list"        S Y="PROB"
"RTN","HMPEF",101,0)
 I X="vital-type"      S Y="VTYPE"
"RTN","HMPEF",102,0)
 I X="vital-qualifier"  S Y="VQUAL"
"RTN","HMPEF",103,0)
 I X="vital-category"   S Y="VCAT"
"RTN","HMPEF",104,0)
 I X["clioterm"      S Y="MDTERMS"
"RTN","HMPEF",105,0)
 Q Y
"RTN","HMPEF",106,0)
 ;
"RTN","HMPEF",107,0)
ERR(X,VAL) ;  return error message
"RTN","HMPEF",108,0)
 N MSG  S MSG="Error"
"RTN","HMPEF",109,0)
 I X=2  S MSG="Domain type '"_$G(VAL)_"' not recognized"
"RTN","HMPEF",110,0)
 I X=3  S MSG="UID '"_$G(VAL)_"' not found"
"RTN","HMPEF",111,0)
 I X=99 S MSG="Unknown request"
"RTN","HMPEF",112,0)
 Q MSG
"RTN","HMPEF",113,0)
 ;
"RTN","HMPEF",114,0)
ERRMSG(X,VAL) ; -- return error message
"RTN","HMPEF",115,0)
 N Y S Y="A MUMPS error occurred while extracting "_X_" data"
"RTN","HMPEF",116,0)
 S:$G(VAL) Y=Y_", ien "_VAL
"RTN","HMPEF",117,0)
 Q Y
"RTN","HMPEF",118,0)
 ;
"RTN","HMPEF",119,0)
ERRQ ; -- Quit on error
"RTN","HMPEF",120,0)
 Q
"RTN","HMPEF",121,0)
 ;
"RTN","HMPEF",122,0)
HL7NOW() ; -- Return current time in HL7 format
"RTN","HMPEF",123,0)
 Q $$FMTHL7^HMPSTMP($$NOW^XLFDT)  ; DE5016
"RTN","HMPEF",124,0)
 ;
"RTN","HMPEF",125,0)
ALL() ;
"RTN","HMPEF",126,0)
 Q "location;patient;person;orderable;schedule;route;quick;displayGroup;asu-class;asu-rule;asu-role;doc-action;doc-status;clioterm;immunization;allergy-list;sign-symptom;vital-type;vital-qualifier;vital-category"
"RTN","HMPEF",127,0)
 ;
"RTN","HMPEF",128,0)
ADD(ITEM) ; -- add ITEM to @HMP@(HMPI)
"RTN","HMPEF",129,0)
 N HMPY,HMPERR
"RTN","HMPEF",130,0)
 I $G(HMPSTMP)]"" S @ITEM@("stampTime")=HMPSTMP ; US6734
"RTN","HMPEF",131,0)
 E  S @ITEM@("stampTime")=$$EN^HMPSTMP("NOW") ; DE2616 - must add stampTime to receive OPD freshness update from ADHOC^HMPUTIL1
"RTN","HMPEF",132,0)
 D ENCODE^HMPJSON(ITEM,"HMPY","HMPERR")
"RTN","HMPEF",133,0)
 I $D(HMPERR) D  ;return ERRor instead of ITEM
"RTN","HMPEF",134,0)
 . N HMPTMP,HMPTXT,HMPITM
"RTN","HMPEF",135,0)
 . M HMPITM=@ITEM K HMPY
"RTN","HMPEF",136,0)
 . S HMPTXT(1)="Problem encoding json output."
"RTN","HMPEF",137,0)
 . D SETERROR^HMPUTILS(.HMPTMP,.HMPERR,.HMPTXT,.HMPITM)
"RTN","HMPEF",138,0)
 . K HMPERR D ENCODE^HMPJSON("HMPTMP","HMPY","HMPERR")
"RTN","HMPEF",139,0)
 I $D(HMPY) D
"RTN","HMPEF",140,0)
 . Q:'$D(@ITEM@("uid"))
"RTN","HMPEF",141,0)
 . I $G(HMPMETA) D ADD^HMPMETA($P(HMPFADOM,"#"),@ITEM@("uid"),HMPSTMP) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPEF",142,0)
 . I HMPI D COMMA(HMPI)
"RTN","HMPEF",143,0)
 . ;I HMPI,'$G(FILTER("noHead")) D COMMA(HMPI)
"RTN","HMPEF",144,0)
 . S HMPI=HMPI+1 M @HMP@(HMPI)=HMPY
"RTN","HMPEF",145,0)
 Q
"RTN","HMPEF",146,0)
 ;
"RTN","HMPEF",147,0)
COMMA(I) ; -- add comma between items
"RTN","HMPEF",148,0)
 I $D(ZTQUEUED) Q
"RTN","HMPEF",149,0)
 N J S J=+$O(@HMP@(I,"A"),-1) ;last sub-node for item I
"RTN","HMPEF",150,0)
 S J=J+1,@HMP@(I,J)=","
"RTN","HMPEF",151,0)
 Q
"RTN","HMPEF",152,0)
 ;
"RTN","HMPEF",153,0)
TOTAL(ROOT) ; -- Return total #items in @ROOT@(n)
"RTN","HMPEF",154,0)
 Q $P($G(@ROOT@(0)),U,4)
"RTN","HMPEF",155,0)
 ;
"RTN","HMPEF",156,0)
TEST(TYPE,ID,IN) ; -- test GET, write results to screen
"RTN","HMPEF",157,0)
 N OUT,IDX
"RTN","HMPEF",158,0)
 S U="^"
"RTN","HMPEF",159,0)
 S IN("domain")=$G(TYPE)
"RTN","HMPEF",160,0)
 S:$D(ID) IN("id")=ID
"RTN","HMPEF",161,0)
 D GET(.OUT,.IN)
"RTN","HMPEF",162,0)
 ;
"RTN","HMPEF",163,0)
 S IDX=OUT
"RTN","HMPEF",164,0)
 F  S IDX=$Q(@IDX) Q:IDX'?1"^TMP(""HMP"","1.N.E  Q:+$P(IDX,",",2)'=$J  W !,@IDX
"RTN","HMPEF",165,0)
 Q
"RTN","HMPEF",166,0)
 ;
"RTN","HMPEF",167,0)
 ; ** Reference file searches, using FILTER("parameter")
"RTN","HMPEF",168,0)
 ;
"RTN","HMPEF",169,0)
PAT ;Patients
"RTN","HMPEF",170,0)
 N DFN,PAT,HMPPOPD
"RTN","HMPEF",171,0)
 S HMPPOPD=1
"RTN","HMPEF",172,0)
 S HMPCNT=$$TOTAL("^DPT")
"RTN","HMPEF",173,0)
 I $G(HMPID) S DFN=+HMPID D LKUP^HMPDJ00 Q
"RTN","HMPEF",174,0)
 N ERRMSG S ERRMSG="A mumps error occurred while extracting patients."
"RTN","HMPEF",175,0)
 S DFN=+$G(HMPLAST) F  S DFN=$O(^DPT(DFN)) Q:'(DFN>0)  D  I HMPMAX>0,HMPI'<HMPMAX Q  ;DE4496 19 August 2016
"RTN","HMPEF",176,0)
 . N $ES,$ET
"RTN","HMPEF",177,0)
 . S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPEF",178,0)
 . I $P($G(^DPT(DFN,0)),U)="" D LOGDPT^HMPLOG(DFN) Q  ;DE4496 19 August 2016
"RTN","HMPEF",179,0)
 . S ERRMSG=$$ERRMSG("Patient",DFN)
"RTN","HMPEF",180,0)
 . K PAT D LKUP^HMPDJ00
"RTN","HMPEF",181,0)
 . S HMPLAST=DFN
"RTN","HMPEF",182,0)
 I '(DFN>0) S HMPFINI=1  ;DE4496 19 August 2016
"RTN","HMPEF",183,0)
 Q
"RTN","HMPEF",184,0)
LOC ; Hospital Location (#44) and Ward Location (#42)  /DE2818
"RTN","HMPEF",185,0)
 D LOC^HMPEF1(.HMPFINI,.HMPFLDON,$G(HMPMETA))
"RTN","HMPEF",186,0)
 Q
"RTN","HMPEF",187,0)
 ;
"RTN","HMPEF",188,0)
ACTWRD(IEN) ;Boolean TRUE if active WARD LOCATION
"RTN","HMPEF",189,0)
 ; IEN - IEN in file 42
"RTN","HMPEF",190,0)
 S D0=IEN D WIN^DGPMDDCF Q 'X  ; SRG: need DBIA
"RTN","HMPEF",191,0)
 ;
"RTN","HMPEF",192,0)
ACTLOC(LOC) ;Boolean TRUE if active hospital location
"RTN","HMPEF",193,0)
 ; ^SC - IA 10040
"RTN","HMPEF",194,0)
 N D0,X I +$G(^SC(LOC,"OOS")) Q 0                ; screen out OOS entry
"RTN","HMPEF",195,0)
 S D0=+$G(^SC(LOC,42)) I D0 D WIN^DGPMDDCF Q 'X  ; chk out of svc wards
"RTN","HMPEF",196,0)
 S X=$G(^SC(LOC,"I")) I +X=0 Q 1                 ; no inactivate date
"RTN","HMPEF",197,0)
 I DT>$P(X,U)&($P(X,U,2)=""!(DT<$P(X,U,2))) Q 0  ; chk reactivate date
"RTN","HMPEF",198,0)
 Q 1                                             ; must still be active
"RTN","HMPEF",199,0)
 ;
"RTN","HMPEF",200,0)
NP ;New Persons
"RTN","HMPEF",201,0)
 D NP^HMPEF1
"RTN","HMPEF",202,0)
 Q
"RTN","HMPEF",203,0)
 ;
"RTN","HMPEF",204,0)
KEYS(IEN) ;user's keys
"RTN","HMPEF",205,0)
 N HMPKEY,IENS,X,CNT
"RTN","HMPEF",206,0)
 D GETS^DIQ(200,IEN_",","51*","IE","HMPKEY") S CNT=0
"RTN","HMPEF",207,0)
 S IENS="" F  S IENS=$O(HMPKEY(200.051,IENS)) Q:IENS=""  D
"RTN","HMPEF",208,0)
 . S X=$G(HMPKEY(200.051,IENS,.01,"E")),CNT=CNT+1
"RTN","HMPEF",209,0)
 . S USER("vistaKeys",CNT,"name")=X
"RTN","HMPEF",210,0)
 . S X=$G(HMPKEY(200.051,IENS,3,"I"))
"RTN","HMPEF",211,0)
 . S:X USER("vistaKeys",CNT,"reviewDate")=$$JSONDT^HMPUTILS(X)
"RTN","HMPEF",212,0)
 Q
"RTN","HMPEF",213,0)
 ;
"RTN","HMPEF",214,0)
ODG ;
"RTN","HMPEF",215,0)
 D ADDODG^HMPCORD4
"RTN","HMPEF",216,0)
 Q
"RTN","HMPEF",217,0)
 ;
"RTN","HMPEF",218,0)
OI ;
"RTN","HMPEF",219,0)
 D OI^HMPCORD4("PS^RAP^LRT")
"RTN","HMPEF",220,0)
 Q
"RTN","HMPEF",221,0)
 ;
"RTN","HMPEF",222,0)
PROB ;get problem list OPD store
"RTN","HMPEF",223,0)
 D PROB^HMPEF1(.HMPFINI,LEX)
"RTN","HMPEF",224,0)
 Q
"RTN","HMPEF",225,0)
 ;
"RTN","HMPEF",226,0)
QO ;
"RTN","HMPEF",227,0)
 D QO^HMPCORD4
"RTN","HMPEF",228,0)
 Q
"RTN","HMPEF",229,0)
 ;
"RTN","HMPEF",230,0)
SCHEDULE ;
"RTN","HMPEF",231,0)
 N RESULT
"RTN","HMPEF",232,0)
 D ADDSCH^HMPCORD4
"RTN","HMPEF",233,0)
 Q
"RTN","HMPEF",234,0)
 ;
"RTN","HMPEF",235,0)
ROUTE ;
"RTN","HMPEF",236,0)
 N RESULT
"RTN","HMPEF",237,0)
 D ADDROUTE^HMPCORD4
"RTN","HMPEF",238,0)
 Q
"RTN","HMPEF",239,0)
 ;
"RTN","HMPEF",240,0)
HMP ; HMP Objects
"RTN","HMPEF",241,0)
 N IEN
"RTN","HMPEF",242,0)
 S HMPCNT=$$TOTAL("^HMP(800000.11)")
"RTN","HMPEF",243,0)
 I $L(HMPID) D  Q
"RTN","HMPEF",244,0)
 . I HMPID=+HMPID S IEN=HMPID
"RTN","HMPEF",245,0)
 . E  S IEN=+$O(^HMP(800000.11,"B",HMPID,0))
"RTN","HMPEF",246,0)
 . S ERRMSG=$$ERRMSG("HMP Object",IEN)
"RTN","HMPEF",247,0)
 . D:IEN HMP1^HMPDJ02(800000.11,IEN)
"RTN","HMPEF",248,0)
 S IEN=+$G(HMPLAST) F  S IEN=$O(^HMP(800000.11,"C",TYPE,IEN)) Q:IEN<1  D  I HMPMAX>0,HMPI'<HMPMAX Q
"RTN","HMPEF",249,0)
 . S ERRMSG=$$ERRMSG("HMP Object",IEN)
"RTN","HMPEF",250,0)
 . D HMP1^HMPDJ02(800000.11,IEN) S HMPLAST=IEN
"RTN","HMPEF",251,0)
 I IEN<1 S HMPFINI=1
"RTN","HMPEF",252,0)
 Q
"RTN","HMPEF",253,0)
 ;
"RTN","HMPEF",254,0)
SOURCE(SRC) ;
"RTN","HMPEF",255,0)
 N X S X=""
"RTN","HMPEF",256,0)
 I SRC["SC("        S X="clinic"
"RTN","HMPEF",257,0)
 I SRC["DPT("       S X="patient"
"RTN","HMPEF",258,0)
 I SRC["DIC(42"     S X="ward"
"RTN","HMPEF",259,0)
 I SRC["SCTM"       S X="pcmm"
"RTN","HMPEF",260,0)
 I SRC["OR(100.21"  S X="cprs"
"RTN","HMPEF",261,0)
 I SRC["DIC(45.7"   S X="specialty"
"RTN","HMPEF",262,0)
 I SRC["VA(200"     S X="provider"
"RTN","HMPEF",263,0)
 I SRC["PXRM(810.4" S X="pxrm"
"RTN","HMPEF",264,0)
 Q X
"RTN","HMPEF",265,0)
 ;
"RTN","HMPEF",266,0)
ASU ; ASU files
"RTN","HMPEF",267,0)
 N X,RTN S X=$P($G(TYPE),"-",2)
"RTN","HMPEF",268,0)
 S RTN=$$UP^XLFSTR(X)_"^HMPEASU"
"RTN","HMPEF",269,0)
 I X'="",$L($T(@RTN)) D @RTN
"RTN","HMPEF",270,0)
 Q
"RTN","HMPEF",271,0)
 ;
"RTN","HMPEF",272,0)
MDTERMS ; CP Terminology
"RTN","HMPEF",273,0)
 D:$L($T(TERM^HMPMDUTL)) TERM^HMPMDUTL
"RTN","HMPEF",274,0)
 Q
"RTN","HMPEF",275,0)
LABGRP ;
"RTN","HMPEF",276,0)
 D SHWCUMR2^HMPELAB
"RTN","HMPEF",277,0)
 Q
"RTN","HMPEF",278,0)
LABPNL ;
"RTN","HMPEF",279,0)
 D SHWORPNL^HMPELAB
"RTN","HMPEF",280,0)
 Q
"RTN","HMPEF",281,0)
 ;
"RTN","HMPEF",282,0)
 ;DE2818, changed reference to ^VA(201) to a FileMan call
"RTN","HMPEF",283,0)
ISPROXY(IEN) ; Boolean function, is NEW PERSON entry an APPLICATION PROXY?
"RTN","HMPEF",284,0)
 N APP,HMPMSG,HMPUCLS,T,V
"RTN","HMPEF",285,0)
 ; APP - returned value
"RTN","HMPEF",286,0)
 ; HMPUCLS - user class array
"RTN","HMPEF",287,0)
 ; HMPMSG - FileMan message array
"RTN","HMPEF",288,0)
 ;
"RTN","HMPEF",289,0)
 D GETS^DIQ(200,IEN_",","9.5*","E","HMPUCLS","HMPMSG")  ; get external format
"RTN","HMPEF",290,0)
 S APP=0,T="APPLICATION PROXY",V="HMPUCLS"
"RTN","HMPEF",291,0)
 ; search returned array for value equal to T
"RTN","HMPEF",292,0)
 F  S V=$Q(@V) Q:V=""!APP  S:@V=T APP=1
"RTN","HMPEF",293,0)
 Q APP
"RTN","HMPEF",294,0)
 ;
"RTN","HMPEF",295,0)
IMMTYPE ;immunization types
"RTN","HMPEF",296,0)
 D IMMTYPE^HMPCORD5
"RTN","HMPEF",297,0)
 Q
"RTN","HMPEF",298,0)
 ;
"RTN","HMPEF",299,0)
ALLTYPE ;allergy-list types
"RTN","HMPEF",300,0)
 ;BL;REMOVE FROM ODS
"RTN","HMPEF",301,0)
 ;D ALLTYPE^HMPCORD5
"RTN","HMPEF",302,0)
 Q
"RTN","HMPEF",303,0)
 ;
"RTN","HMPEF",304,0)
VTYPE ;vital types
"RTN","HMPEF",305,0)
 D VTYPE^HMPCORD5
"RTN","HMPEF",306,0)
 Q
"RTN","HMPEF",307,0)
 ;
"RTN","HMPEF",308,0)
VQUAL ;vital qualifiers
"RTN","HMPEF",309,0)
 D VQUAL^HMPCORD5
"RTN","HMPEF",310,0)
 Q
"RTN","HMPEF",311,0)
 ;
"RTN","HMPEF",312,0)
VCAT ;vital categories
"RTN","HMPEF",313,0)
 D VCAT^HMPCORD5
"RTN","HMPEF",314,0)
 Q
"RTN","HMPEF",315,0)
 ;
"RTN","HMPEF",316,0)
FILENAME ; text of filenames for search treeview
"RTN","HMPEF",317,0)
 ;;VA Allergies File
"RTN","HMPEF",318,0)
 ;;VA Allergies File (Synonyms)  SPACER ONLY - NOT DISPLAYED
"RTN","HMPEF",319,0)
 ;;National Drug File - Generic Drug Name
"RTN","HMPEF",320,0)
 ;;National Drug file - Trade Name
"RTN","HMPEF",321,0)
 ;;Local Drug File
"RTN","HMPEF",322,0)
 ;;Local Drug File (Synonyms)  SPACER ONLY - NOT DISPLAYED
"RTN","HMPEF",323,0)
 ;;Drug Ingredients File
"RTN","HMPEF",324,0)
 ;;VA Drug Class File
"RTN","HMPEF",325,0)
 ;;
"RTN","HMPEFX")
0^50^B8402792
"RTN","HMPEFX",1,0)
HMPEFX ;SLC/MKB,ASMR/RRB,CPC - Reference data update;7/19/12 2:26pm
"RTN","HMPEFX",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**4**;Sep 01, 2011;Build 13
"RTN","HMPEFX",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPEFX",4,0)
 ;
"RTN","HMPEFX",5,0)
 ; External References          DBIA#
"RTN","HMPEFX",6,0)
 ; -------------------          -----
"RTN","HMPEFX",7,0)
 ; ^DPT                         10035
"RTN","HMPEFX",8,0)
 ; MPIF001                       2701
"RTN","HMPEFX",9,0)
 ; XLFSTR                       10104
"RTN","HMPEFX",10,0)
 Q
"RTN","HMPEFX",11,0)
 ;
"RTN","HMPEFX",12,0)
EN(LAST,MAX) ; -- get data from ^XTMP("HMPEF-<date>",n)
"RTN","HMPEFX",13,0)
 ;[MAX not used yet]
"RTN","HMPEFX",14,0)
 N X,Y,HMPTOTL,DOMCNT,TYPE,NAME,RTN,HMPID
"RTN","HMPEFX",15,0)
 S LAST=$G(LAST) D GETLIST(LAST)
"RTN","HMPEFX",16,0)
 G ENQ:$G(^TMP("HMPX",$J,0))<1 ;no data
"RTN","HMPEFX",17,0)
 ;
"RTN","HMPEFX",18,0)
 S (HMPTOTL,DOMCNT)=0
"RTN","HMPEFX",19,0)
 S TYPE="" F  S TYPE=$O(^TMP("HMPX",$J,TYPE)) Q:TYPE=""  D
"RTN","HMPEFX",20,0)
 . S NAME=$$LOW^XLFSTR(TYPE)
"RTN","HMPEFX",21,0)
 . S RTN=$$TAG^HMPEF(NAME)_"^HMPEF" Q:'$L($T(@RTN))
"RTN","HMPEFX",22,0)
 . S DOMCNT=DOMCNT+1
"RTN","HMPEFX",23,0)
 . ;
"RTN","HMPEFX",24,0)
 . N HMP,HMPI
"RTN","HMPEFX",25,0)
 . S HMP=$NA(^TMP("HMP",$J,DOMCNT)),HMPI=0,HMPID=""
"RTN","HMPEFX",26,0)
 . F  S HMPID=$O(^TMP("HMPX",$J,TYPE,HMPID)) Q:HMPID=""  D
"RTN","HMPEFX",27,0)
 .. D @RTN S HMPTOTL=HMPTOTL+1
"RTN","HMPEFX",28,0)
 . ;
"RTN","HMPEFX",29,0)
 . I 'HMPI S DOMCNT=DOMCNT-1 Q   ;no data, or error
"RTN","HMPEFX",30,0)
 . S:DOMCNT>1 @HMP@(.3)=","
"RTN","HMPEFX",31,0)
 . S @HMP@(.5)="{""domainName"":"""_NAME_""",""total"":"_HMPI_",""items"":["
"RTN","HMPEFX",32,0)
 . S HMPI=HMPI+1,@HMP@(HMPI)="]}"
"RTN","HMPEFX",33,0)
 ;
"RTN","HMPEFX",34,0)
ENQ ;
"RTN","HMPEFX",35,0)
 S Y=$G(^TMP("HMPX",$J,0)) K ^TMP("HMPX",$J)
"RTN","HMPEFX",36,0)
 I '$G(DOMCNT) S @HMP@(.5)="{"_$$APIVERS^HMPDJFS()_",""data"":{""lastUpdate"":"""_LAST_""",""totalItems"":0,""items"":[]}}" Q
"RTN","HMPEFX",37,0)
 ;
"RTN","HMPEFX",38,0)
 S @HMP@(.5)="{"_$$APIVERS^HMPDJFS()_",""data"":{""lastUpdate"":"""_Y_""",""totalItems"":"_DOMCNT_",""items"":["
"RTN","HMPEFX",39,0)
 S HMPI=DOMCNT I $D(^TMP($J,"HMP ERROR")) D
"RTN","HMPEFX",40,0)
 . N ERROR,CNT
"RTN","HMPEFX",41,0)
 . D BUILDERR^HMPEF(.ERROR)
"RTN","HMPEFX",42,0)
 . S HMPI=HMPI+1,@HMP@(HMPI)=",",CNT=0
"RTN","HMPEFX",43,0)
 . F  S CNT=$O(ERROR(CNT)) Q:CNT'>0  S HMPI=HMPI+1,@HMP@(HMPI)=ERROR(CNT)
"RTN","HMPEFX",44,0)
 . K ^TMP($J,"HMP ERROR")
"RTN","HMPEFX",45,0)
 S HMPI=HMPI+1,@HMP@(HMPI)="]}}"
"RTN","HMPEFX",46,0)
 Q
"RTN","HMPEFX",47,0)
 ;
"RTN","HMPEFX",48,0)
GETLIST(LAST) ; -- build list of updates for client
"RTN","HMPEFX",49,0)
 ; Returns ^TMP("HMPX",$J,0) = last DATE:SEQ included
"RTN","HMPEFX",50,0)
 ;         ^TMP("HMPX",$J,TYPE,ID)=ACT
"RTN","HMPEFX",51,0)
 N DATE,SEQ,BEG,END,IDX,X0,DFN,TYPE,ID,ACT
"RTN","HMPEFX",52,0)
 K ^TMP("HMPX",$J)
"RTN","HMPEFX",53,0)
 S DATE=+LAST,SEQ=+$P(LAST,":",2)
"RTN","HMPEFX",54,0)
 ; generate list ID, and end point
"RTN","HMPEFX",55,0)
 S BEG=$NA(^XTMP("HMPEF-"_DATE,SEQ))         ;init loop where left off
"RTN","HMPEFX",56,0)
 ; END=$Q(^XTMP("HMPEF-"_(DT+1),9999999),-1) ;last node
"RTN","HMPEFX",57,0)
 S END=+$O(^XTMP("HMPEF-"_DT,"A"),-1)        ;last node
"RTN","HMPEFX",58,0)
 S ^TMP("HMPX",$J,0)=DT_":"_END              ;date:seq
"RTN","HMPEFX",59,0)
 ;
"RTN","HMPEFX",60,0)
 S IDX=BEG F  S IDX=$Q(@IDX) Q:$$DONE  D
"RTN","HMPEFX",61,0)
 . S X0=@IDX,TYPE=$P(X0,U),ID=$P(X0,U,2),ACT=$P(X0,U,3)
"RTN","HMPEFX",62,0)
 . I TYPE=""!(ID="") Q  ;error
"RTN","HMPEFX",63,0)
 . S ^TMP("HMPX",$J,TYPE,ID)=ACT
"RTN","HMPEFX",64,0)
 Q
"RTN","HMPEFX",65,0)
 ;
"RTN","HMPEFX",66,0)
DONE() ; -- Return 1 or 0, if loop has finished
"RTN","HMPEFX",67,0)
 I IDX'?1"^XTMP(""HMPEF-"7N.E  Q 1  ;end of ^XTMP
"RTN","HMPEFX",68,0)
 N D,N S D=+$P(IDX,"-",2),N=+$P(IDX,",",2)
"RTN","HMPEFX",69,0)
 ; check HMP-DATE subscript
"RTN","HMPEFX",70,0)
 I D<DT Q 0                         ;prior day: keep going
"RTN","HMPEFX",71,0)
 I D>DT Q 1                         ;next day:  stop loop
"RTN","HMPEFX",72,0)
 ; D=DT: check sequence# subscript
"RTN","HMPEFX",73,0)
 I N>END Q 1
"RTN","HMPEFX",74,0)
 Q 0
"RTN","HMPEVNT")
0^29^B202600828
"RTN","HMPEVNT",1,0)
HMPEVNT ;SLC/MKB,ASMR/JD,RRB,CPC,MBS,CPC,hrubovcak -- VistA event listeners;Jun 26, 2017 19:11:09
"RTN","HMPEVNT",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3,4**;May 15, 2016;Build 13
"RTN","HMPEVNT",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPEVNT",4,0)
 ;
"RTN","HMPEVNT",5,0)
 ; External References          DBIA#
"RTN","HMPEVNT",6,0)
 ; DG FIELD MONITOR              3344
"RTN","HMPEVNT",7,0)
 ; DGPM MOVEMENT EVENTS          1181
"RTN","HMPEVNT",8,0)
 ; GMRA ENTERED IN ERROR         1467
"RTN","HMPEVNT",9,0)
 ; GMRA SIGN-OFF ON DATA         1469
"RTN","HMPEVNT",10,0)
 ; GMRC EVSEND OR                3140
"RTN","HMPEVNT",11,0)
 ; LR70 CH EVSEND OR             6087
"RTN","HMPEVNT",12,0)
 ; MDC OBSERVATION UPDATE        6084
"RTN","HMPEVNT",13,0)
 ; PS EVSEND OR                  2415
"RTN","HMPEVNT",14,0)
 ; PSB EVSEND HMP                6085
"RTN","HMPEVNT",15,0)
 ; PXK VISIT DATA EVENT          1298
"RTN","HMPEVNT",16,0)
 ; RA EVSEND OR                  6086
"RTN","HMPEVNT",17,0)
 ; SDAM APPOINTMENT EVENTS       1320
"RTN","HMPEVNT",18,0)
 ; ^AUPNVSIT                     2028
"RTN","HMPEVNT",19,0)
 ; ^DPT                         10035
"RTN","HMPEVNT",20,0)
 ; ^OR(100                       5771
"RTN","HMPEVNT",21,0)
 ; DIQ                           2056
"RTN","HMPEVNT",22,0)
 ; GMVUTL                        5046
"RTN","HMPEVNT",23,0)
 ; TIUSRVLO                      2834
"RTN","HMPEVNT",24,0)
 ; VADPT                        10061
"RTN","HMPEVNT",25,0)
 ; VASITE                       10112
"RTN","HMPEVNT",26,0)
 ; XLFDT                        10103
"RTN","HMPEVNT",27,0)
 ; XTHC10                        5515
"RTN","HMPEVNT",28,0)
 ; ORDRNUM^PSSUTLA2              6426  ;DE6363 - JD - 8/23/16
"RTN","HMPEVNT",29,0)
 ; PROD^XUPROD                   4440
"RTN","HMPEVNT",30,0)
 ;
"RTN","HMPEVNT",31,0)
 ; DE2818 - SQA findings.
"RTN","HMPEVNT",32,0)
 ;          1) Correct unkilled variables by modifying line tags to accept variables as
"RTN","HMPEVNT",33,0)
 ;          parameters and modifying associated protocol routine calls to pass variables
"RTN","HMPEVNT",34,0)
 ;          as parameters. RRB - 10/28/2015
"RTN","HMPEVNT",35,0)
 ;
"RTN","HMPEVNT",36,0)
 ;Oct 15, 2015 - PB - modified to trigger an unsolicited sync action when an order is discontinued and the patient is subscribed to eHMP
"RTN","HMPEVNT",37,0)
 ;
"RTN","HMPEVNT",38,0)
 ;DE3327 - 5/4/16 - JD - Removed the server hardcoding (hmp-development-box).
"RTN","HMPEVNT",39,0)
 ;                       *** NOTE ***
"RTN","HMPEVNT",40,0)
 ;                       It is understood that as of the date of modifying this code (5/4/16), there
"RTN","HMPEVNT",41,0)
 ;                       is one AND ONLY one server entry in the HMP Subscription file (#800000)
"RTN","HMPEVNT",42,0)
 ;                       per site.  This will be fixed in future releases to accommodate multiple
"RTN","HMPEVNT",43,0)
 ;                       servers per site.
"RTN","HMPEVNT",44,0)
 ;
"RTN","HMPEVNT",45,0)
 ;US18852 - 5/31/17 - CPC add new hospital discharge event
"RTN","HMPEVNT",46,0)
 Q
"RTN","HMPEVNT",47,0)
 ;
"RTN","HMPEVNT",48,0)
DG(DGDA,DGFIELD,DGFILE) ; -- DG FIELD MONITOR protocol listener  /DE2818 
"RTN","HMPEVNT",49,0)
 Q:$G(DGFILE)'=2         ;Patient file only
"RTN","HMPEVNT",50,0)
 N DFN S DFN=+$G(DGDA)
"RTN","HMPEVNT",51,0)
 ; operational pt-select - *s68 BEGIN
"RTN","HMPEVNT",52,0)
 I "^.01^.02^.03^.09^.101^.351^.361^"[(U_+$G(DGFIELD)_U) D
"RTN","HMPEVNT",53,0)
 . ; -- if patient entry has been deleted, delete pt-select object
"RTN","HMPEVNT",54,0)
 . I $G(DGFIELD)=".01",'$D(^DPT(DFN)) D POSTX("pt-select",DFN,"@") Q  ; *s68 - END
"RTN","HMPEVNT",55,0)
 . D POSTX("pt-select",DFN_"&"_$G(DGFIELD))
"RTN","HMPEVNT",56,0)
 ; subscribed patient
"RTN","HMPEVNT",57,0)
 I $D(^HMP(800000,"AITEM",DFN)),$$FLD(+$G(DGFIELD)) D POST(DFN,"patient",DFN)
"RTN","HMPEVNT",58,0)
 Q
"RTN","HMPEVNT",59,0)
 ;
"RTN","HMPEVNT",60,0)
FLD(X) ; --Return 1 or 0, if X is a field tracked by HMP
"RTN","HMPEVNT",61,0)
 S X=U_+$G(X)_U
"RTN","HMPEVNT",62,0)
 I "^.01^.02^.03^.05^.08^.09^.351^.361^.364^"[X Q 1         ;demographic
"RTN","HMPEVNT",63,0)
 I "^.111^.1112^.112^.113^.114^.115^.131^.132^.134^"[X Q 1  ;addr/phone
"RTN","HMPEVNT",64,0)
 I "^.211^.212^.213^.214^.216^.217^.218^.219^"[X Q 1        ;NOK
"RTN","HMPEVNT",65,0)
 I "^.301^.302^1901^.32102^.32103^.32201^.5295^"[X Q 1      ;serv conn
"RTN","HMPEVNT",66,0)
 ;New fields.  JD - 9/24/15
"RTN","HMPEVNT",67,0)
 I "^.133^"[X Q 1                                           ;email address
"RTN","HMPEVNT",68,0)
 I "^.1211^.1212^.1213^.1214^.1215^.1216^"[X Q 1            ;temporary address
"RTN","HMPEVNT",69,0)
 I "^.331^.332^.333^.334^.335^.336^.337^.338^.339^.33011^"[X Q 1  ;emergency contact addr/phone
"RTN","HMPEVNT",70,0)
 I "^.215^.21011^"[X Q 1                                    ;NOK addr line 3 and work phone
"RTN","HMPEVNT",71,0)
 I "^.3731^"[X Q 1                                          ;service connected conditions
"RTN","HMPEVNT",72,0)
 I "^.18^3^8^16^"[X Q 1                                     ;insurance  
"RTN","HMPEVNT",73,0)
 Q 0
"RTN","HMPEVNT",74,0)
 ;
"RTN","HMPEVNT",75,0)
DGPM(DGPMA,DGPMDA,DGPMP,DGPMT) ; -- DGPM MOVEMENT EVENTS protocol listener  /DE2818
"RTN","HMPEVNT",76,0)
 ;    [expects DFN,DGPM* variables]
"RTN","HMPEVNT",77,0)
 N ADM,ACT S ADM=DGPMDA
"RTN","HMPEVNT",78,0)
 I DGPMT'=1 S ADM=$S(DGPMA:$P(DGPMA,U,14),1:$P(DGPMP,U,14)) Q:ADM<1
"RTN","HMPEVNT",79,0)
 S ACT=$S(DGPMA:"",1:"@")
"RTN","HMPEVNT",80,0)
 I DGPMT=3 D POST(DFN,"discharge","H"_ADM,ACT,1) ;US18852 create new discharge event with ignore set to override subscription check
"RTN","HMPEVNT",81,0)
 I $D(^HMP(800000,"AITEM",DFN)) D POST(DFN,"visit","H"_ADM,ACT)
"RTN","HMPEVNT",82,0)
 ; update roster(s) if current movement
"RTN","HMPEVNT",83,0)
 N ADMX,MVTX,PREV,NEW,OLD,WARD
"RTN","HMPEVNT",84,0)
 S ADMX=$Q(^DGPM("ATID1",DFN)) Q:$QS(ADMX,4)'=ADM
"RTN","HMPEVNT",85,0)
 S MVTX=$Q(^DGPM("APMV",DFN,ADM)) Q:$QS(MVTX,5)'=DGPMDA
"RTN","HMPEVNT",86,0)
 S PREV=$G(DGPMP) I 'PREV,DGPMT'=1 D  ;previous or edited mvt
"RTN","HMPEVNT",87,0)
 . S MVTX=$Q(@MVTX) Q:DFN'=$QS(MVTX,2)  Q:ADM'=$QS(MVTX,3)
"RTN","HMPEVNT",88,0)
 . S PREV=$G(^DGPM(+$QS(MVTX,5),0))
"RTN","HMPEVNT",89,0)
 S NEW=$P(DGPMA,U,6),OLD=$P(PREV,U,6)
"RTN","HMPEVNT",90,0)
 I NEW'=OLD F WARD=NEW,OLD I WARD D
"RTN","HMPEVNT",91,0)
 . S I=0 F  S I=$O(^HMPROSTR("AD",WARD_";DIC(42,",I)) Q:I<1  D POSTX("roster",I)
"RTN","HMPEVNT",92,0)
 Q
"RTN","HMPEVNT",93,0)
 ;-find visit# for corresponding admission [not used]
"RTN","HMPEVNT",94,0)
 N ADM,PTF,IDT,ID,ACT
"RTN","HMPEVNT",95,0)
 I DGPMA S ADM=+DGPMA,PTF=+$P(DGPMA,U,16)
"RTN","HMPEVNT",96,0)
 E  S ADM=+DGPMP,PTF=+$P(DGPMP,U,16)
"RTN","HMPEVNT",97,0)
 I DGPMT'=1 D  Q:ADM<1
"RTN","HMPEVNT",98,0)
 . N VAIP S VAIP("E")=DGPMDA
"RTN","HMPEVNT",99,0)
 . D IN5^VADPT S ADM=+VAIP(13,1),PTF=+VAIP(12)
"RTN","HMPEVNT",100,0)
 S IDT=9999999-$P(ADM,".") S:ADM["." IDT=IDT_"."_$P(ADM,".",2)
"RTN","HMPEVNT",101,0)
 S ID=+$O(^AUPNVSIT("AAH",DFN,IDT,0)) Q:'ID
"RTN","HMPEVNT",102,0)
 S ACT=$S(DGPMA:"",1:"@")
"RTN","HMPEVNT",103,0)
 D POST(DFN,"visit",ID,ACT)
"RTN","HMPEVNT",104,0)
 ; POST(DFN,"ptf",PTF,ACT):DGPMT=3
"RTN","HMPEVNT",105,0)
 Q
"RTN","HMPEVNT",106,0)
 ;
"RTN","HMPEVNT",107,0)
NEWINPT() ; -- is DFN newly admitted?
"RTN","HMPEVNT",108,0)
 N Y S Y=0
"RTN","HMPEVNT",109,0)
 I DGPMT=1,DGPMA,'DGPMP,+$G(^DPT(DFN,.105))=DGPMDA S Y=1 ;new admission
"RTN","HMPEVNT",110,0)
 Q Y
"RTN","HMPEVNT",111,0)
 ;
"RTN","HMPEVNT",112,0)
PCMMT(SCPTTMAF,SCPTTMB4) ; -- SCMC PATIENT TEAM CHANGES protocol listener /DE2818
"RTN","HMPEVNT",113,0)
 ;I '$P($G(SCPTTMB4),U,8),'$P($G(SCPTTMAF),U,8) Q  ;not pc change ;DE5410 removed to track changes to other teams
"RTN","HMPEVNT",114,0)
 N DFN S DFN=$S($G(SCPTTMAF):+SCPTTMAF,1:+$G(SCPTTMB4)) Q:'DFN
"RTN","HMPEVNT",115,0)
 D POST(DFN,"patient",DFN)
"RTN","HMPEVNT",116,0)
 Q
"RTN","HMPEVNT",117,0)
 ;
"RTN","HMPEVNT",118,0)
PCMMTP(SCPTTPAF,SCPTTPB4) ; -- SCMC PATIENT TEAM POSITION CHANGES protocol listener /DE2818
"RTN","HMPEVNT",119,0)
 ;I '$P($G(SCPTTPB4),U,5),'$P($G(SCPTTPAF),U,5) Q  ;not pc change ;DE5410 removed to track changes to other teams
"RTN","HMPEVNT",120,0)
 N TM,DFN
"RTN","HMPEVNT",121,0)
 S TM=$S($G(SCPTTPAF):+SCPTTPAF,1:+$G(SCPTTPB4)) Q:'TM
"RTN","HMPEVNT",122,0)
 ;DE2818
"RTN","HMPEVNT",123,0)
 S DFN=$$GET1^DIQ(404.42,+TM_",",.01,"I")  ;ICR 1922
"RTN","HMPEVNT",124,0)
 D POST(DFN,"patient",DFN)
"RTN","HMPEVNT",125,0)
 Q
"RTN","HMPEVNT",126,0)
 ;
"RTN","HMPEVNT",127,0)
SDAM(SDATA) ; -- SDAM APPOINTMENT EVENTS protocol listener /DE2818
"RTN","HMPEVNT",128,0)
 I $G(SDATA)'="" D  Q  ;appointments ;DE5411 still process if Piece 1 not set, catches auto-rebook status
"RTN","HMPEVNT",129,0)
 . N DFN,DATE,HLOC,STS,REASON,PROV
"RTN","HMPEVNT",130,0)
 . S DFN=+$P(SDATA,U,2) I '(DFN>0) D LOGDPT^HMPLOG(DFN) Q  ;DE4496 19 August 2016
"RTN","HMPEVNT",131,0)
 . Q:'$D(^HMP(800000,"AITEM",DFN))
"RTN","HMPEVNT",132,0)
 . S DATE=+$P(SDATA,U,3),HLOC=+$P(SDATA,U,4),(PROV,REASON)=""
"RTN","HMPEVNT",133,0)
 . D POST(DFN,"appointment","A;"_DATE_";"_HLOC_";"_REASON_";"_$TR($P(PROV,U,1,2),"^",";"))
"RTN","HMPEVNT",134,0)
 Q
"RTN","HMPEVNT",135,0)
 ;
"RTN","HMPEVNT",136,0)
PCE ; -- PXK VISIT DATA EVENT protocol listener, used by HMP PCE EVENTS protocol
"RTN","HMPEVNT",137,0)
 N ACT,DA,DFN,HMPPXK,IEN,PX0A,PX0B,ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE,ZTSK ;DE4195 and DE6485
"RTN","HMPEVNT",138,0)
 S IEN=+$O(^TMP("PXKCO",$J,0)) Q:IEN<1
"RTN","HMPEVNT",139,0)
 S PX0A=$G(^TMP("PXKCO",$J,IEN,"VST",IEN,0,"AFTER")),PX0B=$G(^("BEFORE"))
"RTN","HMPEVNT",140,0)
 S DFN=$S($L(PX0A):+$P(PX0A,U,5),1:+$P(PX0B,U,5))
"RTN","HMPEVNT",141,0)
 Q:'(DFN>0)  Q:'$D(^HMP(800000,"AITEM",DFN))  ;DE4496 19 August 2016
"RTN","HMPEVNT",142,0)
 ; Visit file
"RTN","HMPEVNT",143,0)
 S ACT=$S(PX0A="":"@",1:"")
"RTN","HMPEVNT",144,0)
 ;DE4195 - put subsequent processing into taskman
"RTN","HMPEVNT",145,0)
 M HMPPXK=^TMP("PXKCO",$J)
"RTN","HMPEVNT",146,0)
 ; DE6485, add null device in ZTIO
"RTN","HMPEVNT",147,0)
 S ZTRTN="PCE2^HMPEVNT",ZTDTH=$H,ZTIO="",ZTSAVE("HMPPXK(")="",ZTSAVE("DFN")="",ZTSAVE("IEN")="",ZTSAVE("ACT")=""
"RTN","HMPEVNT",148,0)
 S ZTDESC="HMP PXK VISIT EVENT HANDLER"
"RTN","HMPEVNT",149,0)
 D ^%ZTLOAD
"RTN","HMPEVNT",150,0)
 Q
"RTN","HMPEVNT",151,0)
PCE2 ; DE4195 - run in taskman
"RTN","HMPEVNT",152,0)
 N DA,SUB
"RTN","HMPEVNT",153,0)
 D POST(DFN,"visit",IEN,ACT)
"RTN","HMPEVNT",154,0)
 ; check V-files
"RTN","HMPEVNT",155,0)
 ;DE4879 - Removed Health Factors from loop (was SUB="HF","IMM",...)
"RTN","HMPEVNT",156,0)
 F SUB="IMM","XAM","CPT","PED","POV","SK" D
"RTN","HMPEVNT",157,0)
 . S DA=0 F  S DA=$O(HMPPXK(IEN,SUB,DA)) Q:DA<1  D
"RTN","HMPEVNT",158,0)
 .. S ACT=$S($G(HMPPXK(IEN,SUB,DA,0,"AFTER"))="":"@",1:"")
"RTN","HMPEVNT",159,0)
 .. D POST(DFN,$$NAME(SUB),DA,ACT)
"RTN","HMPEVNT",160,0)
 Q
"RTN","HMPEVNT",161,0)
 ;
"RTN","HMPEVNT",162,0)
NAME(X) ; -- return object name for V-files
"RTN","HMPEVNT",163,0)
 N Y S Y=""
"RTN","HMPEVNT",164,0)
 I X="HF"  S Y="factor"
"RTN","HMPEVNT",165,0)
 I X="IMM" S Y="immunization"
"RTN","HMPEVNT",166,0)
 I X="XAM" S Y="exam"
"RTN","HMPEVNT",167,0)
 I X="CPT" S Y="cpt"
"RTN","HMPEVNT",168,0)
 I X="PED" S Y="education"
"RTN","HMPEVNT",169,0)
 I X="POV" S Y="pov"
"RTN","HMPEVNT",170,0)
 I X="SK"  S Y="skin"
"RTN","HMPEVNT",171,0)
 Q Y
"RTN","HMPEVNT",172,0)
 ;
"RTN","HMPEVNT",173,0)
ZPCE ; -- old PXK VISIT DATA EVENT protocol listener [not in use]
"RTN","HMPEVNT",174,0)
 N IEN,PX0,PX150,DFN,DA
"RTN","HMPEVNT",175,0)
 S IEN=+$O(^TMP("PXKCO",$J,0)) Q:IEN<1
"RTN","HMPEVNT",176,0)
 S PX0=$G(^TMP("PXKCO",$J,IEN,"VST",IEN,0,"AFTER")) Q:$P(PX0,U,7)="E"
"RTN","HMPEVNT",177,0)
 I PX0="" D POST(DFN,"visit",IEN,"@") Q  ;deleted
"RTN","HMPEVNT",178,0)
 S PX150=$G(^TMP("PXKCO",$J,IEN,"VST",IEN,150,"AFTER")) Q:$P(PX150,U,3)'="P"
"RTN","HMPEVNT",179,0)
 S DFN=+$P(PX0,U,5) Q:'(DFN>0)  Q:'$D(^HMP(800000,"AITEM",DFN))  ;DE4496 19 August 2016
"RTN","HMPEVNT",180,0)
 D POST(DFN,"visit",IEN)
"RTN","HMPEVNT",181,0)
 S DA=0 F  S DA=$O(^TMP("PXKCO",$J,IEN,"IMM",DA)) Q:DA<1  D POST(DFN,"immunization",DA)
"RTN","HMPEVNT",182,0)
 S DA=0 F  S DA=$O(^TMP("PXKCO",$J,IEN,"HF",DA)) Q:DA<1  D POST(DFN,"factor",DA)
"RTN","HMPEVNT",183,0)
 Q
"RTN","HMPEVNT",184,0)
 ;
"RTN","HMPEVNT",185,0)
XQOR(MSG) ; -- messaging listener (update meds, labs, xrays, consults)
"RTN","HMPEVNT",186,0)
 N HMPMSG,HMPPKG,MSH,ORC,DFN
"RTN","HMPEVNT",187,0)
 S HMPMSG=$S($L($G(MSG)):MSG,1:"MSG") Q:'$O(@HMPMSG@(0))
"RTN","HMPEVNT",188,0)
 S MSH=0 F  S MSH=$O(@HMPMSG@(MSH)) Q:MSH'>0  Q:$E(@HMPMSG@(MSH),1,3)="MSH"
"RTN","HMPEVNT",189,0)
 Q:'MSH  Q:'$L($G(@HMPMSG@(MSH)))
"RTN","HMPEVNT",190,0)
 S HMPPKG=$$TYPE($P(@HMPMSG@(MSH),"|",3))  Q:'$L(HMPPKG)
"RTN","HMPEVNT",191,0)
 S DFN=$$PID Q:'(DFN>0)  Q:'$D(^HMP(800000,"AITEM",DFN))  ;DE4496 19 August 2016
"RTN","HMPEVNT",192,0)
 S ORC=MSH F  S ORC=$O(@HMPMSG@(+ORC)) Q:ORC'>0  I $E(@HMPMSG@(ORC),1,3)="ORC" D
"RTN","HMPEVNT",193,0)
 . N ORDCNTRL,PKGIFN,ORIFN,PORIFN
"RTN","HMPEVNT",194,0)
 . S ORC=ORC_U_@HMPMSG@(ORC),ORDCNTRL=$TR($P(ORC,"|",2),"@","P")
"RTN","HMPEVNT",195,0)
 . ; QUIT if action failed, conversion, purge, or backdoor verify/new
"RTN","HMPEVNT",196,0)
 . ;I ORDCNTRL["U"!("DE^ZC^ZP^ZR^ZV^SN"[ORDCNTRL) Q
"RTN","HMPEVNT",197,0)
 . I ORDCNTRL["U"!("DE^ZP^ZR^ZV^SN"[ORDCNTRL) Q  ;Oct 15, 2015 - PB - modified to trigger an unsolicited sync action when a signed order is discontinued
"RTN","HMPEVNT",198,0)
 . S ORIFN=+$P($P(ORC,"|",3),U),PKGIFN=$P($P(ORC,"|",4),U)
"RTN","HMPEVNT",199,0)
 . ; If this is a child order get the parent and send it too
"RTN","HMPEVNT",200,0)
 . ; PORIFN = PARENT ORDER IFN
"RTN","HMPEVNT",201,0)
 . S PORIFN=+$P($G(^OR(100,ORIFN,3)),U,9)
"RTN","HMPEVNT",202,0)
 . I $$RESULT D  ;update ancillary domains
"RTN","HMPEVNT",203,0)
 .. D POST(DFN,HMPPKG,PKGIFN)
"RTN","HMPEVNT",204,0)
 .. D:HMPPKG="image" POST(DFN,"document",PKGIFN)
"RTN","HMPEVNT",205,0)
 .. I HMPPKG="lab",PKGIFN'["CH",'$$LRTIU(DFN,PKGIFN) D POST(DFN,"document",$P(PKGIFN,";",4,5))
"RTN","HMPEVNT",206,0)
 . I ORIFN,ORDCNTRL'="ZD" D  ;update order(s)
"RTN","HMPEVNT",207,0)
 .. D POST(DFN,"order",ORIFN)
"RTN","HMPEVNT",208,0)
 .. I PORIFN D POST(DFN,"order",PORIFN)
"RTN","HMPEVNT",209,0)
 .. N ORIG S ORIG=+$P($G(^OR(100,ORIFN,3)),U,5)
"RTN","HMPEVNT",210,0)
 .. I ORIG D POST(DFN,"order",ORIG) ;need fwd ptrs, sig flds
"RTN","HMPEVNT",211,0)
 Q
"RTN","HMPEVNT",212,0)
 ;
"RTN","HMPEVNT",213,0)
RESULT() ; -- Return 1 or 0, if message broadcasts a result
"RTN","HMPEVNT",214,0)
 ;           [may modify PKGIFN for use in POST]
"RTN","HMPEVNT",215,0)
 N Y S Y=0
"RTN","HMPEVNT",216,0)
 I HMPPKG="consult" S Y=1,PKGIFN=+PKGIFN G RQ
"RTN","HMPEVNT",217,0)
 I HMPPKG="med"     S Y=1,PKGIFN=ORIFN G RQ
"RTN","HMPEVNT",218,0)
 I HMPPKG="lab"     S:ORDCNTRL="RE"&($L(PKGIFN,";")>3) Y=1 G RQ
"RTN","HMPEVNT",219,0)
 I HMPPKG="image"   S:PKGIFN["~" Y=1,PKGIFN=$TR($P(PKGIFN,"~",2,3),"~","-") G RQ
"RTN","HMPEVNT",220,0)
RQ Q Y
"RTN","HMPEVNT",221,0)
 ;
"RTN","HMPEVNT",222,0)
LRTIU(DFN,ORPK) ; -- Return 1 or 0, if LR report is in TIU
"RTN","HMPEVNT",223,0)
 I $G(DFN)<1!'$L($G(ORPK)) Q 0
"RTN","HMPEVNT",224,0)
 I ORPK["CH"!(ORPK["MI") Q 0
"RTN","HMPEVNT",225,0)
 N SUB,IDT,LRDFN
"RTN","HMPEVNT",226,0)
 S SUB=$P(ORPK,";",4),IDT=+$P(ORPK,";",5),LRDFN=+$G(^DPT(+DFN,"LR"))
"RTN","HMPEVNT",227,0)
 I $O(^LR(LRDFN,SUB,IDT,.05,0)) Q 1
"RTN","HMPEVNT",228,0)
 Q 0
"RTN","HMPEVNT",229,0)
 ;
"RTN","HMPEVNT",230,0)
NA(MSG) ; -- messaging listener (new backdoor orders)
"RTN","HMPEVNT",231,0)
 N HMPMSG,HMPPKG,MSH,ORC,DFN
"RTN","HMPEVNT",232,0)
 S HMPMSG=$S($L($G(MSG)):MSG,1:"MSG") Q:'$O(@HMPMSG@(0))
"RTN","HMPEVNT",233,0)
 S MSH=0 F  S MSH=$O(@HMPMSG@(MSH)) Q:MSH'>0  Q:$E(@HMPMSG@(MSH),1,3)="MSH"
"RTN","HMPEVNT",234,0)
 Q:'MSH  Q:'$L($G(@HMPMSG@(MSH)))
"RTN","HMPEVNT",235,0)
 S HMPPKG=$$TYPE($P(@HMPMSG@(MSH),"|",5))  Q:'$L(HMPPKG)
"RTN","HMPEVNT",236,0)
 S DFN=$$PID Q:'(DFN>0)  Q:'$D(^HMP(800000,"AITEM",DFN))  ;DE4496 19 August 2016
"RTN","HMPEVNT",237,0)
 S ORC=MSH F  S ORC=$O(@HMPMSG@(+ORC)) Q:ORC'>0  I $E(@HMPMSG@(ORC),1,3)="ORC" D
"RTN","HMPEVNT",238,0)
 . N ORDCNTRL,ORIFN
"RTN","HMPEVNT",239,0)
 . S ORC=ORC_U_@HMPMSG@(ORC),ORDCNTRL=$TR($P(ORC,"|",2),"@","P")
"RTN","HMPEVNT",240,0)
 . Q:ORDCNTRL'="NA"
"RTN","HMPEVNT",241,0)
 . S ORIFN=+$P($P(ORC,"|",3),U) D POST(DFN,"order",ORIFN)
"RTN","HMPEVNT",242,0)
 . I HMPPKG="med" D POST(DFN,HMPPKG,ORIFN)
"RTN","HMPEVNT",243,0)
 Q
"RTN","HMPEVNT",244,0)
 ;
"RTN","HMPEVNT",245,0)
TYPE(NAME) ; -- Returns type name for XML
"RTN","HMPEVNT",246,0)
 I NAME="LABORATORY"  Q "lab"
"RTN","HMPEVNT",247,0)
 I NAME="PHARMACY"    Q "med"
"RTN","HMPEVNT",248,0)
 I NAME="CONSULTS"    Q "consult"
"RTN","HMPEVNT",249,0)
 I NAME="PROCEDURES"  Q "consult"
"RTN","HMPEVNT",250,0)
 I NAME="RADIOLOGY"   Q "image"
"RTN","HMPEVNT",251,0)
 I NAME="IMAGING"     Q "image"
"RTN","HMPEVNT",252,0)
 I NAME="ORDER ENTRY" Q "order"
"RTN","HMPEVNT",253,0)
 I NAME="DIETETICS"   Q "diet"
"RTN","HMPEVNT",254,0)
 Q ""
"RTN","HMPEVNT",255,0)
 ;
"RTN","HMPEVNT",256,0)
PID() ; -- Returns patient from PID segment in current msg
"RTN","HMPEVNT",257,0)
 N I,SEG,Y S I=MSH
"RTN","HMPEVNT",258,0)
 F  S I=$O(@HMPMSG@(I)) Q:I'>0  S SEG=$E(@HMPMSG@(I),1,3) Q:SEG="ORC"  I SEG="PID" D  Q
"RTN","HMPEVNT",259,0)
 . S Y=+$P(@HMPMSG@(I),"|",4)
"RTN","HMPEVNT",260,0)
 .;I '$D(^DPT(Y,0)) S:$L($P(@HMPMSG@(I),"|",5)) Y=+$P(@HMPMSG@(I),"|",5) ;alt ID for Lab
"RTN","HMPEVNT",261,0)
 Q Y
"RTN","HMPEVNT",262,0)
 ;
"RTN","HMPEVNT",263,0)
PV1() ; -- Returns patient class from PV1 segment in current msg
"RTN","HMPEVNT",264,0)
 N I,SEG,Y S I=MSH,Y=""
"RTN","HMPEVNT",265,0)
 F  S I=$O(@HMPMSG@(I)) Q:I'>0  S SEG=$E(@HMPMSG@(I),1,3) Q:SEG="ORC"  I SEG="PV1" D  Q
"RTN","HMPEVNT",266,0)
 . S Y=$P(@HMPMSG@(I),"|",3)
"RTN","HMPEVNT",267,0)
 I Y="",$G(ORIFN) S Y=$$GET1^DIQ(100,+ORIFN_",",10,"I")
"RTN","HMPEVNT",268,0)
 Q Y
"RTN","HMPEVNT",269,0)
 ;
"RTN","HMPEVNT",270,0)
GMRA(ACT) ; -- GMRA SIGN-OFF ON DATA protocol listener
"RTN","HMPEVNT",271,0)
 ;   also GMRA ENTERED IN ERROR [ACT=@]
"RTN","HMPEVNT",272,0)
 N DFN,IEN
"RTN","HMPEVNT",273,0)
 S DFN=+$G(GMRAPA(0)),IEN=+$G(GMRAPA)
"RTN","HMPEVNT",274,0)
 D POST(DFN,"allergy",IEN,$G(ACT))
"RTN","HMPEVNT",275,0)
 Q
"RTN","HMPEVNT",276,0)
 ;
"RTN","HMPEVNT",277,0)
GMPL(DFN,IEN) ; -- GMPL EVENT protocol listener
"RTN","HMPEVNT",278,0)
 S DFN=+$G(DFN),IEN=+$G(IEN)
"RTN","HMPEVNT",279,0)
 ;N ACT S ACT=$S($P($G(^AUPNPROB(IEN,1)),U,2)="H":"@",1:"")
"RTN","HMPEVNT",280,0)
 D POST(DFN,"problem",IEN) ;,ACT)
"RTN","HMPEVNT",281,0)
 Q
"RTN","HMPEVNT",282,0)
 ;
"RTN","HMPEVNT",283,0)
GMRV(DFN,IEN,ERR) ; -- Vital Measurement file #120.5 AHMP index
"RTN","HMPEVNT",284,0)
 S DFN=+$G(DFN),IEN=+$G(IEN)
"RTN","HMPEVNT",285,0)
 N ACT S ACT=$S($G(ERR):"@",1:"")
"RTN","HMPEVNT",286,0)
 D POST(DFN,"vital",IEN,ACT)
"RTN","HMPEVNT",287,0)
 Q
"RTN","HMPEVNT",288,0)
 ;
"RTN","HMPEVNT",289,0)
MDC(OBS) ; -- MDC OBSERVATION UPDATE protocol listener
"RTN","HMPEVNT",290,0)
 N DFN,ID,ACT
"RTN","HMPEVNT",291,0)
 S DFN=+$G(OBS("PATIENT_ID","I")) Q:'(DFN>0)  ;DE4496 19 August 2016
"RTN","HMPEVNT",292,0)
 S ID=$G(OBS("OBS_ID","I")) Q:'$L(ID)
"RTN","HMPEVNT",293,0)
 S ACT=$S('$G(OBS("STATUS","I")):"@",1:"")
"RTN","HMPEVNT",294,0)
 D POST(DFN,"obs",ID,ACT)
"RTN","HMPEVNT",295,0)
 I $G(OBS("DOMAIN","VITALS")) D POST(DFN,"vital",ID,ACT)
"RTN","HMPEVNT",296,0)
 Q
"RTN","HMPEVNT",297,0)
 ;
"RTN","HMPEVNT",298,0)
CP(DFN,ID,ACT) ; -- CP Transaction file #702 AHMP index
"RTN","HMPEVNT",299,0)
 S DFN=+$G(DFN),ID=$G(ID)
"RTN","HMPEVNT",300,0)
 D POST(DFN,"document",ID,$G(ACT)) ;de3944 also need to generate document for procedure to link results to
"RTN","HMPEVNT",301,0)
 D POST(DFN,"procedure",ID,$G(ACT))
"RTN","HMPEVNT",302,0)
 Q
"RTN","HMPEVNT",303,0)
 ;
"RTN","HMPEVNT",304,0)
SR(DFN,IEN,ACT) ; -- Surgery [SROERR] update
"RTN","HMPEVNT",305,0)
 S DFN=+$G(DFN),IEN=+$G(IEN)
"RTN","HMPEVNT",306,0)
 D POST(DFN,"surgery",IEN,$G(ACT))
"RTN","HMPEVNT",307,0)
 Q
"RTN","HMPEVNT",308,0)
 ;*s68 - BEGINS
"RTN","HMPEVNT",309,0)
TIU(DFN,IEN) ; -- TIU Document file #8925 AHMP index
"RTN","HMPEVNT",310,0)
 N ACT,STS,DAD,REPCAT
"RTN","HMPEVNT",311,0)
 S DFN=+$G(DFN),IEN=+$G(IEN),ACT=""
"RTN","HMPEVNT",312,0)
 S STS=$G(X(2)),DAD=$G(X(3)) ;X = FM data array for index
"RTN","HMPEVNT",313,0)
 S:DAD IEN=DAD I 'DAD D      ;if addendum, repull entire note
"RTN","HMPEVNT",314,0)
 . ;I STS=15 S ACT="@"       ;retracted; DE3693 - do not delete note from JDS if retracted, March 18, 2016
"RTN","HMPEVNT",315,0)
 . I $G(X2(1))="" S ACT="@"  ;deleted (new title = null)
"RTN","HMPEVNT",316,0)
 D POST(DFN,"document",IEN,ACT)
"RTN","HMPEVNT",317,0)
 ;DE3944 update surgery based on reports
"RTN","HMPEVNT",318,0)
 S REPCAT=$$CATG^HMPDTIU($$GET1^DIQ(8925,IEN_",",".01","I"))
"RTN","HMPEVNT",319,0)
 I REPCAT="SR" D
"RTN","HMPEVNT",320,0)
 . N REPCASE S REPCASE=$$GET1^DIQ(8925,IEN_",","1701","I")
"RTN","HMPEVNT",321,0)
 . S REPCASE=$P(REPCASE,"Case #: ",2)
"RTN","HMPEVNT",322,0)
 . I REPCASE D POST(DFN,"surgery",REPCASE)
"RTN","HMPEVNT",323,0)
 ;DE3241 - If TIU update changes CWADF values, trigger patient update so change get in fresh. stream
"RTN","HMPEVNT",324,0)
 ;If this note has a parent document type of "CLINICAL WARNING", "CRISIS NOTE", or "ADVANCE DIRECTIVE"...
"RTN","HMPEVNT",325,0)
 ;parent document type is "Document Class"...
"RTN","HMPEVNT",326,0)
 ;AND this note's status is COMPLETED or AMENDED
"RTN","HMPEVNT",327,0)
 ;THEN this document may update the C, W, or D CWADF values and patient fresh. stream update needs to be triggered
"RTN","HMPEVNT",328,0)
 N DADTYPE,DADNAME,STATUS
"RTN","HMPEVNT",329,0)
 S DADTYPE=$$GET1^DIQ(8925,IEN_",",".04","I") Q:'DADTYPE  Q:$$GET1^DIQ(8925.1,DADTYPE_",",".04","I")'="DC"
"RTN","HMPEVNT",330,0)
 S DADNAME=$$GET1^DIQ(8925.1,DADTYPE_",",".01")
"RTN","HMPEVNT",331,0)
 I $S(DADNAME="CLINICAL WARNING":0,DADNAME="CRISIS NOTE":0,DADNAME="ADVANCE DIRECTIVE":0,1:1) Q
"RTN","HMPEVNT",332,0)
 D POST(DFN,"patient",DFN)
"RTN","HMPEVNT",333,0)
 Q
"RTN","HMPEVNT",334,0)
 ; Deprecated calls
"RTN","HMPEVNT",335,0)
DOCDEF ;
"RTN","HMPEVNT",336,0)
DOCITEM ;
"RTN","HMPEVNT",337,0)
USR ;
"RTN","HMPEVNT",338,0)
 Q
"RTN","HMPEVNT",339,0)
 ; *s68 - END
"RTN","HMPEVNT",340,0)
PSB(PSBIEN) ; -- HMP PSB EVENTS protocol listener (BCMA) /DE2818
"RTN","HMPEVNT",341,0)
 Q:'$$PROD^XUPROD  ; DE7678, BCMA event only in production
"RTN","HMPEVNT",342,0)
 N IEN,DFN,ORPK,TYPE,ORIFN
"RTN","HMPEVNT",343,0)
 S IEN=$S($P($G(PSBIEN),",",2)'="":+$P(PSBIEN,",",2),$G(PSBIEN)="+1":+$G(PSBIEN(1)),1:+$G(PSBIEN))
"RTN","HMPEVNT",344,0)
 S DFN=+$G(^PSB(53.79,IEN,0)),ORPK=$P($G(^(.1)),U)
"RTN","HMPEVNT",345,0)
 Q:'(DFN>0)  Q:ORPK<1  S TYPE=$S(ORPK["V":"IV",ORPK["U":5,1:"") Q:TYPE=""  ;DE4496 19 August 2016
"RTN","HMPEVNT",346,0)
 S ORIFN=$$ORDRNUM^PSSUTLA2(DFN,TYPE,+ORPK)  ;DE4382 get order number from PSSUTLA2. ICR 6426
"RTN","HMPEVNT",347,0)
 D:ORIFN POST(DFN,"med",ORIFN)
"RTN","HMPEVNT",348,0)
 Q
"RTN","HMPEVNT",349,0)
 ;
"RTN","HMPEVNT",350,0)
XU(IEN,ACT) ; -- XU USER ADD/CHANGE/TERMINATE option listener
"RTN","HMPEVNT",351,0)
 S IEN=+$G(IEN) Q:IEN<1
"RTN","HMPEVNT",352,0)
 D POSTX("user",IEN,$G(ACT))
"RTN","HMPEVNT",353,0)
 Q
"RTN","HMPEVNT",354,0)
 ;
"RTN","HMPEVNT",355,0)
POST(DFN,TYPE,ID,ACT,IGNORE) ; -- track updated patient data
"RTN","HMPEVNT",356,0)
 S DFN=+$G(DFN),TYPE=$G(TYPE),ID=$G(ID)
"RTN","HMPEVNT",357,0)
 Q:'(DFN>0)  Q:TYPE=""  Q:ID=""   ;incomplete request - DE4496 19 August 2016
"RTN","HMPEVNT",358,0)
 Q:$G(^XTMP("HMP-off",TYPE))   ;domain turned 'off'
"RTN","HMPEVNT",359,0)
 I '$G(IGNORE) Q:'$D(^HMP(800000,"AITEM",DFN))  ;patient not subscribed to ;us18855 - only check if subscribed if IGNORE not set
"RTN","HMPEVNT",360,0)
 N HMPDT S HMPDT="HMP-"_DT
"RTN","HMPEVNT",361,0)
 ;S ^XTMP(HMPDT,$$NEXT)=DFN_U_TYPE_U_ID_U_$G(ACT)
"RTN","HMPEVNT",362,0)
 N NODES
"RTN","HMPEVNT",363,0)
 D POST^HMPDJFS(DFN,TYPE,ID,$G(ACT),"",.NODES,+$G(IGNORE)) ;;us18852 added ignore
"RTN","HMPEVNT",364,0)
 Q
"RTN","HMPEVNT",365,0)
 ;
"RTN","HMPEVNT",366,0)
POSTX(TYPE,ID,ACT) ; -- track updated reference items
"RTN","HMPEVNT",367,0)
 S TYPE=$G(TYPE),ID=$G(ID)
"RTN","HMPEVNT",368,0)
 Q:TYPE=""  Q:ID=""            ;incomplete request
"RTN","HMPEVNT",369,0)
 Q:$G(^XTMP("HMP-off",TYPE))   ;domain turned 'off'
"RTN","HMPEVNT",370,0)
 N HMPDT S HMPDT="HMP-"_DT ;"HMPEF-"_DT
"RTN","HMPEVNT",371,0)
 ;S ^XTMP(HMPDT,$$NEXT)=U_TYPE_U_ID_U_$G(ACT)
"RTN","HMPEVNT",372,0)
 N NODES
"RTN","HMPEVNT",373,0)
 D POST^HMPDJFS("OPD",TYPE,ID,$G(ACT),"",.NODES)
"RTN","HMPEVNT",374,0)
 Q
"RTN","HMPEVNT",375,0)
 ;
"RTN","HMPEVNT",376,0)
NEXT() ; -- Return next sequential number in ^XTMP(HMPDT,n)
"RTN","HMPEVNT",377,0)
 L +^XTMP(HMPDT):5 ;I'$T ??
"RTN","HMPEVNT",378,0)
 N Y S Y=+$O(^XTMP(HMPDT,"A"),-1)+1
"RTN","HMPEVNT",379,0)
 I '$D(^XTMP(HMPDT,0)) S ^(0)=$$FMADD^XLFDT(DT,3)_U_DT_"^HMP Updates"
"RTN","HMPEVNT",380,0)
 L -^XTMP(HMPDT)
"RTN","HMPEVNT",381,0)
 Q Y
"RTN","HMPEVNT",382,0)
 ;
"RTN","HMPEVNT",383,0)
HTTP(URL,DFN,TYPE,ID) ; -- send message that TYPE/ID has been updated [not in use]
"RTN","HMPEVNT",384,0)
 N DIV,X,HMPX
"RTN","HMPEVNT",385,0)
 S DFN=+$G(DFN) Q:'(DFN>0)  ;patient req'd - DE4496 19 August 2016
"RTN","HMPEVNT",386,0)
 S DIV=$P($$SITE^VASITE,U,3) ;station number
"RTN","HMPEVNT",387,0)
 S URL=$G(URL)_"?division="_DIV_"&dfn="_+$G(DFN)
"RTN","HMPEVNT",388,0)
 I $L($G(TYPE)) S URL=URL_"&type="_TYPE
"RTN","HMPEVNT",389,0)
 I $L($G(ID))   S URL=URL_"&id="_ID
"RTN","HMPEVNT",390,0)
 S ^XTMP("HMP",DFN,"HTTP")=$H
"RTN","HMPEVNT",391,0)
 S X=$$GETURL^XTHC10(URL,,"HMPX")
"RTN","HMPEVNT",392,0)
 ; I X>200 = ERROR
"RTN","HMPEVNT",393,0)
 Q
"RTN","HMPEVNT",394,0)
DGREG ; register a newly registered patient in eHMP during the initial registration - Sep 29, 2015 - Phil Burkhalter
"RTN","HMPEVNT",395,0)
 Q:'($G(DFN)>0)  ;DE4496 19 August 2016
"RTN","HMPEVNT",396,0)
 Q:'$D(^DPT(DFN,0))  ; Quit if patient is not in the patient file
"RTN","HMPEVNT",397,0)
 ;check the XPAR for HMP Auto Enrollment with newly registered patients, 
"RTN","HMPEVNT",398,0)
 ;if set to yes for automatically adding a new HMP subscription:
"RTN","HMPEVNT",399,0)
 ;add the patient to HMP(800000 and to a pt-select update. Only want to do an update for the one patient if possible.
"RTN","HMPEVNT",400,0)
 ;if set to no for automatically adding a new HMP subscrption:
"RTN","HMPEVNT",401,0)
 ;only do the pt-select update, DO NOT add to the HMP subscription
"RTN","HMPEVNT",402,0)
 S X=$$GET^XPAR("SYS","HMP AUTOSYNC REG")  ;X=1 Yes auto subscribe patient to HMP, X="" or X=0 No don't auto subscribe the patient to HMP
"RTN","HMPEVNT",403,0)
 I $G(X)'=1 D POSTX(DFN,"patient",DFN) Q  ; Do pt-select
"RTN","HMPEVNT",404,0)
 I $G(X)=1 D
"RTN","HMPEVNT",405,0)
 .Q:$D(^HMP(800000,"AITEM",DFN))  ; Quit if the patient has already been added to the eHMP subscription
"RTN","HMPEVNT",406,0)
 .S ARGS("command")="putPtSubscription",ARGS("localId")=$G(DFN)
"RTN","HMPEVNT",407,0)
 .;DE3327
"RTN","HMPEVNT",408,0)
 .I '$L($G(ARGS("server"))) S ARGS("server")=$P($G(^HMP(800000,1,0)),"^")  ; See comments at the top
"RTN","HMPEVNT",409,0)
 .D API^HMPDJFS(.RSLT,.ARGS) D POSTX(DFN,"patient",DFN)  ; add patient to HMP(800000 and if patient is added, add patient to the freshness stream
"RTN","HMPEVNT",410,0)
 .K ARGS,RSLT
"RTN","HMPEVNT",411,0)
 K X
"RTN","HMPEVNT",412,0)
 Q
"RTN","HMPFPTC")
0^38^B14682882
"RTN","HMPFPTC",1,0)
HMPFPTC ;SLC/MKB,AGP,ASMR/RRB,hrubovcak - Patient look-up Utilities at Facility;Jun 26, 2017 13:00:16
"RTN","HMPFPTC",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,4**;Sep 01, 2011;Build 13
"RTN","HMPFPTC",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPFPTC",4,0)
 ;
"RTN","HMPFPTC",5,0)
 Q
"RTN","HMPFPTC",6,0)
 ;
"RTN","HMPFPTC",7,0)
CHKS(HMPZ,DFN) ; perform patient select checks
"RTN","HMPFPTC",8,0)
 ;
"RTN","HMPFPTC",9,0)
 N ACCESS,CHKS,CNT,DEATHDT,ERR,I,IEN,STR,X,HMPY
"RTN","HMPFPTC",10,0)
 ; check for sensitive record
"RTN","HMPFPTC",11,0)
 S STR="patientChecks"
"RTN","HMPFPTC",12,0)
 S ACCESS=0
"RTN","HMPFPTC",13,0)
 D PTSEC^DGSEC4(.HMPY,DFN)  ;IA #3027
"RTN","HMPFPTC",14,0)
 S ACCESS=1
"RTN","HMPFPTC",15,0)
 I HMPY(1)>0 D
"RTN","HMPFPTC",16,0)
 .S CHKS("sensitive","dfn")=DFN
"RTN","HMPFPTC",17,0)
 .S ACCESS=(HMPY(1)<3)
"RTN","HMPFPTC",18,0)
 .S CHKS("sensitive","mayAccess")=$S(ACCESS=1:"true",1:"false")
"RTN","HMPFPTC",19,0)
 .S CHKS("sensitive","logAccess")=$S(HMPY(1)>1:"true",1:"false")
"RTN","HMPFPTC",20,0)
 .S CNT=2,X=""
"RTN","HMPFPTC",21,0)
 .F  S CNT=$O(HMPY(CNT)) Q:CNT'>0  S X=X_$C(13)_$C(10)_$G(HMPY(CNT))
"RTN","HMPFPTC",22,0)
 .S CHKS("sensitive","text")=X
"RTN","HMPFPTC",23,0)
 ;
"RTN","HMPFPTC",24,0)
 ; check for deceased patient, DE2818 changed from direct global reference
"RTN","HMPFPTC",25,0)
 D TOP^HMPXGDPT("DEATHDT",DFN,.351,"E")
"RTN","HMPFPTC",26,0)
 D:$L($G(DEATHDT(2,DFN,.351,"E")))
"RTN","HMPFPTC",27,0)
 . S CHKS("deceased","text")="This patient died on "_DEATHDT(2,DFN,.351,"E")_"."_$C(13)_$C(10)_" Do you wish to continue?"
"RTN","HMPFPTC",28,0)
 ;
"RTN","HMPFPTC",29,0)
 ; check for similar patients
"RTN","HMPFPTC",30,0)
 K HMPY
"RTN","HMPFPTC",31,0)
 N MSG,SIM,SIMPAT,TEXT S MSG=0,SIM=0
"RTN","HMPFPTC",32,0)
 D GUIBS5A^DPTLK6(.HMPY,DFN)  ;IA #3593
"RTN","HMPFPTC",33,0)
 I HMPY(1)>0 D
"RTN","HMPFPTC",34,0)
 .S TEXT=""
"RTN","HMPFPTC",35,0)
 .S I=1 F  S I=$O(HMPY(I)) Q:'I  S X=HMPY(I) D
"RTN","HMPFPTC",36,0)
 .. S SIM=SIM+1
"RTN","HMPFPTC",37,0)
 .. I $E(X)=0 S TEXT=$S($L(TEXT):TEXT_$C(13)_$C(10)_$P(X,U,2),1:$P(X,U,2))
"RTN","HMPFPTC",38,0)
 .. I $E(X)=1 D
"RTN","HMPFPTC",39,0)
 ... ;S CHKS("similar",SIM,"dfn")=$P(X,U,2)
"RTN","HMPFPTC",40,0)
 ... ;S CHKS("similar",SIM,"name")=$P(X,U,3)
"RTN","HMPFPTC",41,0)
 ... ;S CHKS("similar",SIM,"dob")=$$FMTE^XLFDT($P(X,U,4),"D")
"RTN","HMPFPTC",42,0)
 ... ;S CHKS("similar",SIM,"ssn")=$P(X,U,5)
"RTN","HMPFPTC",43,0)
 ... S SIMPAT="Patient Name: "_$P(X,U,3)_" Date of Birth: "_$$FMTE^XLFDT($P(X,U,4),"D")_" SSN: "_$P(X,U,5)
"RTN","HMPFPTC",44,0)
 ... S TEXT=TEXT_$C(13)_$C(10)_SIMPAT
"RTN","HMPFPTC",45,0)
 .S CHKS("similar","text")=TEXT
"RTN","HMPFPTC",46,0)
 ;
"RTN","HMPFPTC",47,0)
 ; possibly check means test: GUIMTD^DPTLK6
"RTN","HMPFPTC",48,0)
 ; possibly check legacy data: I $L($T(HXDATA^A7RDPAGU)...
"RTN","HMPFPTC",49,0)
 ;
"RTN","HMPFPTC",50,0)
 I ACCESS D PRF(DFN,.CHKS)
"RTN","HMPFPTC",51,0)
 S ERR(0)=""
"RTN","HMPFPTC",52,0)
 ;S HMP=$$ENCODE^HMPJSON("CHKS","ERR")
"RTN","HMPFPTC",53,0)
 D ENCODE^HMPJSON("CHKS","HMPZ","ERR")
"RTN","HMPFPTC",54,0)
 Q
"RTN","HMPFPTC",55,0)
 ;
"RTN","HMPFPTC",56,0)
PRF(DFN,CHKS) ; get Patient Record Flags
"RTN","HMPFPTC",57,0)
 N HMPY,EDI,PRF,N,X
"RTN","HMPFPTC",58,0)
 Q:$$GETACT^DGPFAPI(DFN,"HMPY")'>0
"RTN","HMPFPTC",59,0)
 S EDI=0 F  S EDI=$O(HMPY(EDI)) Q:EDI<1  K PRF D
"RTN","HMPFPTC",60,0)
 . S CHKS("patientRecordFlags",EDI,"assignmentStatus")="Active"
"RTN","HMPFPTC",61,0)
 . S CHKS("patientRecordFlags",EDI,"assignTS")=$$JSONDT^HMPUTILS($P($G(HMPY(EDI,"ASSIGNDT")),U))
"RTN","HMPFPTC",62,0)
 . S CHKS("patientRecordFlags",EDI,"approved")=$P($G(HMPY(EDI,"APPRVBY")),U,2)
"RTN","HMPFPTC",63,0)
 . S CHKS("patientRecordFlags",EDI,"nextReviewDT")=$$JSONDT^HMPUTILS($P($G(HMPY(EDI,"REVIEWDT")),U))
"RTN","HMPFPTC",64,0)
 . S CHKS("patientRecordFlags",EDI,"name")=$P($G(HMPY(EDI,"FLAG")),U,2)
"RTN","HMPFPTC",65,0)
 . S CHKS("patientRecordFlags",EDI,"type")=$P($G(HMPY(EDI,"FLAGTYPE")),U,2)
"RTN","HMPFPTC",66,0)
 . S CHKS("patientRecordFlags",EDI,"category")=$P($G(HMPY(EDI,"CATEGORY")),U,2)
"RTN","HMPFPTC",67,0)
 . S CHKS("patientRecordFlags",EDI,"ownerSite")=$P($G(HMPY(EDI,"OWNER")),U,2)
"RTN","HMPFPTC",68,0)
 . S CHKS("patientRecordFlags",EDI,"originatingSite")=$P($G(HMPY(EDI,"ORIGSITE")),U,2)
"RTN","HMPFPTC",69,0)
 . S N=1,X=$G(HMPY(EDI,"NARR",1,0))
"RTN","HMPFPTC",70,0)
 . F  S N=$O(HMPY(EDI,"NARR",N)) Q:N<1  S X=X_$C(13)_$C(10)_$G(HMPY(EDI,"NARR",N,0))
"RTN","HMPFPTC",71,0)
 . S CHKS("patientRecordFlags",EDI,"text")=X
"RTN","HMPFPTC",72,0)
 Q
"RTN","HMPFPTC",73,0)
 ;
"RTN","HMPFPTC",74,0)
LOG(HMPZ,DFN) ; Make entry in security log for sensitive patient access
"RTN","HMPFPTC",75,0)
 ; DE7912 - check for valid DFN and patient exists, 23 June 2017
"RTN","HMPFPTC",76,0)
 Q:'($G(DFN)>0)  ; DFN invalid, do nothing
"RTN","HMPFPTC",77,0)
 ; patient missing, log it and exit
"RTN","HMPFPTC",78,0)
 I '$L($$GET1^DIQ(2,DFN_",",.01,"I")) D LOGDPT^HMPLOG(DFN) Q
"RTN","HMPFPTC",79,0)
 ;
"RTN","HMPFPTC",80,0)
 N ERR,RESULTS,HMPY,X
"RTN","HMPFPTC",81,0)
 D NOTICE^DGSEC4(.HMPY,DFN) ;IA #3027
"RTN","HMPFPTC",82,0)
 S X=$S(HMPY:"ok",1:"fail")
"RTN","HMPFPTC",83,0)
 S RESULTS("result")=X
"RTN","HMPFPTC",84,0)
 D ENCODE^HMPJSON("RESULTS","HMPZ","ERR")
"RTN","HMPFPTC",85,0)
 Q
"RTN","HMPFPTC",86,0)
 ;
"RTN","HMPFPTC",87,0)
ENROS(HMPZ,DFNARRAY) ;PROCESS PATIENTS FROM A ROSTER
"RTN","HMPFPTC",88,0)
 N DFN S DFN=0
"RTN","HMPFPTC",89,0)
 F  S DFN=$O(DFNARRAY(DFN)) Q:DFN'>0  D CHKS(.HMPZ,DFN)
"RTN","HMPFPTC",90,0)
 Q
"RTN","HMPFPTC",91,0)
 ;
"RTN","HMPMETA")
0^2^B46311090
"RTN","HMPMETA",1,0)
HMPMETA ;SLC/PJH,ASM/RRB,AFS/MBS,CPC-collect domains, uids, & stamptimes ;2016-07-01 13:16Z
"RTN","HMPMETA",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3,4**;Sep 01, 2011;Build 13
"RTN","HMPMETA",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMETA",4,0)
 ;
"RTN","HMPMETA",5,0)
 Q  ; no entry from top
"RTN","HMPMETA",6,0)
 ;
"RTN","HMPMETA",7,0)
 ; New routine for US6734
"RTN","HMPMETA",8,0)
 ; DE6644 - fixes and general code cleanup, 7 September 2016
"RTN","HMPMETA",9,0)
 ;
"RTN","HMPMETA",10,0)
ADD(HMPDMNM,HMPUID,HMPSTMP) ; Build array for metastamp - called from HMPDJ0* routines
"RTN","HMPMETA",11,0)
 I ($G(HMPUID)="")!($G(HMPDMNM)="") Q
"RTN","HMPMETA",12,0)
 ;For quick orders the JDS domain is 'qo'
"RTN","HMPMETA",13,0)
 S:HMPDMNM="quick" HMPDMNM="qo"
"RTN","HMPMETA",14,0)
 S ^TMP("HMPMETA",$J,HMPDMNM,HMPUID)=HMPSTMP
"RTN","HMPMETA",15,0)
 ;unit tests use following nodes
"RTN","HMPMETA",16,0)
 S ^TMP("HMPMETA",$J,HMPDMNM)=$G(^TMP("HMPMETA",$J,HMPDMNM))+1
"RTN","HMPMETA",17,0)
 S ^TMP("HMPMETA",$J,"PATIENT")=$G(^TMP("HMPMETA",$J,"PATIENT"))+1
"RTN","HMPMETA",18,0)
 Q
"RTN","HMPMETA",19,0)
 ;
"RTN","HMPMETA",20,0)
 ;
"RTN","HMPMETA",21,0)
DONE(HMPFDFN,HMPBATCH) ; Check if metastamp compile is complete
"RTN","HMPMETA",22,0)
 ;For patients this will always be true since all patient domains compiled by one task
"RTN","HMPMETA",23,0)
 Q:+$G(HMPFDFN) 1
"RTN","HMPMETA",24,0)
 ;For OPD requires to check that all domain compiles are completed
"RTN","HMPMETA",25,0)
 N HMPDOM,HMPCOMP
"RTN","HMPMETA",26,0)
 S HMPDOM="",HMPCOMP=1 F  S HMPDOM=$O(^XTMP(HMPBATCH,0,"MSTA",HMPDOM)) Q:HMPDOM=""  D  Q:'HMPCOMP
"RTN","HMPMETA",27,0)
 . S:$G(^XTMP(HMPBATCH,0,"MSTA",HMPDOM))=0 HMPCOMP=0
"RTN","HMPMETA",28,0)
 Q HMPCOMP
"RTN","HMPMETA",29,0)
 ;
"RTN","HMPMETA",30,0)
 ;
"RTN","HMPMETA",31,0)
OPD(HMPFHMP) ;Check if OPD metastamp is ready to collect
"RTN","HMPMETA",32,0)
 Q $S($$DONE("OPD","HMPFX~"_HMPFHMP_"~OPD"):1,1:0)
"RTN","HMPMETA",33,0)
 ;
"RTN","HMPMETA",34,0)
 ;
"RTN","HMPMETA",35,0)
INIT(HMPBATCH,HMPFDFN,ARGS) ; Set metastamp status as in progress
"RTN","HMPMETA",36,0)
 N DOMAINS,HMPDOM,I
"RTN","HMPMETA",37,0)
 ; set up domains to extract
"RTN","HMPMETA",38,0)
 D @($S(HMPFDFN="OPD":"OPDOMS",1:"PTDOMS")_"^HMPDJFSD(.DOMAINS)")
"RTN","HMPMETA",39,0)
 ; remove any unneeded domains
"RTN","HMPMETA",40,0)
 I $G(ARGS("domains"))'="" F I=1:1 Q:'$D(DOMAINS(I))  I ARGS("domains")'[DOMAINS(I) K DOMAINS(I)
"RTN","HMPMETA",41,0)
 ; put the domains into the batch in ^XTMP
"RTN","HMPMETA",42,0)
 F I=1:1 S HMPDOM=$G(DOMAINS(I)) Q:HMPDOM=""  S ^XTMP(HMPBATCH,0,"MSTA",HMPDOM)=0
"RTN","HMPMETA",43,0)
 Q
"RTN","HMPMETA",44,0)
 ;
"RTN","HMPMETA",45,0)
 ;
"RTN","HMPMETA",46,0)
UPD(HMPDOM) ; Update metastamp domain as complete
"RTN","HMPMETA",47,0)
 S ^XTMP(HMPBATCH,0,"MSTA",HMPDOM)=1 Q
"RTN","HMPMETA",48,0)
 ;
"RTN","HMPMETA",49,0)
MERGE1(HMPBATCH,HMPDOM) ; US11019 Merge a single domain
"RTN","HMPMETA",50,0)
 M ^XTMP(HMPBATCH,0,"META",HMPDOM)=^TMP("HMPMETA",$J,HMPDOM)
"RTN","HMPMETA",51,0)
 K ^TMP("HMPMETA",$J,HMPDOM)
"RTN","HMPMETA",52,0)
 Q
"RTN","HMPMETA",53,0)
 ;
"RTN","HMPMETA",54,0)
MERGE(HMPBATCH) ; Merge metastamp data into XTMP and mark domain complete in metastamp
"RTN","HMPMETA",55,0)
 ;Formatting of metastamp into JSON format by HMPMETA goes here when ready
"RTN","HMPMETA",56,0)
 N HMPDOM
"RTN","HMPMETA",57,0)
 S HMPDOM="PATIENT"
"RTN","HMPMETA",58,0)
 F  S HMPDOM=$O(^TMP("HMPMETA",$J,HMPDOM)) Q:HMPDOM=""  M ^XTMP(HMPBATCH,0,"META",HMPDOM)=^TMP("HMPMETA",$J,HMPDOM)
"RTN","HMPMETA",59,0)
 K ^TMP("HMPMETA",$J)
"RTN","HMPMETA",60,0)
 Q
"RTN","HMPMETA",61,0)
 ;
"RTN","HMPMETA",62,0)
 ;
"RTN","HMPMETA",63,0)
METAPT(A,HMPCDOM) ; MetaStamp for patient data (within its own syncStart chunk).;US11019 added second parameter
"RTN","HMPMETA",64,0)
 ; --Input parameter
"RTN","HMPMETA",65,0)
 ; A = "^^HMPFX~hmp-development-box~"<DFN> (e.g. ^^HMPFX~hmp-development-box~3)
"RTN","HMPMETA",66,0)
 ; HMPCDOM = Single domain US11019
"RTN","HMPMETA",67,0)
 ;
"RTN","HMPMETA",68,0)
 ; --Expects
"RTN","HMPMETA",69,0)
 ; DOMSIZE,OFFSET,HMPFCNT ;US11019 comment added not variables
"RTN","HMPMETA",70,0)
 ;
"RTN","HMPMETA",71,0)
 ; HMPA = "HMPFX~hmp-development-box~"<DFN>
"RTN","HMPMETA",72,0)
 ; HMPB = ZTASK# --> ^XTMP(HMPA,<ZTASK#>
"RTN","HMPMETA",73,0)
 ; HMPC = Domain (e.g. "allergy") --> ^XTMP(HMPA,HMPB,<Domain>
"RTN","HMPMETA",74,0)
 ; HMPD = Counter (sequential number) --> ^XTMP(HMPA,HMPB,HMPC,<Counter>
"RTN","HMPMETA",75,0)
 ; HMPN = Subscript --> ^XTMP(HMPA,HMPB,HMPC,HMPD,<Subscript>
"RTN","HMPMETA",76,0)
 ; HMPE = ^XTMP(HMPA,HMPB,HMPC,HMPD,HMPN)
"RTN","HMPMETA",77,0)
 ; HMPF = Domain id (e.g. the "C877:3:751" part of "urn:va:allergy:C877:3:751"
"RTN","HMPMETA",78,0)
 ; HMPID = pid --> <site-hash>;DFN (e.g. C877;3)
"RTN","HMPMETA",79,0)
 ; HMPZ1 = DFN
"RTN","HMPMETA",80,0)
 ; HMPP = $$PIDS^HMPDJFS(HMPZ1)  --> JSON construct containing pid, systemId, localId, icn
"RTN","HMPMETA",81,0)
 ; HMPQ = " (double quote literal)
"RTN","HMPMETA",82,0)
 ; HMPT = The "total" node from ^XTMP --> ^XTMP(HMPA,HMPB,HMPC,"total")
"RTN","HMPMETA",83,0)
 ; HMPX = JSON construct for the entire metaStamp
"RTN","HMPMETA",84,0)
 ; HMPW = Event timeStamp
"RTN","HMPMETA",85,0)
 ; HMPY = $$EN^HMPSTMP("NOW")
"RTN","HMPMETA",86,0)
 ; HMPZ = Counter for breaking up the large nodes into sub-nodes in ^TMP
"RTN","HMPMETA",87,0)
 ;
"RTN","HMPMETA",88,0)
 S U="^"
"RTN","HMPMETA",89,0)
 N HMPA,HMPB,HMPC,HMPC1,HMPD,HMPE,HMPF,HMPID,HMPM,HMPN
"RTN","HMPMETA",90,0)
 N HMPP,HMPQ,HMPT,HMPW,HMPX,HMPY,HMPZ,HMPZ1
"RTN","HMPMETA",91,0)
 S HMPA=$P(A,U,3),HMPB=$O(^XTMP(HMPA,0)),HMPZ1=$P(HMPA,"~",3)
"RTN","HMPMETA",92,0)
 S HMPE="",HMPQ="""",HMPZ=0 ;US11019
"RTN","HMPMETA",93,0)
 S HMPC=$G(HMPCDOM) ;US11019
"RTN","HMPMETA",94,0)
 S HMPP=$$PIDS^HMPDJFS(HMPZ1)
"RTN","HMPMETA",95,0)
 S HMPY=$$EN^HMPSTMP("NOW")
"RTN","HMPMETA",96,0)
 S HMPX=",""metaStamp"":"_"{""icn"":"""_$$GETICN^MPIF001(HMPZ1)_""""_","
"RTN","HMPMETA",97,0)
 S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_",""sourceMetaStamp"":"_"{"
"RTN","HMPMETA",98,0)
 S HMPID=$TR($P($P(HMPP,"pid",2),","),""":")
"RTN","HMPMETA",99,0)
 S HMPX=HMPX_""""_$P(HMPID,";")_""""_":{"
"RTN","HMPMETA",100,0)
 S HMPX=HMPX_"""pid"":"""_HMPID_""""_","
"RTN","HMPMETA",101,0)
 S HMPX=HMPX_"""localId"":"""_$P(HMPID,";",2)_""""_","
"RTN","HMPMETA",102,0)
 S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_","
"RTN","HMPMETA",103,0)
 S HMPX=HMPX_"""domainMetaStamp"""_":"_"{"
"RTN","HMPMETA",104,0)
 ;Scan Domains
"RTN","HMPMETA",105,0)
 D:HMPC'=""  I HMPC="" F  S HMPC=$O(^XTMP(HMPA,0,"META",HMPC)) Q:HMPC']""  D  ;US11019 allow process by single domain
"RTN","HMPMETA",106,0)
 .S HMPX=HMPX_""""_HMPC_""""_":{"
"RTN","HMPMETA",107,0)
 .S HMPX=HMPX_"""domain"":"""_HMPC_""""_","
"RTN","HMPMETA",108,0)
 .S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_","
"RTN","HMPMETA",109,0)
 .S HMPD=0
"RTN","HMPMETA",110,0)
 .S HMPX=HMPX_"""eventMetaStamp"""_":"_"{" ; Patient data
"RTN","HMPMETA",111,0)
 .N HMPU,HMPS S HMPU=""
"RTN","HMPMETA",112,0)
 .I $O(^XTMP(HMPA,0,"META",HMPC,HMPU))="" S HMPX=HMPX_"}" ;US11019 - cater for zero entries
"RTN","HMPMETA",113,0)
 .F  S HMPU=$O(^XTMP(HMPA,0,"META",HMPC,HMPU)) Q:HMPU']""  D
"RTN","HMPMETA",114,0)
 ..N VAR0,VAR1
"RTN","HMPMETA",115,0)
 ..S HMPS=$G(^XTMP(HMPA,0,"META",HMPC,HMPU)),VAR0=$P(HMPU,":",3),VAR1=$P(HMPU,":",4,99)
"RTN","HMPMETA",116,0)
 ..I $L(HMPX)>20000 S HMPZ=HMPZ+1,^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX,HMPX=""
"RTN","HMPMETA",117,0)
 ..S HMPX=HMPX_"""urn:va:"_VAR0_":"_VAR1_""""_":{"
"RTN","HMPMETA",118,0)
 ..S HMPX=HMPX_"""stampTime"":"""_HMPS_""""_"}"
"RTN","HMPMETA",119,0)
 ..S HMPX=HMPX_$S($O(^XTMP(HMPA,0,"META",HMPC,HMPU))="":"}",1:",")
"RTN","HMPMETA",120,0)
 .S HMPX=HMPX_"},"
"RTN","HMPMETA",121,0)
 .I $L(HMPX)>20000 S HMPZ=HMPZ+1,^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX,HMPX=""
"RTN","HMPMETA",122,0)
 I HMPZ!($L(HMPX)>0) D  ;DE3759 avoid multiple edge case
"RTN","HMPMETA",123,0)
 .I $L(HMPX)=0 S HMPX=^TMP("HMPF",$J,HMPFCNT,.3,HMPZ),^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=$E(HMPX,1,$L(HMPX)-1),HMPX="" ;DE3759
"RTN","HMPMETA",124,0)
 .S HMPZ=HMPZ+1
"RTN","HMPMETA",125,0)
 .S HMPX=$E(HMPX,1,$L(HMPX)-1)_"}}}}" D
"RTN","HMPMETA",126,0)
 ..I $E(HMPX,$L(HMPX))="{" S HMPX=HMPX_"""seq"":"_OFFSET_",""total"":"_DOMSIZE
"RTN","HMPMETA",127,0)
 ..E  S HMPX=HMPX_",""seq"":"_OFFSET_",""total"":"_DOMSIZE
"RTN","HMPMETA",128,0)
 .S HMPX=HMPX_",""object"":"
"RTN","HMPMETA",129,0)
 .S ^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX
"RTN","HMPMETA",130,0)
 Q
"RTN","HMPMETA",131,0)
 ;
"RTN","HMPMETA",132,0)
 ;
"RTN","HMPMETA",133,0)
METAOP(A) ; MetaStamp for operational data (within its own syncStart chunk)
"RTN","HMPMETA",134,0)
 ; A = HMPFX~hmp-development-box~OPD
"RTN","HMPMETA",135,0)
 ;
"RTN","HMPMETA",136,0)
 ; HMPA = "HMPFX~hmp-development-box~"<DFN>
"RTN","HMPMETA",137,0)
 ; HMPB = ZTASK# --> ^XTMP(HMPA,<ZTASK#>
"RTN","HMPMETA",138,0)
 ; HMPC = Domain (e.g. "allergy") --> ^XTMP(HMPA,HMPB,<Domain>
"RTN","HMPMETA",139,0)
 ; HMPD = Counter (sequential number) --> ^XTMP(HMPA,HMPB,HMPC,<Counter>
"RTN","HMPMETA",140,0)
 ; HMPN = Subscript --> ^XTMP(HMPA,HMPB,HMPC,HMPD,<Subscript>
"RTN","HMPMETA",141,0)
 ; HMPE = ^XTMP(HMPA,HMPB,HMPC,HMPD,HMPN)
"RTN","HMPMETA",142,0)
 ; HMPF = Domain id (e.g. the "C877:3:751" part of "urn:va:allergy:C877:3:751"
"RTN","HMPMETA",143,0)
 ; HMPID = pid --> <site-hash>;DFN (e.g. C877;3)
"RTN","HMPMETA",144,0)
 ; HMPZ1 = DFN
"RTN","HMPMETA",145,0)
 ; HMPP = $$PIDS^HMPDJFS(HMPZ1)  --> JSON construct containing pid, systemId, localId, icn
"RTN","HMPMETA",146,0)
 ; HMPQ = " (double quote literal)
"RTN","HMPMETA",147,0)
 ; HMPT = The "total" node from ^XTMP --> ^XTMP(HMPA,HMPB,HMPC,"total")
"RTN","HMPMETA",148,0)
 ; HMPX = JSON construct for the entire metaStamp
"RTN","HMPMETA",149,0)
 ; HMPW = Event timeStamp
"RTN","HMPMETA",150,0)
 ; HMPY = $$EN^HMPSTMP("NOW")
"RTN","HMPMETA",151,0)
 ; HMPZ = Counter for breaking up the large nodes into sub-nodes in ^TMP
"RTN","HMPMETA",152,0)
 ;
"RTN","HMPMETA",153,0)
 S U="^"
"RTN","HMPMETA",154,0)
 N HMPA,HMPJ,HMPQ,HMPSEP,HMPZ,HMPDAT,HMPDAT1,HMPDOM,HMPDOM1,HMPEVT,HMPX,HMPTOT,HMPTSK,HMPMOR,HMPLAS,HMPMOR,HMPLAS
"RTN","HMPMETA",155,0)
 S HMPA=$P(A,U,3),HMPQ="""",HMPZ=0,HMPSEP=","""
"RTN","HMPMETA",156,0)
 S HMPCNT=$G(HMPCNT)+1,HMPJ=$P(HMPA,"~",1,2)_"~OPD"
"RTN","HMPMETA",157,0)
 S HMPSEP=HMPQ
"RTN","HMPMETA",158,0)
 S HMPTSK=$O(^XTMP(A,0)),HMPY=$$EN^HMPSTMP("NOW"),HMPID=$$SYS^HMPUTILS
"RTN","HMPMETA",159,0)
 S HMPX="{""collection"":"""_"OPDsyncStart"_""""_","
"RTN","HMPMETA",160,0)
 S HMPX=HMPX_"""metaStamp"":"_"{"
"RTN","HMPMETA",161,0)
 S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_",""sourceMetaStamp"":"_"{"
"RTN","HMPMETA",162,0)
 S HMPX=HMPX_""""_$P(HMPID,";")_""""_":{"
"RTN","HMPMETA",163,0)
 S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_","
"RTN","HMPMETA",164,0)
 S HMPX=HMPX_"""domainMetaStamp"""_":"_"{"
"RTN","HMPMETA",165,0)
 ;Scan Domains
"RTN","HMPMETA",166,0)
 S HMPC=""
"RTN","HMPMETA",167,0)
 F  S HMPC=$O(^XTMP(HMPA,0,"META",HMPC)) Q:HMPC']""  D
"RTN","HMPMETA",168,0)
 .S HMPX=HMPX_""""_HMPC_""""_":{"
"RTN","HMPMETA",169,0)
 .S HMPX=HMPX_"""domain"":"""_HMPC_""""_","
"RTN","HMPMETA",170,0)
 .S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_","
"RTN","HMPMETA",171,0)
 .S HMPD=0
"RTN","HMPMETA",172,0)
 .S HMPX=HMPX_"""itemMetaStamp"""_":"_"{" ; Patient data
"RTN","HMPMETA",173,0)
 .N HMPU,HMPS S HMPU=""
"RTN","HMPMETA",174,0)
 .F  S HMPU=$O(^XTMP(HMPA,0,"META",HMPC,HMPU)) Q:HMPU']""  D
"RTN","HMPMETA",175,0)
 ..N VAR0,VAR1
"RTN","HMPMETA",176,0)
 ..S HMPS=$G(^XTMP(HMPA,0,"META",HMPC,HMPU)),VAR0=$P(HMPU,":",3),VAR1=$P(HMPU,":",4,99)
"RTN","HMPMETA",177,0)
 ..I $L(HMPX)>20000 S HMPZ=HMPZ+1,^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX,HMPX=""
"RTN","HMPMETA",178,0)
 ..S HMPX=HMPX_"""urn:va:"_VAR0_":"_VAR1_""""_":{"
"RTN","HMPMETA",179,0)
 ..S HMPX=HMPX_"""stampTime"":"""_HMPS_""""_"}"
"RTN","HMPMETA",180,0)
 ..S HMPX=HMPX_$S($O(^XTMP(HMPA,0,"META",HMPC,HMPU))="":"}",1:",")
"RTN","HMPMETA",181,0)
 .S HMPX=HMPX_"},"
"RTN","HMPMETA",182,0)
 .I $L(HMPX)>20000 S HMPZ=HMPZ+1,^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX,HMPX=""
"RTN","HMPMETA",183,0)
 I HMPZ!($L(HMPX)>0) D  ;DE3759 avoid multiple edge case
"RTN","HMPMETA",184,0)
 .I $L(HMPX)=0 S HMPX=^TMP("HMPF",$J,HMPFCNT,.3,HMPZ),^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=$E(HMPX,1,$L(HMPX)-1),HMPX="" ;DE3759
"RTN","HMPMETA",185,0)
 .S HMPZ=HMPZ+1
"RTN","HMPMETA",186,0)
 .S HMPX=$E(HMPX,1,$L(HMPX)-1)_"}}}}},{"
"RTN","HMPMETA",187,0)
 .S ^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX
"RTN","HMPMETA",188,0)
 Q
"RTN","HMPMETA",189,0)
 ;
"RTN","HMPMETA",190,0)
 ;
"RTN","HMPPTIMO")
0^26^B2182688
"RTN","HMPPTIMO",1,0)
HMPPTIMO ;;AFS/MBS - HMP timeout post-install setup; ; 2/27/17 2:16pm
"RTN","HMPPTIMO",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**4**;Feb 15, 2017;Build 13
"RTN","HMPPTIMO",3,0)
 ;Per VA Directive 6402, this routine should not be modified
"RTN","HMPPTIMO",4,0)
 ; External References    DBIA#
"RTN","HMPPTIMO",5,0)
 ; -------------------    -----
"RTN","HMPPTIMO",6,0)
 ; $$FIND1^DIC            2051
"RTN","HMPPTIMO",7,0)
 ; MSG^DIALOG             2050
"RTN","HMPPTIMO",8,0)
 ; FILE^DIE               2053
"RTN","HMPPTIMO",9,0)
 ; GETS^DIQ               2056
"RTN","HMPPTIMO",10,0)
 ; MES^XPDUTL            10141
"RTN","HMPPTIMO",11,0)
 Q
"RTN","HMPPTIMO",12,0)
POST ;Add initial values to timeout and retry count fields of #800000 file
"RTN","HMPPTIMO",13,0)
 N IENS,HMPFDA,FDA,DIERR,HMPGETS,MSG,I
"RTN","HMPPTIMO",14,0)
 D MES^XPDUTL("RUNNING POST^HMPPTIMO")
"RTN","HMPPTIMO",15,0)
 S IENS=$$FIND1^DIC(800000,,"X","hmp-development-box")_","
"RTN","HMPPTIMO",16,0)
 I 'IENS D  Q
"RTN","HMPPTIMO",17,0)
 . D MES^XPDUTL("Error: could not find hmp-development-box entry in HMP SUBSCRIPTON (#800000) FILE.")
"RTN","HMPPTIMO",18,0)
 D GETS^DIQ(800000,IENS,".08;.09",,"HMPGETS")
"RTN","HMPPTIMO",19,0)
 ; Default value for timeout: 300
"RTN","HMPPTIMO",20,0)
 ; Default value for retry count: 5
"RTN","HMPPTIMO",21,0)
 S:'$G(HMPGETS(800000,IENS,.08)) FDA(800000,IENS,.08)=300
"RTN","HMPPTIMO",22,0)
 S:'$G(HMPGETS(800000,IENS,.09)) FDA(800000,IENS,.09)=5
"RTN","HMPPTIMO",23,0)
 I $D(FDA) D FILE^DIE(,"FDA")
"RTN","HMPPTIMO",24,0)
 I $G(DIERR) D
"RTN","HMPPTIMO",25,0)
 . D MES^XPDUTL("Error adding initial values to hmp-development-box:")
"RTN","HMPPTIMO",26,0)
 . D MSG^DIALOG("AT",.MSG)
"RTN","HMPPTIMO",27,0)
 . F I=1:1:+$G(MSG) D MES^XPDUTL($G(MSG(I)))
"RTN","HMPPTIMO",28,0)
 Q
"RTN","HMPUTIL1")
0^42^B48063389
"RTN","HMPUTIL1",1,0)
HMPUTIL1 ;SLC/AGP,ASMR/RRB,CPC - HMP utilities routine ;May 15, 2016 14:15
"RTN","HMPUTIL1",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,4**;May 15, 2016;Build 13
"RTN","HMPUTIL1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPUTIL1",4,0)
 ;
"RTN","HMPUTIL1",5,0)
 Q
"RTN","HMPUTIL1",6,0)
 ;
"RTN","HMPUTIL1",7,0)
 ; ADHOC subroutine refactored for DE1788
"RTN","HMPUTIL1",8,0)
ADHOC(HMPDMINP,HMPFCNT,DFN) ; Add syncStart metastamp and syncStatus to unsolicited updates
"RTN","HMPUTIL1",9,0)
 Q:($G(HMPDMINP)="")!($G(DFN)="")  ; domain and DFN required
"RTN","HMPUTIL1",10,0)
 ; HMPFCNT = count of objects, passed by ref.
"RTN","HMPUTIL1",11,0)
 ; expects HMPFSTR (set in HMPDJFSG) is ^XTMP freshness stream subscript 
"RTN","HMPUTIL1",12,0)
 ; the heading from APIHDR^HMPDJFSG is in ^TMP("HMPF",$J) already
"RTN","HMPUTIL1",13,0)
 ; the JSON built here is placed inside a JSON array, with a '[' after the heading
"RTN","HMPUTIL1",14,0)
 ;
"RTN","HMPUTIL1",15,0)
 N HMPA4JSN,HMPDAT,HMPDMTOT,HMPDOM,HMPID,HMPJSERR,HMPJSON,HMPSUB,I,J,LSTLN,QTE,SUB,X,Y,DELJSON
"RTN","HMPUTIL1",16,0)
 N HMPJSNSY
"RTN","HMPUTIL1",17,0)
 ; HMPA4JSN, HMPJSON, HMPJSERR - used for JSON encoder
"RTN","HMPUTIL1",18,0)
 ; HMPA4JSN - array to encode
"RTN","HMPUTIL1",19,0)
 ; HMPJSON - JSON result
"RTN","HMPUTIL1",20,0)
 ; HMPJSERR - error text from encoder
"RTN","HMPUTIL1",21,0)
 ; QTE - " character
"RTN","HMPUTIL1",22,0)
 ; HMPJSNSY - The system id value for the JSON Encoder, If fully numeric it needs a " prepended
"RTN","HMPUTIL1",23,0)
 S HMPDAT("DELDATE")="",QTE=$C(34)
"RTN","HMPUTIL1",24,0)
 S HMPDMTOT=0  ; domain total
"RTN","HMPUTIL1",25,0)
 ; Save delete date/time for later use.
"RTN","HMPUTIL1",26,0)
 I $G(ACT)="@" D
"RTN","HMPUTIL1",27,0)
 . D  ;DE4307 get from freshness save if available
"RTN","HMPUTIL1",28,0)
 ..  I +$G(FILTER("freshnessDateTime")) S HMPDAT("DELDATE")=$$JSONDT^HMPUTILS(FILTER("freshnessDateTime")) Q
"RTN","HMPUTIL1",29,0)
 ..  S Y=$$FMTH^XLFDT($P(HMPFSTRM,"~",3))  ; Get the date from fresh stream (HMPFS~<server>~<date>)
"RTN","HMPUTIL1",30,0)
 ..  S Y=$$HTFM^XLFDT($P(Y,",")_","_$G(ARGS("hmp-fst"),0))  ; Add delete time stored in ARGS("hmp-fst")
"RTN","HMPUTIL1",31,0)
 ..  S HMPDAT("DELDATE")=$$JSONDT^HMPUTILS(Y)  ; delete date/time into JSON format
"RTN","HMPUTIL1",32,0)
 . S DELJSON="{""pid"":"""_$$PID^HMPDJFS(DFN)_""",""removed"":""true"",""stampTime"":"_HMPDAT("DELDATE")_",""uid"":"""_$G(HMP97)_"""}"
"RTN","HMPUTIL1",33,0)
 ;
"RTN","HMPUTIL1",34,0)
 S HMPA4JSN=$NA(^TMP($J,"ARRAY4JSON")) K @HMPA4JSN ; data array for JSON
"RTN","HMPUTIL1",35,0)
 S HMPJSON=$NA(^TMP($J,"JSONRESULT")) K @HMPJSON  ; JSON result
"RTN","HMPUTIL1",36,0)
 ;
"RTN","HMPUTIL1",37,0)
 S HMPDAT("STAMPTIME")=$$EN^HMPSTMP("NOW"),HMPID=$$SYS^HMPUTILS,HMPJSNSY=$S(+HMPID=HMPID:""""_HMPID,1:HMPID)
"RTN","HMPUTIL1",38,0)
 ;
"RTN","HMPUTIL1",39,0)
 D:DFN'="OPD"  ; get PID data for patient
"RTN","HMPUTIL1",40,0)
 .N ITM,VAL  ; $$PIDS returns: ,"pid":"9E4B;3","systemId":"9E4B","localId":"3","icn":"10207V420718"
"RTN","HMPUTIL1",41,0)
 .S Y=$$PIDS^HMPDJFS(DFN)  ; parse Y, remove quotes save values in HMPID('item')
"RTN","HMPUTIL1",42,0)
 .F J=2:1:$L(Y,",") S X=$P(Y,",",J),ITM=$TR($P(X,":"),QTE),VAL=$TR($P(X,":",2),QTE) S:ITM]"" HMPID(ITM)=VAL
"RTN","HMPUTIL1",43,0)
 ;
"RTN","HMPUTIL1",44,0)
 ; transform domain name for quick orders to match the uid
"RTN","HMPUTIL1",45,0)
 S HMPDOM=HMPDMINP I HMPDOM="quick" S HMPDOM="qo"
"RTN","HMPUTIL1",46,0)
 ;
"RTN","HMPUTIL1",47,0)
 ; stamp time put into HMPDAT("STAMPTIME")
"RTN","HMPUTIL1",48,0)
 S HMPSUB=""
"RTN","HMPUTIL1",49,0)
 S HMPDAT("STAMPTIME")=""
"RTN","HMPUTIL1",50,0)
 F  S HMPSUB=$O(^TMP("HMP",$J,HMPSUB)) Q:'HMPSUB  D
"RTN","HMPUTIL1",51,0)
 .N DONE,HMPN,NEXT,SRCH,HMPDATP ;cpc 2015/10/21
"RTN","HMPUTIL1",52,0)
 .S SRCH="""uid"""_":"_""""_"urn:va:"_HMPDOM_":"
"RTN","HMPUTIL1",53,0)
 .; Search back from last record - but include start of next to cover crossovers
"RTN","HMPUTIL1",54,0)
 .S HMPDAT="" ;cpc 2015/10/21
"RTN","HMPUTIL1",55,0)
 .S HMPN="",HMPDAT("UID")="",DONE=""
"RTN","HMPUTIL1",56,0)
 .F  S HMPN=$O(^TMP("HMP",$J,HMPSUB,HMPN),-1) Q:'HMPN  D  Q:DONE
"RTN","HMPUTIL1",57,0)
 ..S HMPDATP=$E(HMPDAT,1,100) ;cpc 2015/10/21
"RTN","HMPUTIL1",58,0)
 ..S HMPDAT=$G(^TMP("HMP",$J,HMPSUB,HMPN)) Q:HMPDAT="null"!'$L(HMPDAT)
"RTN","HMPUTIL1",59,0)
 ..S HMPDAT=HMPDAT_HMPDATP ;cpc 2015/10/21 - look for crossover data
"RTN","HMPUTIL1",60,0)
 ..;Search for last occurrence of uid in record (this will be parent)
"RTN","HMPUTIL1",61,0)
 ..I $G(HMPDAT(HMPSUB,"UID"))="",$F(HMPDAT,SRCH) F I=2:1 S NEXT=$P($P(HMPDAT,SRCH,I),QTE) Q:NEXT=""  S HMPDAT(HMPSUB,"UID")=NEXT ;cpc 2016/09/16
"RTN","HMPUTIL1",62,0)
 ..;BL;CPC Extract stamptime if present (patient data ONLY)
"RTN","HMPUTIL1",63,0)
 ..;cpc 2015/10/09 - conditionalize tests
"RTN","HMPUTIL1",64,0)
 ..I '$G(HMPDAT(HMPSUB,"STAMPTIME")),$F(HMPDAT,"stampTime") D  ;cpc 2015/10/21
"RTN","HMPUTIL1",65,0)
 ...S HMPDAT(HMPSUB,"STAMPTIME")=$P($P(HMPDAT,"""stampTime"":",2),",")
"RTN","HMPUTIL1",66,0)
 ...;Keep the latest stamptime so that we can use it for the overall metastamp
"RTN","HMPUTIL1",67,0)
 ...I HMPDAT(HMPSUB,"STAMPTIME")>HMPDAT("STAMPTIME") S HMPDAT("STAMPTIME")=HMPDAT(HMPSUB,"STAMPTIME")
"RTN","HMPUTIL1",68,0)
 ..;Patient data requires both UID and stampTime to be complete
"RTN","HMPUTIL1",69,0)
 ..S:$G(HMPDAT(HMPSUB,"UID"))&$G(HMPDAT(HMPSUB,"STAMPTIME")) DONE=1
"RTN","HMPUTIL1",70,0)
 ..;cpc 2015/10/09 - end
"RTN","HMPUTIL1",71,0)
 ;
"RTN","HMPUTIL1",72,0)
 ; HMP97 is uid, SET in FRESHITM^HMPDJFSG
"RTN","HMPUTIL1",73,0)
 I $G(ACT)="@" S HMPDAT("UID")=$P($G(HMP97),":",4,99)
"RTN","HMPUTIL1",74,0)
 ;
"RTN","HMPUTIL1",75,0)
 S @HMPA4JSN@("collection")=$S(DFN="OPD":"OPDsyncStart",1:"syncStart")
"RTN","HMPUTIL1",76,0)
 I DFN="OPD" S @HMPA4JSN@("systemId")=$P(HMPID,";") ; set systemId for OPD
"RTN","HMPUTIL1",77,0)
 S X="" F  S X=$O(HMPID(X)) Q:X=""  S @HMPA4JSN@(X)=HMPID(X)  ; add pid, systemId, localId, icn
"RTN","HMPUTIL1",78,0)
 ;
"RTN","HMPUTIL1",79,0)
 ;DE4307 - if stamptime still doesn't exist then get from freshness
"RTN","HMPUTIL1",80,0)
 I '+HMPDAT("STAMPTIME"),+$G(FILTER("freshnessDateTime")) S HMPDAT("STAMPTIME")=$$JSONDT^HMPUTILS(FILTER("freshnessDateTime"))
"RTN","HMPUTIL1",81,0)
 S @HMPA4JSN@("unsolicitedUpdate")=$S($G(FILTER("freshnessDateTime")):"true",1:"false") ;US18245
"RTN","HMPUTIL1",82,0)
 ; build metastamp components
"RTN","HMPUTIL1",83,0)
 S SUB="metaStamp"
"RTN","HMPUTIL1",84,0)
 S X="" F  S X=$O(HMPID(X)) Q:X=""  S @HMPA4JSN@(SUB,X)=HMPID(X)  ; add pid, systemId, localId, icn
"RTN","HMPUTIL1",85,0)
 S @HMPA4JSN@(SUB,"stampTime")=HMPDAT("STAMPTIME")
"RTN","HMPUTIL1",86,0)
 ;
"RTN","HMPUTIL1",87,0)
 S SUB(1)="sourceMetaStamp",X=""
"RTN","HMPUTIL1",88,0)
 F  S X=$O(HMPID(X)) Q:X=""  S @HMPA4JSN@(SUB,SUB(1),HMPJSNSY,X)=HMPID(X)  ; add pid, systemId, localId, icn ;de4757 use stringed version of system
"RTN","HMPUTIL1",89,0)
 S @HMPA4JSN@(SUB,SUB(1),HMPJSNSY,"stampTime")=HMPDAT("STAMPTIME")
"RTN","HMPUTIL1",90,0)
 ;
"RTN","HMPUTIL1",91,0)
 S SUB(2)="domainMetaStamp"
"RTN","HMPUTIL1",92,0)
 S @HMPA4JSN@(SUB,SUB(1),HMPJSNSY,SUB(2),HMPDOM,"domain")=HMPDOM
"RTN","HMPUTIL1",93,0)
 S @HMPA4JSN@(SUB,SUB(1),HMPJSNSY,SUB(2),HMPDOM,"stampTime")=$S($L($G(HMPDAT("DELDATE"))):HMPDAT("DELDATE"),1:HMPDAT("STAMPTIME"))
"RTN","HMPUTIL1",94,0)
 ;
"RTN","HMPUTIL1",95,0)
 ; Loop through HMPSUB to generate the eventMetastamp
"RTN","HMPUTIL1",96,0)
 S SUB(3)=$S(DFN="OPD":"itemMetaStamp",1:"eventMetaStamp"),HMPSUB="" ;cpc 2015/10/22
"RTN","HMPUTIL1",97,0)
 F  S HMPSUB=$O(HMPDAT(HMPSUB)) Q:'HMPSUB  D
"RTN","HMPUTIL1",98,0)
 .S SUB(4)="urn:va:"_HMPDOM_":"_$S($G(ACT)="@":HMPDAT("UID"),1:HMPDAT(HMPSUB,"UID")) ;CPC won't exist for deletion
"RTN","HMPUTIL1",99,0)
 .S @HMPA4JSN@(SUB,SUB(1),HMPJSNSY,SUB(2),HMPDOM,SUB(3),SUB(4),"stampTime")=$S($L($G(HMPDAT("DELDATE"))):HMPDAT("DELDATE"),1:HMPDAT(HMPSUB,"STAMPTIME"))
"RTN","HMPUTIL1",100,0)
 ;
"RTN","HMPUTIL1",101,0)
 D ENCODE^HMPJSON(HMPA4JSN,HMPJSON,"HMPJSERR")
"RTN","HMPUTIL1",102,0)
 I $D(HMPJSERR) S $EC=",JSON encode error in unsolicited update," Q
"RTN","HMPUTIL1",103,0)
 ; find last line of JSON
"RTN","HMPUTIL1",104,0)
 S LSTLN=0 F J=1:1 Q:'$D(@HMPJSON@(J))  S LSTLN=J
"RTN","HMPUTIL1",105,0)
 ; Merge in data section from FRESHITM^HMPDJFSG
"RTN","HMPUTIL1",106,0)
 ; Add a comma after the syncStart Message for the actual data
"RTN","HMPUTIL1",107,0)
 S @HMPJSON@(LSTLN,.3)=","
"RTN","HMPUTIL1",108,0)
 S HMPSUB=""
"RTN","HMPUTIL1",109,0)
 ;
"RTN","HMPUTIL1",110,0)
 ; do the merge
"RTN","HMPUTIL1",111,0)
 F  S HMPSUB=$O(^TMP("HMP",$J,HMPSUB)) Q:'HMPSUB  D
"RTN","HMPUTIL1",112,0)
 .N HMPX,HMPDATA,X
"RTN","HMPUTIL1",113,0)
 .S LSTLN=LSTLN+1
"RTN","HMPUTIL1",114,0)
 . ;US18245
"RTN","HMPUTIL1",115,0)
 . S X="{""collection"":"""_HMPDOM_$S(DFN'="OPD":""""_$$PIDS^HMPDJFS(DFN),1:"""")_",""seq"":1,""total"":1" ;US18852 JSON bug
"RTN","HMPUTIL1",116,0)
 . S X=X_",""unsolicitedUpdate"":"_$S($G(FILTER("freshnessDateTime")):"true",1:"false")_","
"RTN","HMPUTIL1",117,0)
 . S X=X_"""object"":"
"RTN","HMPUTIL1",118,0)
 .; If it is patient data add the wrapper with pid
"RTN","HMPUTIL1",119,0)
 .I DFN'="OPD" S @HMPJSON@(LSTLN,.4)=X_$S($G(ACT)="@":DELJSON,1:"")
"RTN","HMPUTIL1",120,0)
 .; If it is operational data add the wrapper without pid
"RTN","HMPUTIL1",121,0)
 .I DFN="OPD",$G(ACT)="@" S @HMPJSON@(LSTLN,.4)=X_DELJSON ;;US5647
"RTN","HMPUTIL1",122,0)
 .; If it is operational data and to be deleted
"RTN","HMPUTIL1",123,0)
 .I DFN="OPD",$G(ACT)'="@"  D  ;US5859
"RTN","HMPUTIL1",124,0)
 ..S @HMPJSON@(LSTLN,.4)=X
"RTN","HMPUTIL1",125,0)
 ..S HMPX="""stampTime"":"_QTE_$S($L($G(HMPDAT("DELDATE"))):HMPDAT("DELDATE"),1:HMPDAT("STAMPTIME"))_QTE_","
"RTN","HMPUTIL1",126,0)
 ..S HMPDATA=^TMP("HMP",$J,HMPSUB,1)
"RTN","HMPUTIL1",127,0)
 ..S ^TMP("HMP",$J,HMPSUB,1)="{"_HMPX_$P(HMPDATA,"{",2,999)
"RTN","HMPUTIL1",128,0)
 .M @HMPJSON@(LSTLN)=^TMP("HMP",$J,HMPSUB)
"RTN","HMPUTIL1",129,0)
 .; Close the wrapper
"RTN","HMPUTIL1",130,0)
 .S HMPCLFLG=1
"RTN","HMPUTIL1",131,0)
 .; Add the closing brace for the wrapper
"RTN","HMPUTIL1",132,0)
 .S @HMPJSON@(LSTLN+1,.1)="}"
"RTN","HMPUTIL1",133,0)
 .; Increment the domain total
"RTN","HMPUTIL1",134,0)
 .S HMPDMTOT=HMPDMTOT+1
"RTN","HMPUTIL1",135,0)
 ;
"RTN","HMPUTIL1",136,0)
 S HMPFCNT=$G(HMPFCNT)+1
"RTN","HMPUTIL1",137,0)
 M ^TMP("HMPF",$J,HMPFCNT)=@HMPJSON
"RTN","HMPUTIL1",138,0)
 ; need a comma if more than one item
"RTN","HMPUTIL1",139,0)
 I HMPFCNT>1 S ^TMP("HMPF",$J,HMPFCNT,.3)=$S(HMPLITEM="SYNC":"},",1:",") S HMPLITEM="FRESH" ; DE3502
"RTN","HMPUTIL1",140,0)
 ;
"RTN","HMPUTIL1",141,0)
 ; clean up residual data in ^TMP($J), may be quite a lot
"RTN","HMPUTIL1",142,0)
 K @HMPA4JSN,@HMPJSON
"RTN","HMPUTIL1",143,0)
 Q
"RTN","HMPUTIL1",144,0)
 ;
"RTN","HMPUTILS")
0^37^B101301435
"RTN","HMPUTILS",1,0)
HMPUTILS ;SLC/AGP,ASMR/ASF,JC,CPC-HMP utilities ;Jan 20, 2017 17:18:18
"RTN","HMPUTILS",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3,4**;Sep 01, 2011;Build 13
"RTN","HMPUTILS",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPUTILS",4,0)
 ;
"RTN","HMPUTILS",5,0)
 Q  ; no entry from top
"RTN","HMPUTILS",6,0)
 ;DE6644, 7 September 2016, updated comments, corrected variables in stack, optimized code
"RTN","HMPUTILS",7,0)
 ;
"RTN","HMPUTILS",8,0)
 ; integration agreements:
"RTN","HMPUTILS",9,0)
 ;
"RTN","HMPUTILS",10,0)
 ; External References          DBIA#
"RTN","HMPUTILS",11,0)
 ; -------------------          -----
"RTN","HMPUTILS",12,0)
 ; XLFCRC                        3156
"RTN","HMPUTILS",13,0)
 ; XLFDT                        10103
"RTN","HMPUTILS",14,0)
 ; XLFUTL                        2622
"RTN","HMPUTILS",15,0)
 ; XUPARAM                       2541
"RTN","HMPUTILS",16,0)
 ;
"RTN","HMPUTILS",17,0)
 ;
"RTN","HMPUTILS",18,0)
 ;
"RTN","HMPUTILS",19,0)
CHKSP(HMPFHMP) ; ^XTMP check before patient subscription starts to cache   *BEGIN*S68-PJH
"RTN","HMPUTILS",20,0)
 ; HMPFHMP - server name
"RTN","HMPUTILS",21,0)
 N HMPOK S HMPOK=0
"RTN","HMPUTILS",22,0)
 F  D  Q:HMPOK
"RTN","HMPUTILS",23,0)
 . I $$GETMAX>$$GETSIZE("estimate",HMPFHMP) S HMPOK=1 D STATUS(HMPOK,HMPFHMP) Q  ; set DISK USAGE STATUS to 'WITHIN LIMIT' and continue, US8228
"RTN","HMPUTILS",24,0)
 . D STATUS(HMPOK,HMPFHMP) H $$GETSECS^HMPDJFSP  ; DISK USAGE STATUS is 'EXCEEDED LIMIT' and wait, US8228
"RTN","HMPUTILS",25,0)
 Q  ;  *END*S68-PJH
"RTN","HMPUTILS",26,0)
 ;
"RTN","HMPUTILS",27,0)
STATUS(STOP,HMPFHMP) ; Set HMP GLOBAL USAGE MONITOR status
"RTN","HMPUTILS",28,0)
 Q:$G(STOP)=""  Q:$G(HMPFHMP)=""
"RTN","HMPUTILS",29,0)
 N HMPFLG,HMPSTMP,HMPSRV
"RTN","HMPUTILS",30,0)
 S HMPSRV=$O(^HMP(800000,"B",HMPFHMP,"")) Q:'HMPSRV
"RTN","HMPUTILS",31,0)
 S HMPFLG=$P($G(^HMP(800000,HMPSRV,0)),U,5),HMPSTMP=$P($G(^HMP(800000,HMPSRV,0)),U,6)
"RTN","HMPUTILS",32,0)
 ;If stopped and already flagged as stopped do nothing
"RTN","HMPUTILS",33,0)
 I STOP,HMPFLG Q
"RTN","HMPUTILS",34,0)
 ;If stopped but not flagged as stopped set flag and timestamp
"RTN","HMPUTILS",35,0)
 I STOP,'HMPFLG D SET(STOP,HMPSRV) Q
"RTN","HMPUTILS",36,0)
 ;If running and flagged as stopped flag as running
"RTN","HMPUTILS",37,0)
 I 'STOP,HMPFLG D SET(STOP,HMPSRV) Q
"RTN","HMPUTILS",38,0)
 ;No action needed if running and not flagged as stop
"RTN","HMPUTILS",39,0)
 Q
"RTN","HMPUTILS",40,0)
 ;
"RTN","HMPUTILS",41,0)
SET(STOP,HMPSRV) ; Flag set/reset, Stamptime set
"RTN","HMPUTILS",42,0)
 Q:'$G(HMPSRV)
"RTN","HMPUTILS",43,0)
 L +^HMP(800000,HMPSRV,0):5 E  D  Q
"RTN","HMPUTILS",44,0)
 . N J,TXT
"RTN","HMPUTILS",45,0)
 . S TXT(1)="Failed to lock file 800000 for server "_HMPSRV_" in SET HMPUTILS",TXT(2)=" "
"RTN","HMPUTILS",46,0)
 . S J=$$NWNTRY^HMPLOG($$NOW^XLFDT,"",.TXT)
"RTN","HMPUTILS",47,0)
 S $P(^HMP(800000,HMPSRV,0),U,5,6)=STOP_U_$$NOW^XLFDT
"RTN","HMPUTILS",48,0)
 L -^HMP(800000,HMPSRV,0)
"RTN","HMPUTILS",49,0)
 Q
"RTN","HMPUTILS",50,0)
 ;
"RTN","HMPUTILS",51,0)
CHECK(HMPFHMP) ; Check storage status and send MailMan message if appropriate
"RTN","HMPUTILS",52,0)
 ; Input HMPFHMP - server name
"RTN","HMPUTILS",53,0)
 Q:$G(HMPFHMP)=""
"RTN","HMPUTILS",54,0)
 N HMPDIFF,HMPFLG,HMPSRV,HMPSTTM
"RTN","HMPUTILS",55,0)
 S HMPSRV=$O(^HMP(800000,"B",HMPFHMP,"")) Q:'HMPSRV
"RTN","HMPUTILS",56,0)
 ; ^DD(800000,.05,0)="DISK USAGE STATUS^S^0:WITHIN LIMIT;1:EXCEEDED LIMIT;^0;5^Q"
"RTN","HMPUTILS",57,0)
 S HMPFLG=$P($G(^HMP(800000,HMPSRV,0)),U,5)
"RTN","HMPUTILS",58,0)
 ;No action required if status is not set
"RTN","HMPUTILS",59,0)
 I HMPFLG="" Q
"RTN","HMPUTILS",60,0)
 ; (#.06) DISK USAGE STATUS TIME [6D]
"RTN","HMPUTILS",61,0)
 S HMPSTTM=$P($G(^HMP(800000,HMPSRV,0)),U,6) Q:HMPSTTM=""
"RTN","HMPUTILS",62,0)
 ;quit if status time < five minutes ago
"RTN","HMPUTILS",63,0)
 I $$FMDIFF^XLFDT($$NOW^XLFDT,HMPSTTM,2)<300 Q
"RTN","HMPUTILS",64,0)
 ;Otherwise send message
"RTN","HMPUTILS",65,0)
 D MSG(HMPFLG)
"RTN","HMPUTILS",66,0)
 ; Clear DISK USAGE STATUS and DISK USAGE STATUS TIME
"RTN","HMPUTILS",67,0)
 L +^HMP(800000,HMPSRV,0):5 E  D  Q  ; quit if no lock
"RTN","HMPUTILS",68,0)
 . N J,TXT
"RTN","HMPUTILS",69,0)
 . S TXT(1)="Failed to lock file 800000 for server "_HMPSRV_" in CHECK HMPUTILS",TXT(2)=" "
"RTN","HMPUTILS",70,0)
 . S J=$$NWNTRY^HMPLOG($$NOW^XLFDT,"",.TXT)
"RTN","HMPUTILS",71,0)
 S $P(^HMP(800000,HMPSRV,0),U,5)=""
"RTN","HMPUTILS",72,0)
 S $P(^HMP(800000,HMPSRV,0),U,6)=""
"RTN","HMPUTILS",73,0)
 L -^HMP(800000,HMPSRV,0)
"RTN","HMPUTILS",74,0)
 Q
"RTN","HMPUTILS",75,0)
 ;
"RTN","HMPUTILS",76,0)
 ; DE6644: 2 MailMan message subroutines combined, 13 January 2017
"RTN","HMPUTILS",77,0)
MSG(HMPFLG) ; send email about space limit for ^XTMP("HMP*")
"RTN","HMPUTILS",78,0)
 Q:'$D(HMPFLG)  ; must have flag, if HMPFLG then limit exceeded
"RTN","HMPUTILS",79,0)
 ; 1 megabyte = 2**20 bytes = 1048576 bytes
"RTN","HMPUTILS",80,0)
 N HMPMSG,HMPRCPNT,HMPSUBJ,HMPTXT,MAX
"RTN","HMPUTILS",81,0)
 S MAX=$$GETMAX^HMPUTILS  ; system parameter: HMP EXTRACT DISK SIZE LIMIT
"RTN","HMPUTILS",82,0)
 S HMPSUBJ="HMP namepsace XTMP Global Size Monitor "_$S(HMPFLG:"PAUSE",1:"RESTART")_" alert"
"RTN","HMPUTILS",83,0)
 D MSGLN(.HMPTXT,"*ALERT*: eHMP storage in the ^XTMP global has")
"RTN","HMPUTILS",84,0)
 D MSGLN(.HMPTXT,$S(HMPFLG:"exceeded ",1:"been below ")_$FN(MAX,",")_" bytes ("_$J(MAX/1048576,2,2)_" MB) for more than 5 minutes.")
"RTN","HMPUTILS",85,0)
 D MSGLN(.HMPTXT,"eHMP subscribing was "_$S(HMPFLG:"PAUSED.",1:"RESTARTED.")),MSGLN(.HMPTXT," ")
"RTN","HMPUTILS",86,0)
 D MSGLN(.HMPTXT,"HMP* namespace data stored in ^XTMP is "_$J($P($$GETSIZE^HMPUTILS,"^")/1048576,2,2)_" MB.")
"RTN","HMPUTILS",87,0)
 D MSGLN(.HMPTXT," "),MSGLN(.HMPTXT,"eHMP ^XTMP space check made "_$$HTE^XLFDT($H)),MSGLN(.HMPTXT," ")
"RTN","HMPUTILS",88,0)
 I $G(ZTSK) D MSGLN(.HMPTXT,"TaskMan task number: "_ZTSK)  ; add task number if available
"RTN","HMPUTILS",89,0)
 D MSGLN(.HMPTXT," ")
"RTN","HMPUTILS",90,0)
 S HMPRCPNT("G.HMP IRM GROUP")="",HMPRCPNT(DUZ)=""
"RTN","HMPUTILS",91,0)
 D SENDMSG^XMXAPI(DUZ,HMPSUBJ,"HMPTXT",.HMPRCPNT,,.HMPMSG)  ; HMPMSG returned as message number
"RTN","HMPUTILS",92,0)
 Q
"RTN","HMPUTILS",93,0)
 ;
"RTN","HMPUTILS",94,0)
MSGLN(TXTARY,LN) ; add LN to TXTARY (passed by ref.) for MailMan message
"RTN","HMPUTILS",95,0)
 Q:'$L($G(LN))  ; must have some text
"RTN","HMPUTILS",96,0)
 S TXTARY(0)=$G(TXTARY(0))+1,TXTARY(TXTARY(0))=LN Q
"RTN","HMPUTILS",97,0)
 ;
"RTN","HMPUTILS",98,0)
SETERROR(RESULT,ERROR,EXTERROR,DATA) ; -- error text for JSON
"RTN","HMPUTILS",99,0)
 N CNT,TEMP,HMPTEMP,XCNT
"RTN","HMPUTILS",100,0)
 S HMPTEMP="HMPXTEMP ERRORS"
"RTN","HMPUTILS",101,0)
 I '$D(^XTMP(HMPTEMP,0)) S ^XTMP(HMPTEMP,0)=$$FMADD^XLFDT(DT,7)_U_DT_U_"HMP ERROR GLOBAL"
"RTN","HMPUTILS",102,0)
 S RESULT("success")="false"
"RTN","HMPUTILS",103,0)
 I $D(DATA) S XCNT=$O(^XTMP(HMPTEMP,""),-1)+1 M ^XTMP(HMPTEMP,XCNT,"ERROR")=DATA
"RTN","HMPUTILS",104,0)
 I $D(ERROR) D SETERRTX(.TEMP,.ERROR) S RESULT("error","code")=TEMP
"RTN","HMPUTILS",105,0)
 I +$G(XCNT)>0 S RESULT("error","code")=$G(RESULT("error","code"))_" See ^XTMP("_HMPTEMP_","_XCNT_",DATA) for data"
"RTN","HMPUTILS",106,0)
 I $D(EXTERROR) D SETERRTX(.TEMP,.EXTERROR) I TEMP'="" S RESULT("error","message")=TEMP
"RTN","HMPUTILS",107,0)
 ;
"RTN","HMPUTILS",108,0)
 Q
"RTN","HMPUTILS",109,0)
 ;
"RTN","HMPUTILS",110,0)
SETERRTX(TEMP,ERROR) ; concatenate errors from ERROR array, put CR, LF between them
"RTN","HMPUTILS",111,0)
 S TEMP="",CNT=0  ; CNT, TEMP from SETERROR
"RTN","HMPUTILS",112,0)
 F  S CNT=$O(ERROR(CNT)) Q:CNT'>0  S TEMP=$S(TEMP'="":TEMP=TEMP_$C(13,10)_ERROR(CNT),1:ERROR(CNT))
"RTN","HMPUTILS",113,0)
 Q
"RTN","HMPUTILS",114,0)
 ;
"RTN","HMPUTILS",115,0)
 ;
"RTN","HMPUTILS",116,0)
SETTEXT(X,VALUE) ; -- format word processing text
"RTN","HMPUTILS",117,0)
 N FIRST,I,LINE
"RTN","HMPUTILS",118,0)
 S FIRST=1
"RTN","HMPUTILS",119,0)
 S I=0 F  S I=$O(@X@(I)) Q:I<1  D
"RTN","HMPUTILS",120,0)
 .S LINE=$S($D(@X@(I,0)):@X@(I,0),1:@X@(I))
"RTN","HMPUTILS",121,0)
 .; FIRST=1 S @VALUE@(I)=LINE,FIRST=0 Q
"RTN","HMPUTILS",122,0)
 .S @VALUE@(I)=LINE_$C(13)_$C(10)
"RTN","HMPUTILS",123,0)
 Q
"RTN","HMPUTILS",124,0)
 ;
"RTN","HMPUTILS",125,0)
 ;
"RTN","HMPUTILS",126,0)
SPLITVAL(NODE,ARRAY) ; -- split a value into a list
"RTN","HMPUTILS",127,0)
 N CNT,NAME,VALUE,FIELD
"RTN","HMPUTILS",128,0)
 S NAME="" F  S NAME=$O(ARRAY(NAME)) Q:NAME=""  D
"RTN","HMPUTILS",129,0)
 .S CNT=+ARRAY(NAME)
"RTN","HMPUTILS",130,0)
 .S VALUE=$P($G(NODE),U,CNT)
"RTN","HMPUTILS",131,0)
 .I NAME="Code" S FIELD=$P(ARRAY(NAME),U,2) S VALUE=$$SETVURN(FIELD,VALUE)
"RTN","HMPUTILS",132,0)
 .S ARRAY(NAME)=VALUE
"RTN","HMPUTILS",133,0)
 Q
"RTN","HMPUTILS",134,0)
 ;
"RTN","HMPUTILS",135,0)
 ;
"RTN","HMPUTILS",136,0)
SETPROV(NODE,PROV) ; -- providers
"RTN","HMPUTILS",137,0)
 S PROV("providerUid")=$$SETUID("user",,+NODE),PROV("providerName")=$P(NODE,U,2) Q
"RTN","HMPUTILS",138,0)
 ;
"RTN","HMPUTILS",139,0)
SETUID(DOMAIN,PAT,ID,ADDDATA) ; function, UID string
"RTN","HMPUTILS",140,0)
 N RESULT,SYS
"RTN","HMPUTILS",141,0)
 S SYS=$S($D(HMPSYS):HMPSYS,1:$$SYS^HMPUTILS)
"RTN","HMPUTILS",142,0)
 S RESULT="urn:va:"_DOMAIN_":"_SYS_":"_$S($G(PAT):PAT_":",1:"")_ID
"RTN","HMPUTILS",143,0)
 I $L($G(ADDDATA)) S RESULT=RESULT_":"_ADDDATA
"RTN","HMPUTILS",144,0)
 Q RESULT
"RTN","HMPUTILS",145,0)
 ;
"RTN","HMPUTILS",146,0)
 ;
"RTN","HMPUTILS",147,0)
SETFCURN(DOMAIN,FACILITY,VALUE) ; function, create facility URN
"RTN","HMPUTILS",148,0)
 Q "urn:va:"_DOMAIN_":"_FACILITY_":"_VALUE
"RTN","HMPUTILS",149,0)
 ;
"RTN","HMPUTILS",150,0)
 ;
"RTN","HMPUTILS",151,0)
SETVURN(DOMAIN,VALUE) ; function, create VA urn
"RTN","HMPUTILS",152,0)
 Q "urn:va:"_DOMAIN_":"_VALUE
"RTN","HMPUTILS",153,0)
 ;
"RTN","HMPUTILS",154,0)
SYS(NAME) ; -- return hashed system name from HMP SYSTEM NAME parameter, or calculate from NAME parameter if it exists
"RTN","HMPUTILS",155,0)
 ; DE4463 4/22/2016 CK - changed HMP routines to all call this function
"RTN","HMPUTILS",156,0)
 ;  SYS^HMPUTILS returns a 4 digit hashed site, padded with leading zeros
"RTN","HMPUTILS",157,0)
 N SYS
"RTN","HMPUTILS",158,0)
 S SYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPUTILS",159,0)
 I '$L($G(NAME)),'$L(SYS) Q $$SYS($$KSP^XUPARAM("WHERE"))       ; r2.0 install workaround: if no parameter AND no HMP SYSTEM NAME, then calculate and return using domain name
"RTN","HMPUTILS",160,0)
 I '$L($G(NAME)) Q SYS                                        ; else return HMP SYSTEM NAME parameter
"RTN","HMPUTILS",161,0)
 Q $TR($J($$BASE^XLFUTL($$CRC16^XLFCRC(NAME),10,16),4)," ",0) ; else calculate from parameter
"RTN","HMPUTILS",162,0)
 ;
"RTN","HMPUTILS",163,0)
 ;
"RTN","HMPUTILS",164,0)
SETNCS(CODESET,VALUE) ; -- create national codeset URN
"RTN","HMPUTILS",165,0)
 Q "urn:"_CODESET_":"_VALUE
"RTN","HMPUTILS",166,0)
 ;
"RTN","HMPUTILS",167,0)
JSONDT(X) ; function, convert FileMan date-time to HL7 date-time for JSON
"RTN","HMPUTILS",168,0)
 N HL7DT,T,Y
"RTN","HMPUTILS",169,0)
 ;DE3116, 12 April 2016 function updated to handle FM date problems
"RTN","HMPUTILS",170,0)
 ; T indicates that a time was included
"RTN","HMPUTILS",171,0)
 S T=0 I $E(X,8)=".",$E(X,6,7) S T=1  ; if there's a time it must be a precise date
"RTN","HMPUTILS",172,0)
 S Y=$S(T:X,1:X\1)  ; strip time if imprecise date
"RTN","HMPUTILS",173,0)
 I T,($E(Y,9,10)>23)!($E(Y,11,12)>59)!($E(Y,13,14)>59) S Y=$$FMADD^XLFDT(Y,0,0,0,0) ;DE3116 ASF 04/09/16 allows for hrs >24 and mins >60
"RTN","HMPUTILS",174,0)
 S HL7DT=$$FMTHL7^HMPSTMP(Y)  ; DE5016
"RTN","HMPUTILS",175,0)
 S:T HL7DT=$E(HL7DT_"000000",1,14)  ; if time passed, result must be 14 chars.
"RTN","HMPUTILS",176,0)
 Q HL7DT
"RTN","HMPUTILS",177,0)
 ;
"RTN","HMPUTILS",178,0)
 ;
"RTN","HMPUTILS",179,0)
FACILITY(X,Y) ; -- add facility info to array for JSON
"RTN","HMPUTILS",180,0)
 ;  X=STATION NUMBER^STATION NAME
"RTN","HMPUTILS",181,0)
 ;  Y=Variable array name
"RTN","HMPUTILS",182,0)
 ; >D FACILITY^HMPUTILS("500^CAMP MASTER","LAB")
"RTN","HMPUTILS",183,0)
 ;
"RTN","HMPUTILS",184,0)
 S @Y@("facilityCode")=$P(X,"^")
"RTN","HMPUTILS",185,0)
 S @Y@("facilityName")=$P(X,"^",2)
"RTN","HMPUTILS",186,0)
 Q
"RTN","HMPUTILS",187,0)
 ;
"RTN","HMPUTILS",188,0)
 ;
"RTN","HMPUTILS",189,0)
VERSRV()   ; function, Return server version of option name
"RTN","HMPUTILS",190,0)
 N HMPLST,VAL
"RTN","HMPUTILS",191,0)
 D FIND^DIC(19,"",1,"X","HMP UI CONTEXT",1,,,,"HMPLST")
"RTN","HMPUTILS",192,0)
 S VAL=$G(HMPLST("DILIST","ID",1,1))
"RTN","HMPUTILS",193,0)
 Q $$UP^XLFSTR($P(VAL,"version ",2))
"RTN","HMPUTILS",194,0)
 ;
"RTN","HMPUTILS",195,0)
 ;
"RTN","HMPUTILS",196,0)
VERCMP(CUR,VAL) ; Returns 1 if CUR<VAL, -1 if CUR>VAL, 0 if equal
"RTN","HMPUTILS",197,0)
 N CURMAJOR,CURMINOR,CURSNAP,VALMAJOR,VALMINOR,VALSNAP
"RTN","HMPUTILS",198,0)
 S CURMAJOR=$P(CUR,"-"),CURMINOR=$P(CUR,"-",2),CURSNAP=$E($P(CUR,"-",3),1,4)="SNAP"
"RTN","HMPUTILS",199,0)
 S VALMAJOR=$P(VAL,"-"),VALMINOR=$P(VAL,"-",2),VALSNAP=$E($P(VAL,"-",3),1,4)="SNAP"
"RTN","HMPUTILS",200,0)
 I $E(VALMINOR)="P" S VALMINOR=$E(VALMINOR,2,99)     ; "P"ilot versions (old)
"RTN","HMPUTILS",201,0)
 I $E(CURMINOR)="P" S CURMINOR=$E(VALMINOR,2,99)
"RTN","HMPUTILS",202,0)
 I $E(VALMINOR)="S" S VALMINOR=$E(VALMINOR,2,99)*10  ; "S"print versions
"RTN","HMPUTILS",203,0)
 I $E(CURMINOR)="S" S CURMINOR=$E(CURMINOR,2,99)*10
"RTN","HMPUTILS",204,0)
 Q:VALMAJOR>CURMAJOR 1   Q:VALMAJOR<CURMAJOR -1  ; compare major versions
"RTN","HMPUTILS",205,0)
 Q:VALMINOR>CURMINOR 1   Q:VALMINOR<CURMINOR -1  ; compare minor versions
"RTN","HMPUTILS",206,0)
 Q:(CURSNAP&'VALSNAP) 1  Q:(VALSNAP&'CURSNAP) -1 ; "SNAPSHOT" < released
"RTN","HMPUTILS",207,0)
 Q 0
"RTN","HMPUTILS",208,0)
 ;
"RTN","HMPUTILS",209,0)
 ;
"RTN","HMPUTILS",210,0)
WDWH() ; What kind of data exist?, DE6644, 7 September 2016
"RTN","HMPUTILS",211,0)
 ; HMPA   = loop counter
"RTN","HMPUTILS",212,0)
 ; HMPB   = node information
"RTN","HMPUTILS",213,0)
 ; HMPOPD = 1 if operational data exists, 0 otherwise
"RTN","HMPUTILS",214,0)
 ; HMPPAT = 1 if patient data exist, 0 otherwise
"RTN","HMPUTILS",215,0)
 ; HMPRET = return variable - 0 if no data exist
"RTN","HMPUTILS",216,0)
 ;                            1 if ONLY patient data exist
"RTN","HMPUTILS",217,0)
 ;                            2 if ONLY operational data exist
"RTN","HMPUTILS",218,0)
 ;                            3 if BOTH patient and operational data exist
"RTN","HMPUTILS",219,0)
 N HMPA,HMPB,HMPOPD,HMPPAT,HMPRET
"RTN","HMPUTILS",220,0)
 S (HMPOPD,HMPPAT,HMPRET)=0,HMPA="HMPFX"
"RTN","HMPUTILS",221,0)
 ; iterate through HMP* data only
"RTN","HMPUTILS",222,0)
 F  S HMPA=$O(^XTMP(HMPA)) Q:'($E(HMPA,1,3)="HMP")  D  Q:HMPOD&HMPPAT  ; no need to continue if both flags set
"RTN","HMPUTILS",223,0)
 . S HMPB=$P(HMPA,"~",3) I HMPB="OPD" S HMPOPD=1 Q  ; operational data
"RTN","HMPUTILS",224,0)
 . S:HMPB=+HMPB HMPPAT=1  ; patient data
"RTN","HMPUTILS",225,0)
 I HMPPAT,'HMPOPD S HMPRET=1  ; ONLY patient data
"RTN","HMPUTILS",226,0)
 I 'HMPPAT,HMPOPD S HMPRET=2  ; ONLY operational data
"RTN","HMPUTILS",227,0)
 I HMPPAT,HMPOPD S HMPRET=3   ; patient & operational data
"RTN","HMPUTILS",228,0)
 Q HMPRET
"RTN","HMPUTILS",229,0)
 ;
"RTN","HMPUTILS",230,0)
NODATA(A) ; boolean function, is there any patient data for stream in A?; JD - 2/23/15
"RTN","HMPUTILS",231,0)
 ; Returns 1 if there is no patient data, 0 Otherwise, DE6644, 7 September 2016
"RTN","HMPUTILS",232,0)
 ; HMPA = Loop counter
"RTN","HMPUTILS",233,0)
 ; HMPF = Flag indicating data found
"RTN","HMPUTILS",234,0)
 N HMPA,HMPF
"RTN","HMPUTILS",235,0)
 S HMPF=0,HMPA=""
"RTN","HMPUTILS",236,0)
 F  S HMPA=$O(^XTMP(A,0,"count",HMPA)) Q:HMPF!(HMPA="")  S:+$G(^XTMP(A,0,"count",HMPA))>0 HMPF=1
"RTN","HMPUTILS",237,0)
 Q 'HMPF  ; return opposite of flag
"RTN","HMPUTILS",238,0)
 ;
"RTN","HMPUTILS",239,0)
GETSIZE(HMPMODE,HMPSRVN) ; function, returns aggregate extract size for extracts waiting to be sent to HMP servers
"RTN","HMPUTILS",240,0)
 ; returns: total size ^ object count
"RTN","HMPUTILS",241,0)
 ; HMPMODE = estimate - use estimated domain average sizes (default)
"RTN","HMPUTILS",242,0)
 ;           actual - walk though object nodes to calculate using $LENGTH
"RTN","HMPUTILS",243,0)
 ; HMPSRVN = name of HMP server [optional - defaults to all HMP servers]
"RTN","HMPUTILS",244,0)
 ; DE7401, move function here, 20 January 2017
"RTN","HMPUTILS",245,0)
 ; loop through extracts for server(s) 
"RTN","HMPUTILS",246,0)
 N BATCH,DOMAIN,L,OBJCNT,OBJS,OBJSIZES,ROOT,TASK,TOTAL
"RTN","HMPUTILS",247,0)
 S HMPMODE=$G(HMPMODE,"estimate")  ; default to estimate
"RTN","HMPUTILS",248,0)
 S:'("^estimate^actual^")[U_HMPMODE_U HMPMODE="estimate"  ; valid mode check
"RTN","HMPUTILS",249,0)
 I HMPMODE="estimate" D GETLST^XPAR(.OBJSIZES,"PKG","HMP DOMAIN SIZES","I")  ; domain sizes needed for estimate
"RTN","HMPUTILS",250,0)
 ; object counter, total, root node, batch to check, L is length of ROOT for loop exit
"RTN","HMPUTILS",251,0)
 S (OBJCNT,TOTAL)=0,ROOT="HMPFX~"_$S($G(HMPSRVN)]"":HMPSRVN_"~",1:""),BATCH=ROOT,L=$L(ROOT)
"RTN","HMPUTILS",252,0)
 F  S BATCH=$O(^XTMP(BATCH)) Q:$E(BATCH,1,L)'=ROOT  D
"RTN","HMPUTILS",253,0)
 . S TASK=0 F  S TASK=$O(^XTMP(BATCH,TASK)) Q:'TASK  S DOMAIN="" F  S DOMAIN=$O(^XTMP(BATCH,TASK,DOMAIN)) Q:DOMAIN=""  D
"RTN","HMPUTILS",254,0)
 ..  S OBJS=+$O(^XTMP(BATCH,TASK,DOMAIN," "),-1),OBJCNT=OBJCNT+OBJS
"RTN","HMPUTILS",255,0)
 ..  I HMPMODE="estimate" S TOTAL=TOTAL+(OBJS*$G(OBJSIZES($P(DOMAIN,"#")),1000)) Q  ; use domain sizes for estimate & quit
"RTN","HMPUTILS",256,0)
 ..  S TOTAL=TOTAL+$$WALK(BATCH,TASK,DOMAIN)  ; fall through for actual
"RTN","HMPUTILS",257,0)
 Q TOTAL_"^"_OBJCNT
"RTN","HMPUTILS",258,0)
 ;
"RTN","HMPUTILS",259,0)
WALK(BATCH,TASK,DOMAIN) ; function, walk through domain objects in task to get actual size
"RTN","HMPUTILS",260,0)
 N NODE,OBJ,SIZE
"RTN","HMPUTILS",261,0)
 S (OBJ,SIZE)=0
"RTN","HMPUTILS",262,0)
 F  S OBJ=$O(^XTMP(BATCH,TASK,DOMAIN,OBJ)) Q:'OBJ  D
"RTN","HMPUTILS",263,0)
 . S NODE=0 F  S NODE=$O(^XTMP(BATCH,TASK,DOMAIN,OBJ,NODE)) Q:'NODE  S SIZE=SIZE+$L(^(NODE))
"RTN","HMPUTILS",264,0)
 Q SIZE  ; return size in bytes
"RTN","HMPUTILS",265,0)
 ;
"RTN","HMPUTILS",266,0)
GETMAX() ; function, return the max allowable aggregate extract size in bytes
"RTN","HMPUTILS",267,0)
 ;
"RTN","HMPUTILS",268,0)
 N HMPLIM S HMPLIM=$$GET^XPAR("SYS","HMP EXTRACT DISK SIZE LIMIT")*1000000
"RTN","HMPUTILS",269,0)
 Q $S(HMPLIM>999999:HMPLIM,1:20000000)  ; if not set to 1 million minimum, return 20mb characters
"RTN","HMPUTILS",270,0)
 ;
"SEC","^DIC",800000,800000,0,"AUDIT")
@
"SEC","^DIC",800000,800000,0,"DD")
@
"SEC","^DIC",800000,800000,0,"DEL")
@
"SEC","^DIC",800000,800000,0,"LAYGO")
@
"SEC","^DIC",800000,800000,0,"RD")
@
"SEC","^DIC",800000,800000,0,"WR")
@
"VER")
8.0^22.2
"^DD",800000,800000,0)
FIELD^^.09^13
"^DD",800000,800000,0,"DDA")
N
"^DD",800000,800000,0,"DT")
3170815
"^DD",800000,800000,0,"IX","B",800000,.01)

"^DD",800000,800000,0,"NM","HMP SUBSCRIPTION")

"^DD",800000,800000,0,"VRPK")
HMP
"^DD",800000,800000,.01,0)
SERVER^RF^^0;1^K:$L(X)>64!($L(X)<1)!'(X'?1P.E) X
"^DD",800000,800000,.01,1,0)
^.1^^-1
"^DD",800000,800000,.01,1,1,0)
800000^B
"^DD",800000,800000,.01,1,1,1)
S ^HMP(800000,"B",$E(X,1,64),DA)=""
"^DD",800000,800000,.01,1,1,2)
K ^HMP(800000,"B",$E(X,1,64),DA)
"^DD",800000,800000,.01,3)
Answer must be 1-64 characters in length.
"^DD",800000,800000,.01,21,0)
^.001^1^1^3140212^^^^
"^DD",800000,800000,.01,21,1,0)
This is the name of the client system that is subscribing to data updates.
"^DD",800000,800000,.01,"DT")
3141028
"^DD",800000,800000,.02,0)
LASTUPDATE^F^^0;2^K:$L(X)>100!($L(X)<3) X
"^DD",800000,800000,.02,3)
Answer must be 3-100 characters in length. (Do not modify.)
"^DD",800000,800000,.02,21,0)
^^3^3^3110908^
"^DD",800000,800000,.02,21,1,0)
This field holds a flag, indicating if this URL should be notified via the
"^DD",800000,800000,.02,21,2,0)
nightly scheduled option HMP APPOINTMENTS of the list of patients expected
"^DD",800000,800000,.02,21,3,0)
to be seen tomorrow.
"^DD",800000,800000,.02,"DT")
3160719
"^DD",800000,800000,.03,0)
OPERATION DATA^S^0:UNSUBCRIBED;1:SUBSCRIBED;2:INITIALIZED;^0;3^Q
"^DD",800000,800000,.03,3)
Select the type of notification for this URL. (Do Not Modify)
"^DD",800000,800000,.03,21,0)
^^2^2^3160720^
"^DD",800000,800000,.03,21,1,0)
This field holds a flag, indicating if this URL should be notified via http
"^DD",800000,800000,.03,21,2,0)
when a patient is admitted.
"^DD",800000,800000,.03,"DT")
3160720
"^DD",800000,800000,.04,0)
REPEAT POLLS^NJ8,0^^0;4^K:+X'=X!(X>99999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",800000,800000,.04,3)
Type a number between 0 and 99999999, 0 decimal digits.
"^DD",800000,800000,.04,21,0)
^^2^2^3140404^
"^DD",800000,800000,.04,21,1,0)
This tracks the number of times the same "last update" value has been
"^DD",800000,800000,.04,21,2,0)
repeated.  A high repeat may be normal if data are not changing.
"^DD",800000,800000,.04,"DT")
3141028
"^DD",800000,800000,.05,0)
DISK USAGE STATUS^S^0:WITHIN LIMIT;1:EXCEEDED LIMIT;^0;5^Q
"^DD",800000,800000,.05,3)
Enter current status of eHMP disk usage
"^DD",800000,800000,.05,21,0)
^^5^5^3150624^
"^DD",800000,800000,.05,21,1,0)
The DISK USAGE STATUS flag is an indicator set automatically in the eHMP 
"^DD",800000,800000,.05,21,2,0)
subscription process. If the disk space usage in global ^XTMP by eHMP 
"^DD",800000,800000,.05,21,3,0)
subscriptions is above the threshold in the HMP EXTRACT DISK SIZE LIMIT 
"^DD",800000,800000,.05,21,4,0)
is exceeded this flag will be set. Similarly the flag is reset if usage 
"^DD",800000,800000,.05,21,5,0)
later falls below the threshold.
"^DD",800000,800000,.05,23,0)
^^4^4^3150624^
"^DD",800000,800000,.05,23,1,0)
The field is updated from subscription process by the STATUS^HMPMETA
"^DD",800000,800000,.05,23,2,0)
routine.
"^DD",800000,800000,.05,23,3,0)
 
"^DD",800000,800000,.05,23,4,0)
The field is referenced by the fetch process using CHECK^HMPMETA routine.
"^DD",800000,800000,.05,"DT")
3150624
"^DD",800000,800000,.06,0)
DISK USAGE STATUS TIME^D^^0;6^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",800000,800000,.06,3)
Enter the time the DISK USAGE STATUS field was updated.
"^DD",800000,800000,.06,21,0)
^^6^6^3150624^
"^DD",800000,800000,.06,21,1,0)
The DISK USAGE STATUS TIME is a field set automatically in the eHMP 
"^DD",800000,800000,.06,21,2,0)
subscription process. If the disk space usage in global ^XTMP by eHMP 
"^DD",800000,800000,.06,21,3,0)
subscriptions is above the threshold in the HMP EXTRACT DISK SIZE LIMIT is
"^DD",800000,800000,.06,21,4,0)
exceeded the DISK USAGE STATUS field will be set and the time of the 
"^DD",800000,800000,.06,21,5,0)
change recorded in this field . Similarly the flag and time fields will be
"^DD",800000,800000,.06,21,6,0)
reset if usage later falls below the threshold.
"^DD",800000,800000,.06,23,0)
^^4^4^3150624^
"^DD",800000,800000,.06,23,1,0)
The field is updated from subscription process by the STATUS^HMPMETA
"^DD",800000,800000,.06,23,2,0)
routine.
"^DD",800000,800000,.06,23,3,0)
 
"^DD",800000,800000,.06,23,4,0)
The field is referenced by the fetch process using CHECK^HMPMETA routine.
"^DD",800000,800000,.06,"DT")
3150624
"^DD",800000,800000,.07,0)
DEFAULT?^S^1:YES;0:NO;^0;7^Q
"^DD",800000,800000,.07,3)
Enter 1 for the default eHMP primary subscription.
"^DD",800000,800000,.07,21,0)
^^5^5^3160720^
"^DD",800000,800000,.07,21,1,0)
This field identifies the primary eHMP subscription for this server. It 
"^DD",800000,800000,.07,21,2,0)
identifies this server as the default for operations such as selecting a 
"^DD",800000,800000,.07,21,3,0)
subscription to monitor in the option eHMP Dashboard [HMPMON DASHBOARD].
"^DD",800000,800000,.07,21,4,0)
Only one server at a time can be set as the default. If this file contains
"^DD",800000,800000,.07,21,5,0)
only one record, then it will be used automatically as the default.
"^DD",800000,800000,.07,23,0)
^^2^2^3160719^
"^DD",800000,800000,.07,23,1,0)
Used in $$GETSRVR^HMPMOND to identify the default subscription if this 
"^DD",800000,800000,.07,23,2,0)
file contains more than one.
"^DD",800000,800000,.07,"DT")
3160720
"^DD",800000,800000,.08,0)
TIMEOUT^RNJ4,0^^0;8^K:+X'=X!(X>9999)!(X<1)!(X?.E1"."1N.N) X
"^DD",800000,800000,.08,3)
Type a number between 1 and 9999, 0 decimal digits.
"^DD",800000,800000,.08,21,0)
^^1^1^3170215^
"^DD",800000,800000,.08,21,1,0)
The number of seconds allowed for a batch to be returned from VxSync with a status update
"^DD",800000,800000,.08,"DT")
3170215
"^DD",800000,800000,.09,0)
TIMEOUT RETRY COUNT^RNJ4,0^^0;9^K:+X'=X!(X>9999)!(X<1)!(X?.E1"."1N.N) X
"^DD",800000,800000,.09,3)
Type a number between 1 and 9999, 0 decimal digits.
"^DD",800000,800000,.09,21,0)
^^1^1^3170215^
"^DD",800000,800000,.09,21,1,0)
The number of times a batch can be allocated to a poller before lockdown occurs
"^DD",800000,800000,.09,"DT")
3170215
"^DD",800000,800000,.1,0)
URL^F^^.1;1^K:$L(X)>250!($L(X)<1) X
"^DD",800000,800000,.1,3)
Answer must be 1-250 characters in length.
"^DD",800000,800000,.1,21,0)
^^1^1^3160719^
"^DD",800000,800000,.1,21,1,0)
This is the fully qualified URL to call when updates are available.
"^DD",800000,800000,.1,"DT")
3160719
"^DD",800000,800000,1,0)
PATIENT^800000.01P^^1;0
"^DD",800000,800000,1,21,0)
^.001^1^1^3160718^^^^
"^DD",800000,800000,1,21,1,0)
This is a patient that will be monitored for new data and updates.
"^DD",800000,800000,2,0)
ROSTER^800000.02P^^2;0
"^DD",800000,800000,2,21,0)
^.001^1^1^3130417^^^^
"^DD",800000,800000,2,21,1,0)
This is a roster that will be monitored for new patients and updates.
"^DD",800000,800000,2,"DT")
3130417
"^DD",800000,800000,91,0)
CONCURRENT UPDATE CALLS^NJ3,0^^91;1^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1N.N) X
"^DD",800000,800000,91,3)
Type a number between 0 and 999, 0 decimal digits.
"^DD",800000,800000,91,21,0)
^^3^3^3150218^
"^DD",800000,800000,91,21,1,0)
This field is used to track the number of simultaneous calls to 
"^DD",800000,800000,91,21,2,0)
getPtUpdates in API^HMPDJFS. This allows checkHealth to report if a 
"^DD",800000,800000,91,21,3,0)
getPtUpdates RPC is in progress.
"^DD",800000,800000,91,"DT")
3150218
"^DD",800000,800000.01,0)
PATIENT SUB-FIELD^^3^4
"^DD",800000,800000.01,0,"DT")
3160720
"^DD",800000,800000.01,0,"NM","PATIENT")

"^DD",800000,800000.01,0,"UP")
800000
"^DD",800000,800000.01,.01,0)
PATIENT NAME^MP2'X^DPT(^0;1^S DINUM=X
"^DD",800000,800000.01,.01,1,0)
^.1^^0
"^DD",800000,800000.01,.01,3)
Enter the name of a patient to be tracked.
"^DD",800000,800000.01,.01,21,0)
^.001^1^1^3140212^^
"^DD",800000,800000.01,.01,21,1,0)
This is the name of the patient being monitored for new data.
"^DD",800000,800000.01,.01,"DT")
3140226
"^DD",800000,800000.01,2,0)
STATUS^S^0:UNINITIALIZED;1:INITIALIZING;2:INITIALIZED;^0;2^Q
"^DD",800000,800000.01,2,3)
Select the status for a patient sync. (Do Not Modify)
"^DD",800000,800000.01,2,21,0)
^^4^4^3160719^
"^DD",800000,800000.01,2,21,1,0)
This field tracks the initialization progress of the patient.  When a 
"^DD",800000,800000.01,2,21,2,0)
patient is initially subscribed, they are added to this multiple.  The 
"^DD",800000,800000.01,2,21,3,0)
status is "1" when the extracts start and "2" when they finish.  At that 
"^DD",800000,800000.01,2,21,4,0)
point, freshness updates are moved into the stream.
"^DD",800000,800000.01,2,"DT")
3160720
"^DD",800000,800000.01,3,0)
STATUS DATE/TIME^D^^0;3^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.01,3,.1)

"^DD",800000,800000.01,3,3)
Enter the date/time the status changed.
"^DD",800000,800000.01,3,21,0)
^^1^1^3160722^
"^DD",800000,800000.01,3,21,1,0)
This is the date/time of the last change in extract status.
"^DD",800000,800000.01,3,"DT")
3160722
"^DD",800000,800000.01,4,0)
ORDERS^800000.14PA^^1;0
"^DD",800000,800000.01,4,21,0)
^^7^7^3160719^
"^DD",800000,800000.01,4,21,1,0)
This multiple contains order data needed by eHMP data storage. 
"^DD",800000,800000.01,4,21,2,0)
The data in the sub-file
"^DD",800000,800000.01,4,21,3,0)
are stored based on the date and time, including seconds,
"^DD",800000,800000.01,4,21,4,0)
for an action with the order. 
"^DD",800000,800000.01,4,21,5,0)
 
"^DD",800000,800000.01,4,21,6,0)
All data in this sub-file are to be manipulated by software only.
"^DD",800000,800000.01,4,21,7,0)
Users should NOT edit any data without consulting with the developers.
"^DD",800000,800000.02,0)
ROSTER SUB-FIELD^^2^2
"^DD",800000,800000.02,0,"NM","ROSTER")

"^DD",800000,800000.02,0,"UP")
800000
"^DD",800000,800000.02,.01,0)
NAME^MP800001.2'X^HMPROSTR(800001.2,^0;1^S DINUM=X
"^DD",800000,800000.02,.01,1,0)
^.1^^0
"^DD",800000,800000.02,.01,3)
Enter the name of a roster to be tracked.
"^DD",800000,800000.02,.01,21,0)
^.001^1^1^3130417^^
"^DD",800000,800000.02,.01,21,1,0)
This is the name of the roster being monitored for new patients.
"^DD",800000,800000.02,.01,"DT")
3130417
"^DD",800000,800000.02,2,0)
ON^S^1:YES;0:NO;^0;2^Q
"^DD",800000,800000.02,2,3)
Enter YES to turn on data tracking for this roster.
"^DD",800000,800000.02,2,21,0)
^.001^3^3^3130417^^
"^DD",800000,800000.02,2,21,1,0)
This field turns on the Data Monitor for this roster and client system.
"^DD",800000,800000.02,2,21,2,0)
If ON=true, a new snapshot of this roster will be sent to the client
"^DD",800000,800000.02,2,21,3,0)
when new data updates are requested.
"^DD",800000,800000.02,2,"DT")
3130417
"^DD",800000,800000.14,0)
ORDERS SUB-FIELD^^1.01^17
"^DD",800000,800000.14,0,"DT")
3160720
"^DD",800000,800000.14,0,"IX","B",800000.14,.01)

"^DD",800000,800000.14,0,"NM","ORDERS")

"^DD",800000,800000.14,0,"UP")
800000.01
"^DD",800000,800000.14,.01,0)
ORDER NUMBER^P100'X^OR(100,^0;1^S DINUM=X
"^DD",800000,800000.14,.01,1,0)
^.1
"^DD",800000,800000.14,.01,1,1,0)
800000.14^B
"^DD",800000,800000.14,.01,1,1,1)
S ^HMP(800000,DA(2),1,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",800000,800000.14,.01,1,1,2)
K ^HMP(800000,DA(2),1,DA(1),1,"B",$E(X,1,30),DA)
"^DD",800000,800000.14,.01,3)
Enter the Order number.
"^DD",800000,800000.14,.01,21,0)
^^5^5^3160719^
"^DD",800000,800000.14,.01,21,1,0)
All the data in this sub-file are entered programmatically.
"^DD",800000,800000.14,.01,21,2,0)
 
"^DD",800000,800000.14,.01,21,3,0)
The data are used to create timestamps with seconds in order to correctly 
"^DD",800000,800000.14,.01,21,4,0)
sequence orders activities in the eHMP system. Two activities on an order 
"^DD",800000,800000.14,.01,21,5,0)
may occur within the same minute.
"^DD",800000,800000.14,.01,"DT")
3160719
"^DD",800000,800000.14,.02,0)
CREATE DATE/TIME^D^^0;2^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.14,.02,3)
Enter the date and time the order was created.
"^DD",800000,800000.14,.02,21,0)
^.001^2^2^3151217^^^
"^DD",800000,800000.14,.02,21,1,0)
The date/time to include seconds that the order was created.
"^DD",800000,800000.14,.02,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.02,"DT")
3151216
"^DD",800000,800000.14,.03,0)
SIGNED BY^P200'^VA(200,^0;3^Q
"^DD",800000,800000.14,.03,3)
Enter the User who signed the order.
"^DD",800000,800000.14,.03,21,0)
^.001^2^2^3151217^^
"^DD",800000,800000.14,.03,21,1,0)
The person signing the order.
"^DD",800000,800000.14,.03,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.03,"DT")
3151216
"^DD",800000,800000.14,.04,0)
SIGNED DATE/TIME^D^^0;4^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.14,.04,3)
Enter the date and time the order was signed.
"^DD",800000,800000.14,.04,21,0)
^^2^2^3160719^
"^DD",800000,800000.14,.04,21,1,0)
The date/time with seconds the order was signed. This field is entered
"^DD",800000,800000.14,.04,21,2,0)
programmatically.
"^DD",800000,800000.14,.04,"DT")
3160719
"^DD",800000,800000.14,.05,0)
VERIFYING NURSE^P200'^VA(200,^0;5^Q
"^DD",800000,800000.14,.05,3)
Enter the nurse who verified the order.
"^DD",800000,800000.14,.05,21,0)
^^2^2^3160719^
"^DD",800000,800000.14,.05,21,1,0)
The nurse verifying the order.
"^DD",800000,800000.14,.05,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.05,"DT")
3160719
"^DD",800000,800000.14,.06,0)
NURSE VERIFY DATE/TIME^D^^0;6^S %DT="ESTX" D ^%DT S X=Y K:X<1 X
"^DD",800000,800000.14,.06,3)
Enter the date and time the nurse verified the order.
"^DD",800000,800000.14,.06,21,0)
^^2^2^3160726^
"^DD",800000,800000.14,.06,21,1,0)
The date/time, including seconds, when the nurse verified the order. This
"^DD",800000,800000.14,.06,21,2,0)
field is entered programmatically.
"^DD",800000,800000.14,.06,"DT")
3160726
"^DD",800000,800000.14,.07,0)
VERIFYING CLERK^P200'^VA(200,^0;7^Q
"^DD",800000,800000.14,.07,3)
Enter the clerk who verified the order.
"^DD",800000,800000.14,.07,21,0)
^.001^2^2^3151217^^^
"^DD",800000,800000.14,.07,21,1,0)
The clerk who verified the order.
"^DD",800000,800000.14,.07,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.07,"DT")
3151216
"^DD",800000,800000.14,.08,0)
CLERK VERIFY DATE/TIME^D^^0;8^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.14,.08,3)
Enter the date and time the clerk verified the order.
"^DD",800000,800000.14,.08,21,0)
^.001^2^2^3151217^^
"^DD",800000,800000.14,.08,21,1,0)
The date/time, including seconds, the clerk verified the order.
"^DD",800000,800000.14,.08,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.08,"DT")
3151217
"^DD",800000,800000.14,.09,0)
REVIEWED BY^P200'^VA(200,^0;9^Q
"^DD",800000,800000.14,.09,3)
Enter the user who reviewed the order.
"^DD",800000,800000.14,.09,21,0)
^.001^2^2^3151217^^^
"^DD",800000,800000.14,.09,21,1,0)
The user who reviewed the order.
"^DD",800000,800000.14,.09,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.09,"DT")
3151216
"^DD",800000,800000.14,.1,0)
REVIEWED DATE/TIME^D^^0;10^S %DT="ESTR" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.14,.1,3)
Enter the date and time the order was reviewed.
"^DD",800000,800000.14,.1,21,0)
^^2^2^3160719^
"^DD",800000,800000.14,.1,21,1,0)
The date/time, including seconds, that the order was reviewed. This field
"^DD",800000,800000.14,.1,21,2,0)
is entered programmatically.
"^DD",800000,800000.14,.1,"DT")
3160719
"^DD",800000,800000.14,.11,0)
RELEASED BY^P200'^VA(200,^0;11^Q
"^DD",800000,800000.14,.11,3)
Enter the user who released the order.
"^DD",800000,800000.14,.11,21,0)
^.001^2^2^3151217^^
"^DD",800000,800000.14,.11,21,1,0)
The user who released the order.
"^DD",800000,800000.14,.11,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.11,"DT")
3151216
"^DD",800000,800000.14,.12,0)
RELEASED DATE/TIME^D^^0;12^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.14,.12,3)
Enter the date and time the order was released.
"^DD",800000,800000.14,.12,21,0)
^^2^2^3160719^
"^DD",800000,800000.14,.12,21,1,0)
The date/time, including seconds, when the order was released. This field
"^DD",800000,800000.14,.12,21,2,0)
is entered programmatically.
"^DD",800000,800000.14,.12,"DT")
3160719
"^DD",800000,800000.14,.13,0)
PURGE DATE/TIME^D^^0;13^S %DT="ESTR" D ^%DT S X=Y K:X<1 X
"^DD",800000,800000.14,.13,3)
The date this order can be purged from the file.
"^DD",800000,800000.14,.13,21,0)
^.001^2^2^3151217^^
"^DD",800000,800000.14,.13,21,1,0)
The earliest date/time the order data can be purged.
"^DD",800000,800000.14,.13,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.13,"DT")
3160720
"^DD",800000,800000.14,.14,0)
ORDER ACTION^S^NW:NEW;DC:DISCONTINUED;HD:HOLD;RL:RELEASE HOLD;XX:CHANGE;VA:VALIDATE;IP:TRANSFERRED TO IP;OP:TRANSFERRED TO OP;^0;14^Q
"^DD",800000,800000.14,.14,3)
Enter the action performed on this order.
"^DD",800000,800000.14,.14,21,0)
^.001^2^2^3151217^^^
"^DD",800000,800000.14,.14,21,1,0)
The action taken on the order.
"^DD",800000,800000.14,.14,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.14,"DT")
3151216
"^DD",800000,800000.14,.15,0)
ACTION DATE/TIME^D^^0;15^S %DT="ESTR" D ^%DT S X=Y K:X<1 X
"^DD",800000,800000.14,.15,3)
(No range limit on date)
"^DD",800000,800000.14,.15,21,0)
^^1^1^3160719^
"^DD",800000,800000.14,.15,21,1,0)
The date/time of the order action. This field is entered programmatically.
"^DD",800000,800000.14,.15,"DT")
3160720
"^DD",800000,800000.14,1.01,0)
TRACKING START^DI^^1;1^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.14,1.01,3)
Enter the date and time that eHMP started tracking this Order.
"^DD",800000,800000.14,1.01,21,0)
^^2^2^3160126^
"^DD",800000,800000.14,1.01,21,1,0)
This field is set to NOW when the Order is first added to this sub-file.
"^DD",800000,800000.14,1.01,21,2,0)
It is uneditable.
"^DD",800000,800000.14,1.01,"DT")
3160126
"^DD",800000,800000.14,2,0)
ORDER FLAG/UNFLAG DATE/TIME^800000.142DA^^2;0
"^DD",800000,800000.14,2,21,0)
^^1^1^3160719^
"^DD",800000,800000.14,2,21,1,0)
This sub-file contains flagging/unflagging actions on orders.
"^DD",800000,800000.14,2,"DT")
3151216
"^DD",800000,800000.142,0)
ORDER FLAG/UNFLAG DATE/TIME SUB-FIELD^^.04^4
"^DD",800000,800000.142,0,"DT")
3151216
"^DD",800000,800000.142,0,"IX","B",800000.142,.01)

"^DD",800000,800000.142,0,"NM","ORDER FLAG/UNFLAG DATE/TIME")

"^DD",800000,800000.142,0,"UP")
800000.14
"^DD",800000,800000.142,.01,0)
ORDER FLAG/UNFLAG DATE/TIME^D^^0;1^S %DT="ESTR" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.142,.01,1,0)
^.1
"^DD",800000,800000.142,.01,1,1,0)
800000.142^B
"^DD",800000,800000.142,.01,1,1,1)
S ^HMP(800000,DA(3),1,DA(2),1,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",800000,800000.142,.01,1,1,2)
K ^HMP(800000,DA(3),1,DA(2),1,DA(1),2,"B",$E(X,1,30),DA)
"^DD",800000,800000.142,.01,3)
Enter the date and time the order was flagged or unflagged.
"^DD",800000,800000.142,.01,21,0)
^^3^3^3160719^
"^DD",800000,800000.142,.01,21,1,0)
This is the date/time with seconds that an order was flagged /unflagged.
"^DD",800000,800000.142,.01,21,2,0)
This field is entered programmatically. An order can be flagged or
"^DD",800000,800000.142,.01,21,3,0)
unflagged multiple times.
"^DD",800000,800000.142,.01,"DT")
3160719
"^DD",800000,800000.142,.02,0)
FLAG ACTION^S^F:FLAGGED;U:UNFLAGGED;^0;2^Q
"^DD",800000,800000.142,.02,3)
Select the flagged action for this order.
"^DD",800000,800000.142,.02,21,0)
^^2^2^3160718^
"^DD",800000,800000.142,.02,21,1,0)
The flagging action, FLAGGED or UNFLAGGED.
"^DD",800000,800000.142,.02,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.142,.02,"DT")
3160720
"^DD",800000,800000.142,.03,0)
FLAG/UNFLAG USER^P200'^VA(200,^0;3^Q
"^DD",800000,800000.142,.03,3)
Enter the user who flagged or unflagged the order.
"^DD",800000,800000.142,.03,21,0)
^.001^2^2^3151217^^
"^DD",800000,800000.142,.03,21,1,0)
The user who flagged /unflagged the order.
"^DD",800000,800000.142,.03,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.142,.03,"DT")
3151216
"^DD",800000,800000.142,.04,0)
FLAG/UNFLAG REASON^F^^0;4^K:$L(X)>80!($L(X)<1) X
"^DD",800000,800000.142,.04,.1)
REASON FOR FLAGGING /UNFLAGGING
"^DD",800000,800000.142,.04,3)
Answer must be 1-80 characters.
"^DD",800000,800000.142,.04,21,0)
^.001^2^2^3151217^^^
"^DD",800000,800000.142,.04,21,1,0)
This is why the order was flagged /unflagged.
"^DD",800000,800000.142,.04,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.142,.04,"DT")
3151216
"^DIC",800000,800000,0)
HMP SUBSCRIPTION^800000
"^DIC",800000,800000,0,"GL")
^HMP(800000,
"^DIC",800000,800000,"%",0)
^1.005^^0
"^DIC",800000,800000,"%D",0)
^^3^3^3160720^
"^DIC",800000,800000,"%D",1,0)
This file contains the data needed for eHMP data retrieval. The top level 
"^DIC",800000,800000,"%D",2,0)
fields store information about servers know to eHMP. Each patient's 
"^DIC",800000,800000,"%D",3,0)
subscription is stored in #800000.01 sub-file for a server.
"^DIC",800000,"B","HMP SUBSCRIPTION",800000)

**END**
**END**
