Cache for UNIX^INT^git utilities for M^~Format=Cache.S~^RAW
%RO on 17 Mar 2014   4:32 PM
A5AGIT^INT^1^63263,59367.442112^0
A5AGIT ;SLC/KCM -- Utilities for to assist git synchronization
 ;;1.0;GIT Tools;;Feb 8, 2013
 ;
 ; Configuration
 ; ^A5AGIT("default")=default config name
 ; ^A5AGIT(config,"directory")=full directory path where git sees routines
 ; ^A5AGIT(config,"wildcards")=comma delimited namespaces to manage
 ; ^A5AGIT(config,"compareDir")=full directory path for saving compare files
 ; ^A5AGIT(config,"compareApp")=command line for compares
 ;                       (%1 is git version, %2 is account version)
 ;
MENU ; display a menu of git synchronization choices
 Q
SETDIR ; set the directory where routines are found by git
 N DFLT,HELP,X
 S DFLT=$G(^A5AGIT("directory"))
 S HELP="Enter the full directory path to where git stores M routines."
 S X=$$PROMPT^A5AGIT1("Directory",DFLT,"VALDIR^A5AGITC",HELP)
 Q:'$L(X)  Q:$E(X)="^"  S ^A5AGIT("directory")=X
 ;
 S DFLT=$G(^A5AGIT("wildcards"))
 S HELP="Enter namespaces (i.e., VPR*) delimited by commas."
 S X=$$PROMPT^A5AGIT1("Routines",DFLT,"",HELP)
 Q:'$L(X)  Q:$E(X)="^"  S ^A5AGIT("wildcards")=X
 ;
 S DFLT=$G(^A5AGIT("compareDir"))
 S HELP="Enter the full directory path to store temporary files (outside git)."
 S X=$$PROMPT^A5AGIT1("Compare directory",DFLT,"",HELP)
 Q:'$L(X)  Q:$E(X)="^"  S ^A5AGIT("compareDir")=X
 ;
 S DFLT=$G(^A5AGIT("compareApp"))
 S HELP="Enter the command to execute to compare files (%1 is git, %2 is uci)."
 S X=$$PROMPT^A5AGIT1("Compare command",DFLT,"",HELP)
 Q:'$L(X)  Q:$E(X)="^"  S ^A5AGIT("compareApp")=X
 Q
CHECK ; find routines where the git directory and this account differ
 N FILES,CNT,X
 D CHECK^A5AGIT1(.FILES)
 ; display any differences
 S CNT=0,X=""
 F  S X=$O(FILES(X)) Q:X=""  D
 . W !,X," ",$S(FILES(X)="M":"not in git directory",FILES(X)="G":"not in this M account",1:"differs")
 . S CNT=CNT+1
 W !,CNT," differences found",!
 Q
DIFF ; show diff between git directory version and this account
 N X,FILES,MROOT,MLINE,MFILE,GROOT,GLINE,GFILE
 I '$L($G(^A5AGIT("compareDir"))) W !,"Missing directory information." Q
 D CHECK^A5AGIT1(.FILES) I $D(FILES)<10 W !,"No differences found." Q
 ;
 K ^TMP($J)
 S MROOT=$NA(^TMP($J,"m")),MLINE=0
 S GROOT=$NA(^TMP($J,"git")),GLINE=0
 S X="" F  S X=$O(FILES(X)) Q:X=""  D
 . I (FILES(X)="M")!(FILES(X)="D") D ADDRTN^A5AGIT1(X,MROOT,.MLINE) ; append routine
 . I (FILES(X)="G")!(FILES(X)="D") D ADDFILE^A5AGIT1(X,GROOT,.GLINE) ; append file
 S MFILE=$$FULLNAME^A5AGITC("uci-"_$TR($H,",","-")_".txt",^A5AGIT("compareDir"))
 S GFILE=$$FULLNAME^A5AGITC("git-"_$TR($H,",","-")_".txt",^A5AGIT("compareDir"))
 D SAVEFILE^A5AGITC(MFILE,MROOT)
 D SAVEFILE^A5AGITC(GFILE,GROOT)
 K ^TMP($J)
 D COMPARE^A5AGITC(GFILE,MFILE)
 ; delete the files that were created
 Q
IMPORT ; import routines from the git directory
 W !,"Import files from the git directory into Caché.",!
 ; prompt for routine names
 N X,HELP,RTNS
 S HELP="Enter the name of a routine to import from git directory."
 F  D  Q:X=""  Q:X="^"
 . S X=$$PROMPT^A5AGIT1("Routine","","VALRTN^A5AGITC",HELP)
 . Q:X=""
 . S RTNS(X)=""
 Q:X="^"
 ;
 ; iterate through routines and call LOADFILE then SAVERTN for each routine
 S X="" F  S X=$O(RTNS(X)) Q:X=""  D
 . N BODY,FILE
 . S FILE=$$FULLNAME^A5AGITC(X_".int")
 . D LOADFILE^A5AGITC(FILE,.BODY)
 . D SAVERTN^A5AGITC(X,.BODY)
 . W !,X," loaded and saved"
 Q
EXPORT ; export routines to the git directory
 W !,"Export routines from Caché to the git directory.",!
 ; call routine selection
 D SLCTRTN^A5AGITC
 ; iterate through routines and call LOADRTN then SAVEFILE for each routine
 N RTN
 S RTN=0 F  S RTN=$O(^UTILITY($J,RTN)) Q:RTN=""  D
 . N BODY,FILE
 . D LOADRTN^A5AGITC(RTN,.BODY)
 . S FILE=$$FULLNAME^A5AGITC(RTN_".int")
 . D SAVEFILE^A5AGITC(FILE,"BODY")
 . W !,FILE," saved"
 Q
BUILD ; build a version of a package
 ; prompt to update version (in VERSION^VPRJVER)
 ; stuff date (in BLDTIME^VPRJVER)
 ; save the updated VPRJVER
 ; write out the updated VPRJVER for git
 ; call check, bail if there are differences
 ; add top lines for .ro
 ; iterate through wildcards for this configuration
 ;   iterate through the routines for each wildcard
 ;     add routine to ^TMP($J
 ; add empty lines
 ; do save file as jds.ro
 Q

A5AGIT1^INT^1^62901,47055.229809^0
A5AGIT1 ;SLC/KCM -- Supporting calls for git utilities
 ;;1.0;GIT Tools;;Feb 8, 2013
 ;
PROMPT(PROMPT,DEFAULT,TYPE,HELP) ; Return value for a prompt
 N X,MSG
 S DEFAULT=$G(DEFAULT),HELP=$G(HELP)
RETRY ;
 W !,PROMPT,": ",$S($L(DEFAULT):" "_DEFAULT_"// ",1:" ")
 R X:300 Q:X="^" X
 I X="?",$L(HELP) W !,HELP,! G RETRY
 I X="" S X=DEFAULT Q X
 I TYPE="N",$L(X),'X W !,"Numeric input required." G RETRY
 I TYPE["^",$L($T(@TYPE)) X "S MSG=$$"_TYPE_"(X)" I $L(MSG) W "  ",MSG G RETRY
 Q X
 ;
CHECK(FILES) ; list routines where the git directory and this account differ
 N NMSP,DIR,RTNS,I,X
 S NMSP=$G(^A5AGIT("wildcards")) Q:'$L(NMSP)
 S DIR=$G(^A5AGIT("directory")) Q:'$L(DIR)
 ; get lists of files & routines and checksum them
 F I=1:1:$L(NMSP,",") D FILESET^A5AGITC(DIR,$P(NMSP,",",I),.FILES)
 S X="" F  S X=$O(FILES(X)) Q:X=""  S FILES(X)=$$FILESUM(X)
 F I=1:1:$L(NMSP,",") D RTNSET^A5AGITC($P(NMSP,",",I),.RTNS)
 S X="" F  S X=$O(RTNS(X)) Q:X=""  S RTNS(X)=$$DBSUM(X)
 ; compare checksums between the files and routines
 S X="" F  S X=$O(FILES(X)) Q:X=""  D
 . I '$D(RTNS(X)) S FILES(X)="G" Q  ; not in this M account
 . I FILES(X)=RTNS(X) K FILES(X),RTNS(X) Q  ; same
 . S FILES(X)="D" K RTNS(X) ; differs
 S X="" F  S X=$O(RTNS(X)) Q:X=""  S FILES(X)="M" ;"not in the git directory"
 Q
 ;
DBSUM(X) ; Returns the CRC32 for a routine in the database
 N BODY
 D LOADRTN^A5AGITC(X,.BODY)
 Q $$ARYCRC(.BODY)
 ;
FILESUM(X) ; Returns the CRC32 for a routine in the file system
 N BODY,FNAME
 S FNAME=$$FULLNAME^A5AGITC(X_".int")
 D LOADFILE^A5AGITC(FNAME,.BODY)
 Q $$ARYCRC(.BODY)
 ;
ARYCRC(BODY) ; Returns the CRC32 for concat of lines in an array
 N STR,LINE,I
 S STR=""
 F I=1:1 Q:'$D(BODY(I,0))  S LINE=$TR(BODY(I,0),$C(9)," "),STR=STR_LINE 
 Q $$CRC32^A5AGITC(STR)
 ;
ADDRTN(RTN,ROOT,LINE) ; Add routine (RTN) to global (ROOT) starting at LINE
 N BODY
 D LOADRTN^A5AGITC(X,.BODY)
 S I=0 F  S I=$O(BODY(I)) Q:'I  S LINE=LINE+1,@ROOT@(LINE)=BODY(I,0)
 S LINE=LINE+1,@ROOT@(LINE)=""
 Q
ADDFILE(FILE,ROOT,LINE) ; Add routine (RTN) to global (ROOT) starting at LINE
 N BODY,FNAME
 S FNAME=$$FULLNAME^A5AGITC(X_".int")
 D LOADFILE^A5AGITC(FNAME,.BODY)
 S I=0 F  S I=$O(BODY(I)) Q:'I  S LINE=LINE+1,@ROOT@(LINE)=BODY(I,0)
 S LINE=LINE+1,@ROOT@(LINE)=""
 Q

A5AGITC^INT^1^62902,40607.590731^0
A5AGITC ;SLC/KCM -- OS functions specific to Intersystems Cache
 ;;1.0;GIT Tools;;Feb 8, 2013
 ;
VALDIR(PATH) ; return msg if directory path is NOT valid
 N OK
 S OK=##class(%Library.File).DirectoryExists(PATH)
 I 'OK Q "Directory does not exist"
 Q ""
 ;
VALRTN(RTN,DIR) ; return msg if file version of routine NOT in git directory
 N OK
 S RTN=$$FULLNAME(RTN_".int",$G(DIR))
 S OK=##class(%Library.File).Exists(RTN)
 I 'OK Q "Routine not found in git directory."
 Q ""
 ;
FULLNAME(FILE,DIR) ; return full name with directory included
 I '$L($G(DIR)) S DIR=^A5AGIT("directory")
 Q ##class(%Library.File).NormalizeFilename(FILE,DIR)
 ;
FILESET(PATH,PATTERN,LIST) ; given directory path, put file names in LIST
 N RS,STS,X
 S RS=##class(%ResultSet).%New()
 S RS.ClassName="%Library.File"
 S RS.QueryName="FileSet"
 S STS=RS.Execute(PATH,PATTERN)
 I STS F  S STS=RS.Next() Q:'STS  D
 . S X=$P(##class(%Library.File).GetFilename(RS.Name),".int")
 . S LIST(X)=""
 D RS.Close()
 Q
RTNSET(PATTERN,LIST) ; put routine names into LIST
 N ROOT,X
 S ROOT=$P(PATTERN,"*")
 I $D(^ROUTINE(ROOT)) S LIST(ROOT)=""
 S X=ROOT F  S X=$O(^ROUTINE(X)) Q:'$L(X)  Q:$E(X,1,$L(ROOT))'=ROOT  S LIST(X)=""
 Q
 ;
CRC32(X) ; Returns a 32-bit CRC for string in X
 Q $ZCRC(X,7)
 ;
FTG(FILE,GBL) ; Read from file & put each node into @GBL@(line,0)
 N I,LINE,EOF
 O FILE
 S EOF=0,I=0
 F  D READLN(.LINE) Q:EOF  S I=I+1 S @GBL@(I,0)=LINE
 C FILE
 Q
SAVEFILE(FILE,ROOT) ;
 N X,POP,$ET,CNT
 S $ET="S POP=1,$ECODE=""""",POP=0
 O FILE:("WN"):2 I '$T!POP W !,"Error opening file" Q
 S $ET="S $EC="""" C FILE W !,""Write Error"" Q"
 S CNT=0,X=ROOT,ROOT=$E(ROOT,1,$L(ROOT)-1) ; drop closing paranthesis
 F  S X=$Q(@X) Q:$E(X,1,$L(ROOT))'=ROOT  D
 . S CNT=CNT+1
 . U FILE W:CNT'=1 ! W @X ;for routines, last line has no CRLF
 C FILE
 Q
LOADFILE(FILE,BODY) ; Read from file & put into ARY(line,0)
 N I,LINE,EOF
 K ARY
 O FILE
 S EOF=0,I=0
 F  D READLN(.LINE) Q:EOF  S I=I+1 S BODY(I,0)=LINE
 C FILE
 Q
READLN(LINE) ; Read file into array
 ; expects FILE as the file handle
 ; called from LOADFILE
 N $ES,$ET
 S $ET="D CHKEOF^A5AGITC Q"
 U FILE R LINE:5
 Q
CHKEOF ; Check for EOF
 I $ZE["ENDOFFILE" S EOF=1,$EC=""
 Q
 ;
SLCTRTN ; Select routines and put them into ^UTILITY($J,"routine name")
 N TRSEL
 S TRSEL=$P($T(TRSEL+1),";;",2,99)
 X TRSEL
 Q
SAVERTN(X,BODY) ; Save routine as X from lines in DIF starting at XCNP
 N SAVEX,DIE,XCN
 S SAVEX=$P($T(TSAVE+1),";;",2,99),DIE="BODY(",XCN=0
 X SAVEX ; saves routine in BODY as X
 Q
LOADRTN(X,BODY) ; Load routine into root identified by DIF starting at XCNP
 N LOADX,DIF,XCNP
 K BODY
 S LOADX=$P($T(TLOAD+1),";;",2,99),DIF="BODY(",XCNP=0
 X LOADX ; loads routine named in X into BODY
 Q
COMPARE(GIT,UCI) ; compare git version to this version
 N COMMAND,STS
 S COMMAND=^A5AGIT("compareApp")
 S COMMAND=$P(COMMAND,"%1")_GIT_$P(COMMAND,"%1",2)
 S COMMAND=$P(COMMAND,"%2")_UCI_$P(COMMAND,"%2",2)
 W !,"Waiting for command to finish..."
 S STS=$ZF(-1,COMMAND)
 W $S('STS:"command failed",1:"done"),!
 Q
TRSEL ;; User selection of routines returned in ^UTILITY($J,"routine name")
 ;;K ^UTILITY($J) D KERNEL^%RSET K %ST ;Special entry point for VA
TLOAD ;; Load routine specified in X into @(DIF_XCNP_",0)"
 ;;N %,%N S %N=0 X "ZL @X F XCNP=XCNP+1:1 S %N=%N+1,%=$T(+%N) Q:$L(%)=0  S @(DIF_XCNP_"",0)"")=%"
TSAVE ;; Save routine X from @(DIE_XCN_",0)" -- modified so DIE not required to be global
 ;;N XCS,XCM S XCS="F XCM=1:1 S XCN=$O(@(DIE_XCN_"")"")) Q:+XCN'=XCN  S %=@(DIE_XCN_"",0)"") Q:$E(%,1)=""$""  I $E(%,1)'="";"" ZI %" X "ZR  X XCS ZS @X"
 ;



