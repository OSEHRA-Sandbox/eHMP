ext.set('repo', 'ehmp')
ext.set('groupId', 'releases.us.vistacore.rdk')
ext.set('artifactId', 'rdk')
ext.set('commitCountDir', projectDir)

def repoCommitCountClosure = {
  def proc1 = ['sh', '-c', "git rev-list --full-history --all ${->commitCountDir}"].execute()
  def proc2 = 'wc -l'.execute()
  proc1 | proc2
  return proc2.text.trim()
}

def repoCommitCount = "${->repoCommitCountClosure()}"
def version = "${->repoVersion + '.' + repoCommitCount}"

uploadArchives {
  repositories.mavenDeployer {
    pom.groupId = "${->groupId}"
    pom.version = "${->version}"
    repository(url: "http://nexus.vaftl.us:8081/nexus/content/repositories/ehmp/${->repo}/") {
      authentication(userName: System.getenv()['NEXUS_USER_NAME'], password: System.getenv()['NEXUS_PASSWORD'])
    }
  }
}

// task installNpm(type: Exec) {
//   group "RDK Tasks"
//   description "installs package(s)"
//   commandLine "bash", "-c", "ls -la"
//   // commandLine "npm", "install", "--registry", "http://nexus.vaftl.us:8081/nexus/content/repositories/npm-all/"
//   //commandLine "bash", "-c", "npm install --registry http://nexus.vaftl.us:8081/nexus/content/repositories/npm-all/"
// }

// task installNpmOracleDB(type: Exec) {
//   group "RDK Tasks"
//   description "installs the Oracle DB node package"
//   // commandLine "npm", "install", "oracledb@1.4.0", "--registry", "http://nexus.vaftl.us:8081/nexus/content/repositories/npm-all/"
//   commandLine "bash", "-c", "npm install oracledb@1.4.0 --registry http://nexus.vaftl.us:8081/nexus/content/repositories/npm-all/"
// }
task npmInstallVistaJs(type: Exec) {
 group "RDK tasks"
 description "Installing vista-js node module"
 workingDir "${projectDir}"
 commandLine "bash", "-c", "npm install ../../../../vista-js/"
}

task npmInstallJdsFilter(type: Exec) {
 group "RDK tasks"
 description "Installing jds-filter node module"
 workingDir "${projectDir}"
 commandLine "bash", "-c", "npm install ../../../../jds-filter/"
}

task installFakeOracleDB(type: Exec) {
  group "RDK Tasks"
  description "installs an empty Oracle DB node package for local testing iff none exists"
  commandLine "sh", "-c", "[ -d \"${projectDir}/node_modules/oracledb\" ] || mkdir -p \"${projectDir}/node_modules/oracledb\" && touch \"${projectDir}/node_modules/oracledb/index.js\""
}

// task ccowInstallNpm(type: Exec) {
//   workingDir './ccow'
//   group "RDK Tasks"
//   description "installs package(s) for ccow"
//   // commandLine "npm", "install", "--registry", "http://nexus.vaftl.us:8081/nexus/content/repositories/npm-all/"
//   commandLine "bash", "-c", "npm install --registry http://nexus.vaftl.us:8081/nexus/content/repositories/npm-all/"
// }

// task writeInstallNpm(type: Exec) {
//   workingDir './src/write'
//   group "RDK Tasks"
//   description "installs package(s) for write back"
//   // commandLine "npm", "install", "--registry", "http://nexus.vaftl.us:8081/nexus/content/repositories/npm-all/"
//   commandLine "bash", "-c", "npm install --registry http://nexus.vaftl.us:8081/nexus/content/repositories/npm-all/"
// }

task deleteNodeModulesContent(type: Delete) {
  group "RDK tasks"
  description ""
  delete "${projectDir}/node_modules"
}
// task deleteNodeModules(type: Delete) {
task deleteNodeModules(type: Exec, dependsOn: [deleteNodeModulesContent]) {
  group "RDK Tasks"
  description "Clean up node_modules"
  commandLine "sh", "-c", "rmdir node_modules"
  workingDir "${projectDir}"
  ignoreExitValue true
  // delete "${projectDir}/node_modules"\
}

// task cleanNPM() {
//   group "RDK Tasks"
//   description "Clean up node_modules"
// }

task restoreBundledNodeModules(type: Exec) {
  group "RDK Tasks"
  description "Restore bundled node_modules"
  // commandLine "git", "checkout", "${projectDir}/node_modules"
  commandLine "bash", "-c", "git checkout ${projectDir}/node_modules"
}

// task cleanNPM(dependsOn: [deleteNodeModules, restoreBundledNodeModules]) {
task cleanNPM(dependsOn: [deleteNodeModules]) {
// task cleanNPM() {
  group "RDK Tasks"
  description "Clean up node_modules"
}
clean.dependsOn cleanNPM

// task build(dependsOn: [clean, installNpm, installFakeOracleDB]) {
// task build(dependsOn: [clean, installFakeOracleDB]) {
task build(dependsOn: [npmInstallVistaJs, npmInstallJdsFilter, installFakeOracleDB]) {
  group "RDK Tasks"
  description "installs package(s)"
}

task check(type: Exec, dependsOn: [build]) {
  group "RDK Tasks"
  description "installs package(s) and runs jshint"
  // commandLine "npm", "run-script", "check"
  commandLine "bash", "-c", "npm run-script check"
}

task test(type: Exec, dependsOn: [build]) {
  group "RDK Tasks"
  description "installs package(s) and runs unit tests"
  // commandLine "npm", "test"
  commandLine "bash", "-c", "npm test"
}

// task rdkIntTests(type: Exec, dependsOn: [build]) {
//   group "RDK Tasks"
//   description "installs package(s) and runs integration tests"
//   workingDir "${projectDir}/../../tests/"
//   // commandLine "rake", "inttest"
//   commandLine "bash", "-c", "rake inttest"
// }

// task rdkAllTests(dependsOn: [test, rdkIntTests]) {
//   group "RDK Tasks"
//   description "runs unit and integration tests"
// }

// task zipRDK(type: Zip, dependsOn: [build, ccowInstallNpm, writeInstallNpm]) {
task zipRDK(type: Zip, dependsOn: [build]) {  
  extension = 'zip'
  baseName = 'rdk'
  version = version
  destinationDir parent.parent.buildDir
  from projectDir
}

uploadArchives.dependsOn zipRDK

artifacts {
  archives zipRDK
}
