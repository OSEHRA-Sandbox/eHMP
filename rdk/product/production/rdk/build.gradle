ext.set('groupId', 'us.vistacore.rdk')
ext.set('artifactId', 'rdk')
ext.set('commitCountDir', projectDir)

import org.apache.tools.ant.taskdefs.condition.Os

def repoCommitCountClosure = {
  def proc = ['sh', '-c', "git rev-list --count --first-parent HEAD ${->commitCountDir}"].execute()
  return proc.text.trim()
}

def repoCommitCount = "${->repoCommitCountClosure()}"
def version = "${->repoVersion + '.' + repoCommitCount}"

uploadArchives {
  repositories.mavenDeployer {
    pom.groupId = "${->groupId}"
    pom.version = "${->version}"
    repository(url: "${->nexusURL}/nexus/content/repositories/${->uploadRepo}/") {
      authentication(userName: System.getenv()['NEXUS_USER_NAME'], password: System.getenv()['NEXUS_PASSWORD'])
    }
  }
}

if(Os.isFamily(Os.FAMILY_MAC)) {
  task installNpm(type: Exec) {
    group "RDK Tasks"
    description "installs package(s)"
    commandLine "npm", "install", "--registry", npmRegistry
  }
} else {
  task installNpm(type: Exec) {
    group "RDK Tasks"
    description "installs package(s)"
    commandLine "scl", "enable", "python27", "devtoolset-3", "CC=/opt/rh/devtoolset-3/root/usr/bin/gcc CXX=/opt/rh/devtoolset-3/root/usr/bin/g++ /usr/local/bin/npm install --unsafe-perm --registry ${->npmRegistry}"
  }
}

task installNpmOracleDB(type: Exec) {
  group "RDK Tasks"
  description "installs the Oracle DB node package"
  commandLine "scl", "enable", "python27", "devtoolset-3", "CC=/opt/rh/devtoolset-3/root/usr/bin/gcc CXX=/opt/rh/devtoolset-3/root/usr/bin/g++ /usr/local/bin/npm install oracledb@1.12.2 --unsafe-perm --registry ${->npmRegistry}"
}

task installFakeOracleDB(type: Exec) {
  group "RDK Tasks"
  description "installs an empty Oracle DB node package for local testing iff none exists"
  commandLine "sh", "-c", "[ -d \"${projectDir}/node_modules/oracledb\" ] || mkdir -p \"${projectDir}/node_modules/oracledb\" && touch \"${projectDir}/node_modules/oracledb/index.js\""
}

task cleanNPM(type: Delete) {
  group "RDK Tasks"
  description "Clean up node_modules"
  delete "${projectDir}/node_modules"
}

task deletePreparsedApiDocs(type: Delete) {
  inputs.dir 'src/core/api-blueprint'
  outputs.upToDateWhen { true }
  delete fileTree(dir: 'src', include: '**/*.md-preparsed.json')
}

clean.dependsOn cleanNPM
clean.dependsOn deletePreparsedApiDocs

task build(dependsOn: [clean, installNpm, installFakeOracleDB]) {
  group "RDK Tasks"
  description "installs package(s)"
}

task check(type: Exec, dependsOn: [build]) {
  group "RDK Tasks"
  description "installs package(s) and runs jshint"
  commandLine "npm", "run-script", "check"
}

task test(type: Exec, dependsOn: [build]) {
  group "RDK Tasks"
  description "installs package(s) and runs unit tests"
  commandLine "npm", "test"
}

task rdkIntTests(type: Exec, dependsOn: [build]) {
  group "RDK Tasks"
  description "installs package(s) and runs integration tests"
  workingDir "${projectDir}/../../tests/"
  commandLine "rake", "inttest"
}

task rdkAllTests(dependsOn: [test, rdkIntTests]) {
  group "RDK Tasks"
  description "runs unit and integration tests"
}

task zipRDK(type: Zip, dependsOn: [build]) {
  extension = 'zip'
  baseName = 'rdk'
  version = version
  destinationDir parent.parent.buildDir
  from projectDir
  exclude { details -> details.file.name.endsWith('-spec.js') ||
                       details.file.name.endsWith('-spec-data.js') ||
                       details.file.name.endsWith('-spec-data.json') ||
                       details.file.name.endsWith('.gradle') ||
                       details.file.name.endsWith('.log') ||
                       details.file.name.equalsIgnoreCase('xunit.xml') ||
                       details.file.name.endsWith('.sh') ||
                       details.file.name.startsWith('.') }
}

uploadArchives.dependsOn zipRDK

artifacts {
  archives zipRDK
}
