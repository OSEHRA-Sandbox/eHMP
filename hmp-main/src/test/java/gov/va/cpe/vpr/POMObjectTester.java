package gov.va.cpe.vpr;

import gov.va.cpe.vpr.pom.IPOMObject;
import gov.va.cpe.vpr.pom.POMUtils;
import gov.va.cpe.vpr.sync.util.MsgSrcDest;
import gov.va.cpe.vpr.sync.util.MsgSrcDest.JSONZIPMsgSrc;
import gov.va.cpe.vpr.sync.util.SyncUtils;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.databind.JsonNode;

/** 
 * Unit test util that can load a bunch of patient data for testing.
 * Can load a .zip file full of patient data generated by {@link SyncUtils} or a single
 * .json file.
 * 
 * Can resolve to full POM object (via {@link #loadZipFile(File, String, String)} and
 * {@link #loadFile(File)}) or a raw map (via {@link #loadZipFileData(File, String, String)} and
 * {@link POMObjectTester#loadFileData(File)})
 * 
 * If custom handling is required, you can overload the {@link #resolve(JsonNode)} {@link #handle(IPOMObject)}
 * methods.
 */
public class POMObjectTester<T extends IPOMObject> {
	
	/**
	 * Call this one or more times in your constructor or @Before setup methods.
	 */
	public List<T> loadZipFile(File file, String pid, String domain) throws IOException {
		MsgSrcDest src = new JSONZIPMsgSrc(file);
		
		List<T> ret = new ArrayList<>();
		Iterator<String> itr = src.read(pid, domain);
		while (itr.hasNext()) {
			T obj = resolve(POMUtils.parseJSONtoNode(itr.next()));
			if (obj != null) ret.add(obj);
		}
		return ret;
	}
	
	public List<Map<String,Object>> loadZipFileData(File file, String pid, String domain) throws IOException {
		MsgSrcDest src = new JSONZIPMsgSrc(file);
		
		List<Map<String,Object>> ret = new ArrayList<>();
		Iterator<String> itr = src.read(pid, domain);
		while (itr.hasNext()) {
			ret.add(POMUtils.parseJSONtoMap(itr.next()));
		}
		return ret;
	}

	/** Load a single JSON file from disk */
	public T loadFile(File file) {
		try {
			return resolve(POMUtils.parseJSONtoNode(new FileReader(file)));
		} catch (FileNotFoundException e) {
			throw new RuntimeException(e);
		}
	}
	
	public Map<String,Object> loadFileData(File file) {
		try {
			return POMUtils.parseJSONtoMap(new FileReader(file));
		} catch (FileNotFoundException e) {
			throw new RuntimeException(e);
		}
	}
	
	public static File resolveFile(URL url) {
		try {
			return new File(url.toURI());
		} catch (URISyntaxException e) {
			throw new RuntimeException(e);
		}
	}
	
	public static File resolveFile(String file, Class<?> clazz) {
		return resolveFile(clazz.getResource(file));
	}
	
	protected T resolve(JsonNode msgNode) {
		String uid = msgNode.get("uid").asText();
		Class<T> clazz = (Class<T>) UidUtils.getDomainClassByUid(uid);
		return handle(POMUtils.newInstance(clazz, msgNode));
	}

	/**
	 * Extender can implement this method to store/save the data somewhere for
	 * tests to access later.
	 */
	protected T handle(T obj) {
		// NOOP by default
		return obj;
	}
}
