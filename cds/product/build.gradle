
if( ! System.getenv().keySet().contains('WORKSPACE') ) {
  throw new GradleException('Required environment variables not set. Did you "source infrastructure/set.env.sh"?')
}

allprojects  {

  println "=====================================\nLOADING ALLPROJECTS BLOCK..."
  ext.set('groupId', 'us.vistacore.rdk')
  ext.set('repoVersion', getRepoVersion())
  ext.set('branchName', getCurrentBranchName())
  ext.set('currentCommitHash', getCurrentCommitHash())
  ext.set('nexusURL', getNexusURL())
  ext.set('uploadRepo', getNexusUploadRepository())
  ext.set('commitCountDir', projectDir)

  println "SETTINGS:\n   repoVersion = ${repoVersion}"
  println "   commitCountDir = ${commitCountDir}"
  println "   currentCommitHash = ${currentCommitHash}"

  def repoCommitCountClosure = {
    def proc = ['sh', '-c', "git rev-list --count --first-parent HEAD ${->commitCountDir}"].execute()
    return proc.text.trim()
  }
  
  def repoCommitCount = "${->repoCommitCountClosure()}"
  version = "${->repoVersion + '.' + repoCommitCount}"
  ext.set('infrastructureVersion', version)
  def cwd = "pwd".execute().text.trim()
  println "\nand when pwd = ${cwd} and version = ${version}\n\n"


  tasks.withType(Exec) {
      doFirst {
          println commandLine
      }
  }
  println "DONE LOADING ALL PROJECTS BLOCK\n=====================================\n"
}


apply from : '../infrastructure/gradle/deploy.gradle'


task smokeTest{
  group "Test"
  doLast{
    exec {
      workingDir = "${rootDir}/tests/smoke-tests"
      executable = "ruby"
      args = ['CDSI-Smoke-Test.rb'] 
    }
  }
}

def getNexusURL() {
    System.env.OVERRIDE_NEXUS_URL ?: 'http://nexus.osehra.org:8081'
}

def getNexusUploadRepository() {
    System.env.NEXUS_UPLOAD_REPO ?: 'releases'
}

def getRepoVersion() {
    def v
    if( System.getenv().keySet().contains('ARTIFACT_VERSION_PREFIX') ){
      v = System.getenv()['ARTIFACT_VERSION_PREFIX']
    } else {
        v = new File(rootDir, "../infrastructure/properties/applicationVersionPrefix").getText()
    }
    if (v.endsWith('.'))
        v = v.substring(0, v.length()-1)
    return v
}

def getCurrentBranchName() {
    def branchName
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        branchName = repoVersion + '.' + 'cmd /C git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    } else {
        branchName = ['sh', '-c', 'git rev-parse --abbrev-ref HEAD'].execute().text.trim()
    }
    return branchName
}

def getCurrentCommitHash() {
    def commitHash
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commitHash = repoVersion + '.' + 'cmd /C git rev-parse HEAD'.execute().text.trim()
    } else {
        commitHash = ['sh', '-c', 'git rev-parse HEAD'].execute().text.trim()
    }
    return commitHash
}

//This function is used for getting commit count for a project
//because the allprojects routine hasn't run yet for any project other than ROOT to
//set the project.version property correctly
def getVersionByCommitCountForProject(projectString ){
    def commitCountDir = project("${projectString}").projectDir
    def proc = ['sh', '-c', "git rev-list --count --first-parent HEAD ${->commitCountDir}"].execute()
    version = "${getRepoVersion() + '.' + proc.text.trim()}"
    return version
}

def local_provision_version() {
  def text = new File("$rootDir/provisioner/provisionerVersion").text.trim()
  return text
}

task generateVersionPropertiesFile() {
    group= "Maven Build"
    doLast {
        def cdsinvocationVersion = project(':production:cdsinvocation').version
        def cdsdashboardVersion = project(':production:cdsdashboard').version
        def opencdsVersion = project(':production:opencds').version
        def commitHash = getCurrentCommitHash()
        def provisionerVersion = local_provision_version()

        println "COMMIT_HASH='${commitHash}'"
        println "CDS_PROVISION='${provisionerVersion}'"
        println "CDSI_METRICS_VERSION='${cdsinvocationVersion}'"
        println "CDSI_RESULTS_VERSION='${cdsinvocationVersion}'"
        println "CDS_ENGINE_AGENT_VERSION='${cdsinvocationVersion}'"
        println "CDSDASHBOARD_VERSION='${cdsdashboardVersion}'"
        println "OPENCDS_VERSION='${opencdsVersion}'"
        println "OPENCDS_KNOWLEDGE_REPOSITORY_DATA_VERSION='${opencdsVersion}'"

        project.buildDir.mkdirs()
        delete "${project.buildDir}/version.properties"

        new File("${project.buildDir}/version.properties") << """CDSI_METRICS_VERSION=${cdsinvocationVersion}
CDSI_RESULTS_VERSION=${cdsinvocationVersion}
CDS_ENGINE_AGENT_VERSION=${cdsinvocationVersion}
COMMIT_HASH=${commitHash}
CDSDASHBOARD_VERSION=${cdsdashboardVersion}
OPENCDS_VERSION=${opencdsVersion}
OPENCDS_KNOWLEDGE_REPOSITORY_DATA_VERSION=${opencdsVersion}
CDS_PROVISION=${provisionerVersion}"""
    }
}